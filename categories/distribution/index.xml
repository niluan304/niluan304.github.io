<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Distribution on 雾封的笔</title>
        <link>https://niluan304.github.io/categories/distribution/</link>
        <description>Recent content in Distribution on 雾封的笔</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>雾封</copyright>
        <lastBuildDate>Mon, 15 Apr 2024 09:52:02 +0800</lastBuildDate><atom:link href="https://niluan304.github.io/categories/distribution/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>如何实现本地 MySQL 和 MongoDB 双写时数据一致性</title>
        <link>https://niluan304.github.io/p/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0-mysql-%E5%92%8C-mongodb-%E5%8F%8C%E5%86%99%E6%97%B6%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7/</link>
        <pubDate>Mon, 15 Apr 2024 09:52:02 +0800</pubDate>
        
        <guid>https://niluan304.github.io/p/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0-mysql-%E5%92%8C-mongodb-%E5%8F%8C%E5%86%99%E6%97%B6%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7/</guid>
        <description>&lt;p&gt;这段时间面试，遇到了一道和实际生产相关的面试题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;现有一系统，积分使用 &lt;code&gt;MongoDB&lt;/code&gt; 存储，点券存储在 &lt;code&gt;MySQL&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;用户通过日常任务获取积分，点券则可以提现。&lt;/p&gt;
&lt;p&gt;现推出一活动 1000 积分兑换 10 点券，怎么实现？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;和缓存一致性的不同&#34;&gt;和缓存一致性的不同&lt;/h2&gt;
&lt;p&gt;对于这种跨数据库之间的操作，可能会误认为类似「如何实现 &lt;code&gt;MySQL&lt;/code&gt; 和 &lt;code&gt;Redis&lt;/code&gt; 的数据一致性？」，但两者之间其实很不同，&lt;code&gt;Redis&lt;/code&gt; 在这种场景一般用于充当远程缓存或分布式缓存数据库，其本质上是将数据从支持持久化但慢速的磁盘中，搬到断电丢失但高速的内存中。也就是说，在实现 &lt;code&gt;MySQL&lt;/code&gt;、&lt;code&gt;Redis&lt;/code&gt; 数据一致性时，我们操作的仍是同一份数据，考虑得比较多的是避免用户读取到脏数据（旧数据）。&lt;/p&gt;
&lt;p&gt;而题目的要求其实是：如何解决分布式数据库在双写时的数据一致性？&lt;/p&gt;
&lt;h2 id=&#34;分布式事务&#34;&gt;分布式事务&lt;/h2&gt;
&lt;p&gt;面试的时候，笔者联想到了跨行转账，跨行转账业务有三种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;相同支行下的转账：同一支行内的转账（本地事务）&lt;/li&gt;
&lt;li&gt;不同支行下的转账：相同银行，不同支行下的转账 （分布式事务）&lt;/li&gt;
&lt;li&gt;跨行转账：和其他银行系统进行转账 （分布式事务）&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;假设银行以支行为最小单位，进行数据库部署&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而这道题很像场景二，比如「用户A 是工行深圳支行的用户，用户B 是工行广州支行的用户，A向B转账100元」，虽然都是 A 和 B 都是工行用户，但是 A 和 B 的数据并不在同一个数据库，那么就需要两个数据库之间的进行数据交换，这时候无法通过本地数据库的事务实现 ACID，一般通过分布式事务解决的。&lt;/p&gt;
&lt;h3 id=&#34;查询确认事务结果&#34;&gt;查询确认事务结果&lt;/h3&gt;
&lt;p&gt;场景二下，可以认为在工行这个大系统，内部有由深圳支行和广州支行的这样微服务组成，而微服务之间的业务流转相对简单一些：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;深圳支行扣除用户A 的100元。&lt;/li&gt;
&lt;li&gt;深圳支行通知广州支行，用户A要转账 100元 给用户B。&lt;/li&gt;
&lt;li&gt;深圳支行定时向广州支行查询是否收到了转账，如果失败了那就回滚。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体流程大概是这样：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;深圳支行的用户A 发起转账请求，开启事务&lt;/li&gt;
&lt;li&gt;深圳支行创建转账订单，记录用户A 的支出和转账前后点券，且状态设置为「支出中」&lt;/li&gt;
&lt;li&gt;深圳支行通知广州支行，用户A 向 用户B 转账，广州支行收到通知后：
&lt;ol&gt;
&lt;li&gt;开启事务&lt;/li&gt;
&lt;li&gt;创建转账订单，记录用户B 的收入和转账前后点券，且状态设置为「收入中」&lt;/li&gt;
&lt;li&gt;更新订单状态，并返回转账结果给深圳支行&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;深圳支行收到广州支行的回复：
&lt;ul&gt;
&lt;li&gt;成功：转账订单状态更新为「成功」，提交事务&lt;/li&gt;
&lt;li&gt;失败：转账订单状态更新为「失败」，回滚事务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;%% 时序图 [Markdown 进阶技能：用代码画时序图](https://zhuanlan.zhihu.com/p/70261692)
%% -&amp;gt;&amp;gt;实线箭头 代表主动发出消息；--&amp;gt;虚线代表响应；末尾带「X」代表异步消息，无需等待回应。
sequenceDiagram
    participant 用户A
    participant 深圳支行
    participant 广州支行
    participant 用户B
    用户A -&amp;gt;&amp;gt; + 深圳支行: 向用户B 转账
    深圳支行 -&amp;gt;&amp;gt; 深圳支行: 创建转账订单，状态 PAYOUT
    深圳支行 -&amp;gt;&amp;gt; 深圳支行: 事务 BEGIN
    深圳支行 -&amp;gt;&amp;gt; + 广州支行: A向B转账
    广州支行 -&amp;gt;&amp;gt; 用户B: 执行转账操作
    用户B --&amp;gt;&amp;gt; 广州支行: 转账结果
    alt 转账成功
  		用户B --&amp;gt;&amp;gt; 广州支行: 订单状态 SUCC
  	else 转账失败
  		用户B --&amp;gt;&amp;gt; 广州支行: 订单状态 FAIL
    end    
    广州支行 --&amp;gt;&amp;gt; - 深圳支行: 转账结果
    alt 转账成功
  		深圳支行 --&amp;gt;&amp;gt; 深圳支行: 订单状态 SUCC
  		深圳支行 --&amp;gt;&amp;gt; 深圳支行: 事务 COMMIT
  	else 转账失败
  		深圳支行 --&amp;gt;&amp;gt; 深圳支行: 订单状态 FAIL
  		深圳支行 --&amp;gt;&amp;gt; 深圳支行: 事务 ROLLBAK
    end
    深圳支行 --&amp;gt;&amp;gt; - 用户A: 收到转账结果
  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在上述流程是同步的，用户需要在转账界面等待转账结果，如果转账耗时过久，会影响到用户体验。可以将转账结果改成异步事件。&lt;/p&gt;
&lt;p&gt;在用户提交转账请求后，返回提示：「转账请求已提交，请稍后查看转账结果」，用户就可以先浏览其他页面，等待转账结果的推送。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;%% 时序图 [Markdown 进阶技能：用代码画时序图](https://zhuanlan.zhihu.com/p/70261692)
%% -&amp;gt;&amp;gt;实线箭头 代表主动发出消息；--&amp;gt;虚线代表响应；末尾带「X」代表异步消息，无需等待回应。
sequenceDiagram
    participant 用户A
    participant 深圳支行
    participant 广州支行
    participant 用户B
    用户A -&amp;gt;&amp;gt; + 深圳支行: 向用户B转账
    深圳支行 -&amp;gt;&amp;gt; 深圳支行: 创建转账订单，状态 PAYOUT
    深圳支行 --&amp;gt;&amp;gt; - 用户A: 稍后查看转账结果
    深圳支行 -&amp;gt;&amp;gt; + 深圳支行: 事务 BEGIN
    深圳支行 -&amp;gt;&amp;gt; 广州支行: A向B转账
    广州支行 -&amp;gt;&amp;gt; 用户B: 执行转账操作
    用户B --&amp;gt;&amp;gt; 广州支行: 转账结果
    
	loop 定时查询
        深圳支行 -&amp;gt;&amp;gt; 广州支行: 转账订单状态
        广州支行 --&amp;gt;&amp;gt; 深圳支行: 转账订单结果
    end
    
    alt 转账成功
  		深圳支行 --&amp;gt;&amp;gt; 深圳支行: 订单状态 SUCC
  		深圳支行 --&amp;gt;&amp;gt; 深圳支行: 事务 COMMIT
  	else 转账失败
  		深圳支行 --&amp;gt;&amp;gt; 深圳支行: 订单状态 FAIL
  		深圳支行 --&amp;gt;&amp;gt; - 深圳支行: 事务 ROLLBACK
    end
    深圳支行 -&amp;gt;&amp;gt; 用户A: 转账结果  
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;二阶段提交协议&#34;&gt;二阶段提交协议&lt;/h3&gt;
&lt;p&gt;2PC 与 MySQL单机中的 2PL 有相似点，都有两个阶段，但适用的目标是不一样的，不能混淆。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;二阶段加锁协议（Two-Phase Locking, 2PL）：一种用于管理数据库事务并发控制的协议，主要目的是防止多个事务同时修改同一数据项，以避免数据不一致的问题，实现可序列化的隔离等级。&lt;/li&gt;
&lt;li&gt;二阶段提交协议（Two-Phase Commit, 2PC） ：一种用于实现分布式系统中的原子性操作的协议，确保所有的事务参与者要么全部提交，要么全部回滚，从而保证分布式事务的完整性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;2PC 的基本流程如下：
&lt;img src=&#34;https://vonng.github.io/ddia/img/fig9-9.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;2PC的相关内容，见设计密集型应用（Designing Data-Intensive Applications, DDIA）「&lt;a class=&#34;link&#34; href=&#34;https://vonng.github.io/ddia/#/ch9?id=%e5%8e%9f%e5%ad%90%e6%8f%90%e4%ba%a4%e4%b8%8e%e4%b8%a4%e9%98%b6%e6%ae%b5%e6%8f%90%e4%ba%a4&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;第九章：一致性与共识&lt;/a&gt;」，笔者就不赘述了。&lt;/p&gt;
&lt;h2 id=&#34;依赖关系mysql-为主&#34;&gt;依赖关系：MySQL 为主&lt;/h2&gt;
&lt;p&gt;面试官表示分布式事务是更通用的解决方法，如果用到 &lt;code&gt;MySQL&lt;/code&gt; 和 &lt;code&gt;MongoDB&lt;/code&gt; 都是本地数据库这个条件，这题可以有更好的处理方法。面试结束后，伟大的互联网告诉笔者确实如此。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MySQL&lt;/code&gt; 存储点券，&lt;code&gt;MongoDB&lt;/code&gt; 存储积分，很明显点券是核心数据，那么需要以 &lt;code&gt;MySQL&lt;/code&gt; 为主，所以&lt;code&gt;MySQL&lt;/code&gt; 中应该有一个字段 &lt;code&gt;mongo_id&lt;/code&gt; 用于关联 &lt;code&gt;MongoDB&lt;/code&gt; 的主键 &lt;code&gt;_id&lt;/code&gt;，而查询 &lt;code&gt;MongoDB&lt;/code&gt; 存储的积分，只能通过 &lt;code&gt;MySQL&lt;/code&gt; 里 &lt;code&gt;mongo_id&lt;/code&gt; 字段。&lt;/p&gt;
&lt;p&gt;假设 &lt;code&gt;MySQL&lt;/code&gt; 表结构如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wallet&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;INT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;PRIMARY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;userId&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;balance&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;DECIMAL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;点券&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mongo_id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;VARCHAR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;MongoDB 主键id&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;MongoDB&lt;/code&gt; 文档结构如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;_id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;661bcb98cd3500008c007b5c&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;score&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;主要思想是借鉴预写日志（Write Ahead Log, WAL），实现 &lt;code&gt;MySQL&lt;/code&gt; 与 &lt;code&gt;MongoDB&lt;/code&gt; 的双写一致性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开启 &lt;code&gt;MySQL&lt;/code&gt; 事务，避免并发问题&lt;/li&gt;
&lt;li&gt;先在  &lt;code&gt;MongoDB&lt;/code&gt;  插入修改后的数据，而不是去更新  &lt;code&gt;MongoDB&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;再更新 &lt;code&gt;MySQL&lt;/code&gt; 的 &lt;code&gt;mongo_id&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体流程如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;%% 时序图 [Markdown 进阶技能：用代码画时序图](https://zhuanlan.zhihu.com/p/70261692)
%% -&amp;gt;&amp;gt;实线箭头 代表主动发出消息；--&amp;gt;虚线代表响应；末尾带「X」代表异步消息，无需等待回应。
sequenceDiagram
    participant 用户
    participant 系统
    participant MySQL
    participant MongoDB
    用户 -&amp;gt;&amp;gt; + 系统: 积分兑换点券
    系统 -&amp;gt;&amp;gt; MySQL: 事务 BEGIN
    系统 -&amp;gt;&amp;gt; MySQL: 查询 user_id
    MySQL --&amp;gt;&amp;gt; 系统: 返回 blance, mongo_id
    系统 -&amp;gt;&amp;gt; MongoDB: 查询 mongo_id
    MongoDB --&amp;gt;&amp;gt; 系统: 返回 document
    系统 -&amp;gt;&amp;gt; 系统: document.score -= 100
    系统 -&amp;gt;&amp;gt; MongoDB: 插入修改后的 document
    MongoDB --&amp;gt;&amp;gt; 系统: 返回 mongo_id
    系统 -&amp;gt;&amp;gt; MySQL: 更新 blance, mongo_id
    MySQL --&amp;gt;&amp;gt; 系统: 更新成功
    MySQL --&amp;gt;&amp;gt; 系统: 事务 COMMIT
    系统 --&amp;gt;&amp;gt; - 用户: 兑换完成

  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这个流程中，无论什么时候写入出错，都不会影响到数据的一致性。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果在 &lt;code&gt;MongoDB&lt;/code&gt; 插入新数据时出错，&lt;code&gt;MySQL&lt;/code&gt; 中保存的仍为老数据。&lt;/li&gt;
&lt;li&gt;如果在 &lt;code&gt;MySQL&lt;/code&gt; 更新时出错，&lt;code&gt;MySQL&lt;/code&gt; 中保存的仍为老数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不过这种方案会带来一个问题，&lt;code&gt;MongoDB&lt;/code&gt; 会新增一条无效的垃圾数据，解决方法有两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;异步删除。通过带有重试机制的消息队列，直到垃圾数据被删除。&lt;/li&gt;
&lt;li&gt;定时器删除。通过定时器，查询出近段时间垃圾数据，并做删除。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zq99299.github.io/note-book/back-end-storage/01/05.html#%e5%88%b0%e5%ba%95%e4%bb%80%e4%b9%88%e6%98%af%e5%88%86%e5%b8%83%e5%bc%8f%e4%ba%8b%e5%8a%a1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;分布式事务：如何保证多个系统间的数据是一致的？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/7173629924111532045&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;如何保证mongodb和数据库双写数据一致性？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.diguage.com/post/overview-of-distributed-transaction/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;分布式事务概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.fanyilun.me/2021/03/06/%e4%b8%80%e8%87%b4%e6%80%a7%e9%97%ae%e9%a2%98%e4%b8%8e%e5%88%86%e5%b8%83%e5%bc%8f%e4%ba%8b%e5%8a%a1/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;一致性问题与分布式事务&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/jackion5/p/11364935.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;以银行转账为例分析分布式事务的解决方案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
