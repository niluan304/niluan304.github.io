<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LeetCode on 雾封的笔</title>
    <link>https://niluan304.github.io/categories/leetcode/</link>
    <description>Recent content in LeetCode on 雾封的笔</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Mar 2024 16:54:07 +0800</lastBuildDate>
    <atom:link href="https://niluan304.github.io/categories/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lc70 爬楼梯</title>
      <link>https://niluan304.github.io/posts/lc70-%E7%88%AC%E6%A5%BC%E6%A2%AF/</link>
      <pubDate>Mon, 11 Mar 2024 16:54:07 +0800</pubDate>
      <guid>https://niluan304.github.io/posts/lc70-%E7%88%AC%E6%A5%BC%E6%A2%AF/</guid>
      <description>将简单难度的题目拓展到中等难度&#xA;动态规划入门：递归 本题 70. 爬楼梯 是非常经典的动态规划入门题，动态规划的核心是找到状态转移方程：当前状态与之前状态的关系。想要找到方程，通常需要我们用自顶向下的方式去思考问题，将一个大问题转化为解决子问题，实现的手段通常为递归。&#xA;读题：&#xA;每次可以爬 $1$ 或 $2$ 阶； 一共要爬 $n$ 阶； 问爬到 $n$ 阶有多少种方法？ 假设当前处于第 $n$ 阶，问：上一步处于哪个阶梯？&#xA;答：处于 $n-1$ 或 $n-2$ 阶。因为每次只能爬 $1$ 阶或 $2$ 阶，那么上一步选择爬 $1$ 阶，就会处于 $n-1$ 阶，选择爬 $2$ 阶，就会处于 $n-2$ 阶。&#xA;解题思路：&#xA;记 $f(n)$ 为爬到 $n$ 阶的方法数，如果知道了 $f(n-1)$ 和 $f(n-2)$ ，两者相加就能得到 $f(n)$ ，即 $f(n) = f(n-1) + f(n-2)$ 。&#xA;那又如何求 $f(n-1)$ 和 $f(n-2)$ 呢？令 $n = n-1$ ，就有 $f(n-1) = f(n-2) + f(n-3)$ ，可以发现，解决的手段就是递归。</description>
    </item>
  </channel>
</rss>
