<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 雾封的笔</title><link>https://niluan304.github.io/post/</link><description>Recent content in Posts on 雾封的笔</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>雾封</copyright><lastBuildDate>Sun, 16 Jun 2024 23:53:49 +0800</lastBuildDate><atom:link href="https://niluan304.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>折腾笔记：在小米路由器原生系统上部署自定义应用，实现远程开关机</title><link>https://niluan304.github.io/p/%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0%E5%9C%A8%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8%E5%8E%9F%E7%94%9F%E7%B3%BB%E7%BB%9F%E4%B8%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%94%E7%94%A8%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%85%B3%E6%9C%BA/</link><pubDate>Sun, 16 Jun 2024 23:53:49 +0800</pubDate><guid>https://niluan304.github.io/p/%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0%E5%9C%A8%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8%E5%8E%9F%E7%94%9F%E7%B3%BB%E7%BB%9F%E4%B8%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%94%E7%94%A8%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%85%B3%E6%9C%BA/</guid><description>&lt;h2 id="起因远程开关机的需求">起因：远程开关机的需求&lt;/h2>
&lt;p>笔者6月初组了台式，并将主机置于角落，按下物理的开关键变得很麻烦，因此有了远程开关机的需求。
经过了解后，发现远程开关机有三种方式：&lt;/p>
&lt;ul>
&lt;li>主板通电开机 + 智能插座物理断电关机&lt;/li>
&lt;li>安装 PCIe 开机卡&lt;/li>
&lt;li>Wake On Lan + SSH关机&lt;/li>
&lt;/ul>
&lt;h3 id="智能插座">智能插座&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>开机
现代主板都有来电自启动这个功能，开启之后，搭配智能插座的远程通断电功能，如米家插座，就可以远程开机了。&lt;/p>
&lt;ul>
&lt;li>智能插座一般都依赖于路由器提供Wi-Fi，以接入物联网 Internet of Things(IoT) 软件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>关机
通过智能插座的物理断电以强制关机。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>优缺点&lt;/p>
&lt;ul>
&lt;li>实现简单：只需要购买智能插座和开启主板的来电自启&lt;/li>
&lt;li>花费：¥40 智能插座&lt;/li>
&lt;li>开机慢： 主板在通电后首次开机，自检项目很多，导致开机时间被延长&lt;/li>
&lt;li>断电关机有风险：如果在传输数据过程中关机，操作系统可能会来不及保存数据而造成文件损坏
&lt;ul>
&lt;li>向日葵智能插座提供了软关机的方式，但需要后台运行向日葵监控软件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="pcie-开机卡">PCIe 开机卡&lt;/h3>
&lt;p>按下机箱上的开机键，会让电脑开关机，其本质就是短接下主板的 power on/off 针脚，而接入 PCIe 开机卡则是能够通过 IoT 软件中发出开关机的指令。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>接入 PCIe 开机卡，同样需要路由器提供Wi-Fi，才能接入 IoT 软件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>优缺点&lt;/p>
&lt;ul>
&lt;li>规避了物理通断电的缺点&lt;/li>
&lt;li>会占用主板上的 PCIe 槽，虽然不会抢带宽&lt;/li>
&lt;li>花费：¥40 PCIe 开机卡&lt;/li>
&lt;li>部分厂商无法接入米家&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="wake-on-lan--ssh关机">Wake On Lan + SSH关机&lt;/h3>
&lt;p>开机：网络唤醒 Wake on LAN (WoL)，设备通过局域网向目标主机的网卡发送指令，网卡就会通知所在主板开机。
关机：设备通过SSH远程登录指定主机，然后执行关机指令。&lt;/p>
&lt;p>优缺点：&lt;/p>
&lt;ul>
&lt;li>需要额外的且24h 运行的设备
&lt;ul>
&lt;li>如果能够解锁路由器的SSH，就可以用路由器充当这个设备。否则需要考虑 NAS，软路由等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>实现麻烦：
&lt;ul>
&lt;li>开启 WoL，需要调整主板，系统内的设置，SSH 远程指令，更是大坑&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>花费：¥0，现有设备，才应该考虑这个方案。&lt;/li>
&lt;/ul>
&lt;p>出于折腾和省钱的目的，笔者选择了第三种方案。&lt;/p>
&lt;h2 id="警告">警告&lt;/h2>
&lt;ol>
&lt;li>刷机，乃至于开启 &lt;code>SSH&lt;/code>都有可能失去官方保修，请谨慎操作&lt;/li>
&lt;li>小米路由器开启&lt;code>SSH&lt;/code> 对系统版本有要求，新版本固件很可能不支持开启&lt;code>SSH&lt;/code>&lt;/li>
&lt;/ol>
&lt;h2 id="前期准备">前期准备&lt;/h2>
&lt;h3 id="注册巴法云账号">注册巴法云账号&lt;/h3>
&lt;p>注册一个巴法云账户，并添加一个&lt;code>006&lt;/code>后缀的主题。&lt;/p>
&lt;blockquote>
&lt;p>可参考：&lt;a class="link" href="https://cloud.bemfa.com/docs/src/index_guild.html" target="_blank" rel="noopener"
>平台操作教程 | 巴法文档中心&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>步骤如下：&lt;/p>
&lt;ol>
&lt;li>打开 &lt;a class="link" href="https://cloud.bemfa.com/" target="_blank" rel="noopener"
>巴法物联网云平台&lt;/a>，使用邮箱或手机注册。&lt;/li>
&lt;li>点击「控制台」，拷贝自己的私钥，后续会用到。&lt;/li>
&lt;li>新建主题-命名为 &lt;code>pc006&lt;/code>，名称可以为任意英文，但必须以&lt;code>006&lt;/code>结尾，表示开关设备。&lt;/li>
&lt;/ol>
&lt;p>效果如图：
&lt;img src="https://github.com/niluan304/picx-images-hosting/raw/master/pc/bemfa_init.4jo078gpsw.webp"
loading="lazy"
alt="bemfa init"
>&lt;/p>
&lt;ul>
&lt;li>点击「昵称」，网页会弹出「修改昵称」的窗口，以供自定义。&lt;/li>
&lt;/ul>
&lt;h3 id="为受控电脑安装-ssh-服务">为受控电脑安装 SSH 服务&lt;/h3>
&lt;h4 id="windows">Windows&lt;/h4>
&lt;p>具体的安装方法请参考：&lt;a class="link" href="https://www.sysgeek.cn/openssh-windows/" target="_blank" rel="noopener"
>Windows 上的 OpenSSH：安装、配置和使用指南 - 系统极客&lt;/a>&lt;/p>
&lt;p>在开始安装 OpenSSH 之前，请确保你的电脑满足以下条件：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>操作系统&lt;/strong>：Windows 11 或 Windows 10（1809 版本或更高）。&lt;/li>
&lt;li>&lt;strong>PowerShell 版本&lt;/strong>：PowerShell 5.1 或以上。&lt;/li>
&lt;li>&lt;strong>管理员权限&lt;/strong>：安装 OpenSSH 需要拥有管理员权限。&lt;/li>
&lt;/ul>
&lt;h4 id="linux">Linux&lt;/h4>
&lt;p>Linux 电脑一般都安装 &lt;code>OpenSSH&lt;/code>，如果没有可以通过各发行版的包管理工具安装：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>Debian&lt;/code> 、&lt;code>Ubuntu&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt install ssh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>CentOs&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo yum install openssh-server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="开启受控电脑的-wake-on-lan">开启受控电脑的 Wake On Lan&lt;/h3>
&lt;h4 id="开启主板的-wol">开启主板的 WoL&lt;/h4>
&lt;p>想要使用网络唤醒（Wake-on-LAN，WoL），也需要开启主板BIOS的 WoL 功能，各厂商的主板开启方式不一致，具体方法视厂商而定，进入 BIOS 后注意选项附加的说明即可，可以参考的关键词包括：&lt;/p>
&lt;ul>
&lt;li>Automatic Power On&lt;/li>
&lt;li>Wake on LAN/WLAN&lt;/li>
&lt;li>Power Management&lt;/li>
&lt;li>Power On by Onboard LAN&lt;/li>
&lt;li>Power On by PCI-E Devices&lt;/li>
&lt;/ul>
&lt;h4 id="关闭主板的电源节能设置">关闭主板的电源节能设置&lt;/h4>
&lt;p>很多厂商的主板都有低功耗模式，为了节能，该模式下，电脑关机后，会彻底关闭网卡，会无法使用 WoL ，因此需要关闭此类模式。可以参考的关键词包括：&lt;/p>
&lt;ul>
&lt;li>ErP&lt;/li>
&lt;li>EUP&lt;/li>
&lt;/ul>
&lt;h4 id="windows-系统设置">windows 系统设置&lt;/h4>
&lt;h5 id="配置网卡">配置网卡&lt;/h5>
&lt;ol>
&lt;li>
&lt;p>在 Windows 10 中，&lt;code>运行 &amp;gt; ncpa.cpl&lt;/code> 打开「网络连接」设置，然后找到当前在使用的有线网卡，右键点击「属性」：&lt;/p>
&lt;img src="https://github.com/niluan304/picx-images-hosting/raw/master/pc/image.99tal6cv72.webp" alt="image-20240723000140265" style="zoom:50%;" />
&lt;/li>
&lt;li>
&lt;p>点击「配置」：&lt;/p>
&lt;img src="https://github.com/niluan304/picx-images-hosting/raw/master/pc/image.ic28dhbz7.webp" alt="image-20240723000220472" style="zoom:50%;" />
&lt;/li>
&lt;li>
&lt;p>切换到「电源管理」，勾选「允许此设备唤醒计算机」以及「只允许幻数据包唤醒计算机」：&lt;/p>
&lt;/li>
&lt;/ol>
&lt;img src="https://github.com/niluan304/picx-images-hosting/raw/master/pc/image.4cktrbzer5.webp" alt="image-20240722235715931" style="zoom:50%;" />
&lt;h5 id="关闭快速启动">关闭快速启动&lt;/h5>
&lt;img src="https://github.com/niluan304/picx-images-hosting/raw/master/pc/image.13lpuoc0gk.webp" alt="image-20240901234515640" style="zoom:50%;" />
&lt;ol>
&lt;li>先点击「更改当前不可用的设置」，以便能修改关机设置&lt;/li>
&lt;li>关闭「启用快速启动」（快速启动（Fast Startup），属于 S4 电源状态，不支持网络唤醒）&lt;/li>
&lt;/ol>
&lt;h2 id="部署-pc">部署 pc&lt;/h2>
&lt;p>笔者编写了一个小应用（下文称为 &lt;code>pc&lt;/code>），依赖于 WakeOnLan、巴法云和SSH协议，实现了远程开关机：&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-mermaid" data-lang="mermaid">sequenceDiagram
actor user AS 用户
participant iot AS iot(小爱同学)
participant bemfa AS 巴法云
participant power AS pc
participant pc AS 电脑
rect rgb(191, 223, 255)
Note over user,pc: 远程关机
user -&amp;gt;&amp;gt;+ iot: 语音：关电脑
iot -&amp;gt;&amp;gt; bemfa: 推送消息：&amp;#34;off&amp;#34;
bemfa -&amp;gt;&amp;gt; power: TCP(&amp;#34;off&amp;#34;)
power -&amp;gt;&amp;gt; pc: SSH(&amp;#34;关机&amp;#34;)
pc -&amp;gt;&amp;gt; pc: 关机
iot --)- user: ok（异步）
end
rect rgb(248,240,233)
Note over user,pc: 远程开机
user -&amp;gt;&amp;gt;+ iot: 语音：开电脑
iot -&amp;gt;&amp;gt; bemfa: 推送消息：&amp;#34;on&amp;#34;
bemfa -&amp;gt;&amp;gt; power: TCP(&amp;#34;on&amp;#34;)
power -&amp;gt;&amp;gt; pc: WoL &amp;amp; SSH(&amp;#34;取消关机&amp;#34;)
pc -&amp;gt;&amp;gt; pc: 开机
iot --)- user: ok（异步）
end
&lt;/code>&lt;/pre>&lt;h3 id="开启设备的-sshtelnet">开启设备的 &lt;code>SSH&lt;/code>/&lt;code>Telnet&lt;/code>&lt;/h3>
&lt;p>&lt;code>pc&lt;/code> 需要运行在局域网内不停机的机器上，如路由器、NAS。&lt;/p>
&lt;p>因此需要能登录到目标机器上，然后下载并运行&lt;code>pc&lt;/code>。最常用的远程登录协议为 &lt;code>SSH&lt;/code>，搭配 &lt;code>SCP&lt;/code> 操作文件系统也会更方便。&lt;/p>
&lt;ul>
&lt;li>某些设备&lt;strong>只能启用 &lt;code>Telnet&lt;/code> 协议&lt;/strong>，无法启用 &lt;code>SSH&lt;/code> ，操作会繁琐一些。&lt;/li>
&lt;/ul>
&lt;p>以笔者的小米路由器 AX3000T（1.0.47版本下）为例，开启&lt;code>SSH&lt;/code>的步骤：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>登录路由器后台，复制 &lt;code>stok&lt;/code>变量&lt;/p>
&lt;p>&lt;img src="https://github.com/niluan304/picx-images-hosting/raw/master/pc/image.45mhiacft.png"
loading="lazy"
alt="image-20240727194218564"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将脚本内容保存到 &lt;code>stok.bat&lt;/code> 文件中，执行后并输入复制的&lt;code>stok&lt;/code>变量，&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bat" data-lang="bat">&lt;span class="line">&lt;span class="cl">&lt;span class="p">@&lt;/span>&lt;span class="c1">REM 使用 UTF8 编码，以正确显示中文&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chcp 65001
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">@&lt;/span>&lt;span class="k">echo&lt;/span> off
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">@&lt;/span>&lt;span class="c1">REM &amp;lt;STOK&amp;gt;修改为复制的变量&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">echo&lt;/span> Input the &lt;span class="se">^&amp;lt;&lt;/span>STOK&lt;span class="se">^&amp;gt;&lt;/span> in admin page of your Xiaomi router
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">echo&lt;/span> 输入你小米路由器中后台页面中的 &lt;span class="se">^&amp;lt;&lt;/span>STOK&lt;span class="se">^&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="k">/p&lt;/span> &lt;span class="nv">STOK&lt;/span>&lt;span class="p">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">@&lt;/span>&lt;span class="c1">REM echo %STOK%&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -X POST http://192.168.31.1/cgi-bin/luci/;stok=&lt;span class="nv">%STOK%&lt;/span>/api/misystem/arn_switch -d &lt;span class="s2">&amp;#34;open=1&amp;amp;model=1&amp;amp;level=&lt;/span>&lt;span class="nv">%0&lt;/span>&lt;span class="s2">Anvram&lt;/span>&lt;span class="nv">%2&lt;/span>&lt;span class="s2">0set&lt;/span>&lt;span class="nv">%2&lt;/span>&lt;span class="s2">0ssh_en&lt;/span>&lt;span class="nv">%3&lt;/span>&lt;span class="s2">D1&lt;/span>&lt;span class="nv">%0&lt;/span>&lt;span class="s2">A&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -X POST http://192.168.31.1/cgi-bin/luci/;stok=&lt;span class="nv">%STOK%&lt;/span>/api/misystem/arn_switch -d &lt;span class="s2">&amp;#34;open=1&amp;amp;model=1&amp;amp;level=&lt;/span>&lt;span class="nv">%0&lt;/span>&lt;span class="s2">Anvram&lt;/span>&lt;span class="nv">%2&lt;/span>&lt;span class="s2">0commit&lt;/span>&lt;span class="nv">%0&lt;/span>&lt;span class="s2">A&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -X POST http://192.168.31.1/cgi-bin/luci/;stok=&lt;span class="nv">%STOK%&lt;/span>/api/misystem/arn_switch -d &lt;span class="s2">&amp;#34;open=1&amp;amp;model=1&amp;amp;level=&lt;/span>&lt;span class="nv">%0&lt;/span>&lt;span class="s2">Ased&lt;/span>&lt;span class="nv">%2&lt;/span>&lt;span class="s2">0-i&lt;/span>&lt;span class="nv">%2&lt;/span>&lt;span class="s2">0&amp;#39;s&lt;/span>&lt;span class="nv">%2&lt;/span>&lt;span class="s2">Fchannel&lt;/span>&lt;span class="nv">%3&lt;/span>&lt;span class="s2">D.*&lt;/span>&lt;span class="nv">%2&lt;/span>&lt;span class="s2">Fchannel&lt;/span>&lt;span class="nv">%3&lt;/span>&lt;span class="s2">D&lt;/span>&lt;span class="nv">%2&lt;/span>&lt;span class="s2">2debug&lt;/span>&lt;span class="nv">%2&lt;/span>&lt;span class="s2">2&lt;/span>&lt;span class="nv">%2&lt;/span>&lt;span class="s2">Fg&amp;#39;&lt;/span>&lt;span class="nv">%2&lt;/span>&lt;span class="s2">0&lt;/span>&lt;span class="nv">%2&lt;/span>&lt;span class="s2">Fetc&lt;/span>&lt;span class="nv">%2&lt;/span>&lt;span class="s2">Finit.d&lt;/span>&lt;span class="nv">%2&lt;/span>&lt;span class="s2">Fdropbear&lt;/span>&lt;span class="nv">%0&lt;/span>&lt;span class="s2">A&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -X POST http://192.168.31.1/cgi-bin/luci/;stok=&lt;span class="nv">%STOK%&lt;/span>/api/misystem/arn_switch -d &lt;span class="s2">&amp;#34;open=1&amp;amp;model=1&amp;amp;level=&lt;/span>&lt;span class="nv">%0&lt;/span>&lt;span class="s2">A&lt;/span>&lt;span class="nv">%2&lt;/span>&lt;span class="s2">Fetc&lt;/span>&lt;span class="nv">%2&lt;/span>&lt;span class="s2">Finit.d&lt;/span>&lt;span class="nv">%2&lt;/span>&lt;span class="s2">Fdropbear&lt;/span>&lt;span class="nv">%2&lt;/span>&lt;span class="s2">0start&lt;/span>&lt;span class="nv">%0&lt;/span>&lt;span class="s2">A&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">pause&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>效果大概是这样的：&lt;/p>
&lt;p>&lt;img src="https://github.com/niluan304/picx-images-hosting/raw/master/pc/image.77dhx4di50.webp"
loading="lazy"
alt="image-20240805002207392"
>&lt;/p>
&lt;ul>
&lt;li>也可以逐行复制到 cmd 执行，可参考：&lt;a class="link" href="https://mao.fan/article/102" target="_blank" rel="noopener"
>小米AX3000T解锁SSH ＆固化SSH&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="下载-pc">下载 &lt;code>pc&lt;/code>&lt;/h3>
&lt;p>根据设备的芯片架构及安装的操作系统，找到对应的压缩包：&lt;a class="link" href="https://github.com/niluan304/pc/releases/" target="_blank" rel="noopener"
>Release&lt;/a>&lt;/p>
&lt;p>如果是 Linux/OpenWrt 系统，可以在命令行输入 &lt;code>cat /etc/os-release | grep ARCH&lt;/code> 以查看设备的架构，以笔者的为例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cat /etc/os-release &lt;span class="p">|&lt;/span> grep ARCH
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">LEDE_ARCH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;aarch64_cortex-a53&amp;#34;&lt;/span> &lt;span class="c1"># cortex-a53 是 实现ARMv8-A 64位指令集的微架构，故 CPU 是 arm64架构的&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在目标设备中，将解压后的二进制文件及配置文件移动到可读写的文件夹，实现方式有两种：&lt;/p>
&lt;ul>
&lt;li>直接通过 &lt;code>curl&lt;/code> 或 &lt;code>wget&lt;/code> 命令下载压缩包后解压&lt;/li>
&lt;li>在其他设备上下载后，通过 &lt;code>scp&lt;/code> 等协议上传到设备&lt;/li>
&lt;/ul>
&lt;h3 id="修改配置文件">修改配置文件&lt;/h3>
&lt;p>&lt;code>pc&lt;/code> 使用 &lt;code>yaml&lt;/code>文件作为配置文件，使用前，使用者应当熟悉一下 &lt;code>yaml&lt;/code> 的基本语法，以修改或补全空白配置项的值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># 当前程序所在主机的局域网IP，即通过 SSH/Telnet 登录的设备，一般为路由器/NAS&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># 小米路由器的局域网IP一般为：192.168.31.1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">myIP&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># 目标主机的主板网卡MAC地址，&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># windows 机器可以在命令行中输入 `ipconfig /all` 查看，如：00-1B-44-11-3A-B7&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">targetMac&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># ssh 配置&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">ssh&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 目标主机的 IP + SSH 端口号&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># host:port 如 192.168.31.111:11022&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">addr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 用户名，目前支持私钥和密码登录&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">user&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 私钥路径，建议使用绝对地&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 通过公私钥登录，推荐使用&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c">#&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 私钥可通过其他设备上的 `ssh-keygen -t ed25519 -f ed25519` 命令生成&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 然后将 ed25519 私钥上传至运行设备上&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">identity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 使用密码登录，可选项&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 密码明文，应当在局域网环境使用&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">password&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># 日志设置&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">log&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 日志文件位置，默认为 pc.log&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">file&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/tmp/log/pc.log&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 是否打印代码位置&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">addSource&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 日志级别&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 定义见 log/slog/level.go:43&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># LevelDebug Level = -4&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># LevelInfo Level = 0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># LevelWarn Level = 4&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># LevelError Level = 8&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">level&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">bemfa&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 巴法云的 UID，即控制台的私钥&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uid&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># topic-switch&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">switch&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 主题的名称&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">topic&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">XXX006&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># Switch 只接收 on/off 两种指令，对应的操作&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 覆盖这里的指令之前，你应该在默认的 shell，Linux(sh)/Windows(cmd) 中测试一下，以确保关机指令和取消指令是正确的。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cmd /c shutdown /a&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">off&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cmd /c shutdown /s /t 600&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="调试-pc">调试 &lt;code>pc&lt;/code>&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>运行 &lt;code>pc&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Linux 机器上，赋予 `pc` 执行权限&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chmod +x pc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 指定配置文件并运行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./pc -config config.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>通过巴法云推送消息&lt;/p>
&lt;p>在巴法云控制台，如果连接正常，&lt;code>pc&lt;/code> 订阅的主题上，会显示订阅者的在线数量：
&lt;img src="https://github.com/niluan304/picx-images-hosting/raw/master/pc/topic.8ojljeijjj.webp"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>设备（Windows）处于开机状态&lt;/p>
&lt;ul>
&lt;li>推送 &lt;code>off&lt;/code>，弹窗显示，即将关机：&lt;br>
&lt;img src="https://github.com/niluan304/picx-images-hosting/raw/master/pc/switch-off.7zqbzd7e3r.webp"
loading="lazy"
>&lt;/li>
&lt;li>推送 &lt;code>on&lt;/code>，弹窗显示，关机被取消：&lt;br>
&lt;img src="https://github.com/niluan304/picx-images-hosting/raw/master/pc/switch-on.3d4oyo8ug8.webp"
loading="lazy"
>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>设备处于关机机状态&lt;/p>
&lt;ul>
&lt;li>推送 &lt;code>off&lt;/code>，设备无反应&lt;/li>
&lt;li>推送 &lt;code>on&lt;/code>，设备 &lt;strong>开机&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>后台运行 &lt;code>pc&lt;/code>
若调试后无问题，即可在设备上后台运行 &lt;code>pc&lt;/code>, 以捕获巴法云的消息推送&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">./pc -config config.yml &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>巴法云接入 iot 软件&lt;/p>
&lt;ul>
&lt;li>米家：&lt;/li>
&lt;li>&lt;img src="https://github.com/niluan304/picx-images-hosting/raw/master/pc/iot-mijia.lvmqmxpuf.webp"
loading="lazy"
>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>如何实现本地 MySQL 和 MongoDB 双写时数据一致性</title><link>https://niluan304.github.io/p/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0-mysql-%E5%92%8C-mongodb-%E5%8F%8C%E5%86%99%E6%97%B6%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7/</link><pubDate>Mon, 15 Apr 2024 09:52:02 +0800</pubDate><guid>https://niluan304.github.io/p/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0-mysql-%E5%92%8C-mongodb-%E5%8F%8C%E5%86%99%E6%97%B6%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7/</guid><description>&lt;p>这段时间面试，遇到了一道和实际生产相关的面试题：&lt;/p>
&lt;blockquote>
&lt;p>现有一系统，积分使用 &lt;code>MongoDB&lt;/code> 存储，点券存储在 &lt;code>MySQL&lt;/code>。&lt;/p>
&lt;p>用户通过日常任务获取积分，点券则可以提现。&lt;/p>
&lt;p>现推出一活动 1000 积分兑换 10 点券，怎么实现？&lt;/p>
&lt;/blockquote>
&lt;h2 id="和缓存一致性的不同">和缓存一致性的不同&lt;/h2>
&lt;p>对于这种跨数据库之间的操作，可能会误认为类似「如何实现 &lt;code>MySQL&lt;/code> 和 &lt;code>Redis&lt;/code> 的数据一致性？」，但两者之间其实很不同，&lt;code>Redis&lt;/code> 在这种场景一般用于充当远程缓存或分布式缓存数据库，其本质上是将数据从支持持久化但慢速的磁盘中，搬到断电丢失但高速的内存中。也就是说，在实现 &lt;code>MySQL&lt;/code>、&lt;code>Redis&lt;/code> 数据一致性时，我们操作的仍是同一份数据，考虑得比较多的是避免用户读取到脏数据（旧数据）。&lt;/p>
&lt;p>而题目的要求其实是：如何解决分布式数据库在双写时的数据一致性？&lt;/p>
&lt;h2 id="分布式事务">分布式事务&lt;/h2>
&lt;p>面试的时候，笔者联想到了跨行转账，跨行转账业务有三种情况：&lt;/p>
&lt;ol>
&lt;li>相同支行下的转账：同一支行内的转账（本地事务）&lt;/li>
&lt;li>不同支行下的转账：相同银行，不同支行下的转账 （分布式事务）&lt;/li>
&lt;li>跨行转账：和其他银行系统进行转账 （分布式事务）&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>假设银行以支行为最小单位，进行数据库部署&lt;/p>
&lt;/blockquote>
&lt;p>而这道题很像场景二，比如「用户A 是工行深圳支行的用户，用户B 是工行广州支行的用户，A向B转账100元」，虽然都是 A 和 B 都是工行用户，但是 A 和 B 的数据并不在同一个数据库，那么就需要两个数据库之间的进行数据交换，这时候无法通过本地数据库的事务实现 ACID，一般通过分布式事务解决的。&lt;/p>
&lt;h3 id="查询确认事务结果">查询确认事务结果&lt;/h3>
&lt;p>场景二下，可以认为在工行这个大系统，内部有由深圳支行和广州支行的这样微服务组成，而微服务之间的业务流转相对简单一些：&lt;/p>
&lt;ol>
&lt;li>深圳支行扣除用户A 的100元。&lt;/li>
&lt;li>深圳支行通知广州支行，用户A要转账 100元 给用户B。&lt;/li>
&lt;li>深圳支行定时向广州支行查询是否收到了转账，如果失败了那就回滚。&lt;/li>
&lt;/ol>
&lt;p>具体流程大概是这样：&lt;/p>
&lt;ol>
&lt;li>深圳支行的用户A 发起转账请求，开启事务&lt;/li>
&lt;li>深圳支行创建转账订单，记录用户A 的支出和转账前后点券，且状态设置为「支出中」&lt;/li>
&lt;li>深圳支行通知广州支行，用户A 向 用户B 转账，广州支行收到通知后：
&lt;ol>
&lt;li>开启事务&lt;/li>
&lt;li>创建转账订单，记录用户B 的收入和转账前后点券，且状态设置为「收入中」&lt;/li>
&lt;li>更新订单状态，并返回转账结果给深圳支行&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>深圳支行收到广州支行的回复：
&lt;ul>
&lt;li>成功：转账订单状态更新为「成功」，提交事务&lt;/li>
&lt;li>失败：转账订单状态更新为「失败」，回滚事务&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code class="language-mermaid" data-lang="mermaid">%% 时序图 [Markdown 进阶技能：用代码画时序图](https://zhuanlan.zhihu.com/p/70261692)
%% -&amp;gt;&amp;gt;实线箭头 代表主动发出消息；--&amp;gt;虚线代表响应；末尾带「X」代表异步消息，无需等待回应。
sequenceDiagram
participant 用户A
participant 深圳支行
participant 广州支行
participant 用户B
用户A -&amp;gt;&amp;gt; + 深圳支行: 向用户B 转账
深圳支行 -&amp;gt;&amp;gt; 深圳支行: 创建转账订单，状态 PAYOUT
深圳支行 -&amp;gt;&amp;gt; 深圳支行: 事务 BEGIN
深圳支行 -&amp;gt;&amp;gt; + 广州支行: A向B转账
广州支行 -&amp;gt;&amp;gt; 用户B: 执行转账操作
用户B --&amp;gt;&amp;gt; 广州支行: 转账结果
alt 转账成功
用户B --&amp;gt;&amp;gt; 广州支行: 订单状态 SUCC
else 转账失败
用户B --&amp;gt;&amp;gt; 广州支行: 订单状态 FAIL
end
广州支行 --&amp;gt;&amp;gt; - 深圳支行: 转账结果
alt 转账成功
深圳支行 --&amp;gt;&amp;gt; 深圳支行: 订单状态 SUCC
深圳支行 --&amp;gt;&amp;gt; 深圳支行: 事务 COMMIT
else 转账失败
深圳支行 --&amp;gt;&amp;gt; 深圳支行: 订单状态 FAIL
深圳支行 --&amp;gt;&amp;gt; 深圳支行: 事务 ROLLBAK
end
深圳支行 --&amp;gt;&amp;gt; - 用户A: 收到转账结果
&lt;/code>&lt;/pre>&lt;p>在上述流程是同步的，用户需要在转账界面等待转账结果，如果转账耗时过久，会影响到用户体验。可以将转账结果改成异步事件。&lt;/p>
&lt;p>在用户提交转账请求后，返回提示：「转账请求已提交，请稍后查看转账结果」，用户就可以先浏览其他页面，等待转账结果的推送。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-mermaid" data-lang="mermaid">%% 时序图 [Markdown 进阶技能：用代码画时序图](https://zhuanlan.zhihu.com/p/70261692)
%% -&amp;gt;&amp;gt;实线箭头 代表主动发出消息；--&amp;gt;虚线代表响应；末尾带「X」代表异步消息，无需等待回应。
sequenceDiagram
participant 用户A
participant 深圳支行
participant 广州支行
participant 用户B
用户A -&amp;gt;&amp;gt; + 深圳支行: 向用户B转账
深圳支行 -&amp;gt;&amp;gt; 深圳支行: 创建转账订单，状态 PAYOUT
深圳支行 --&amp;gt;&amp;gt; - 用户A: 稍后查看转账结果
深圳支行 -&amp;gt;&amp;gt; + 深圳支行: 事务 BEGIN
深圳支行 -&amp;gt;&amp;gt; 广州支行: A向B转账
广州支行 -&amp;gt;&amp;gt; 用户B: 执行转账操作
用户B --&amp;gt;&amp;gt; 广州支行: 转账结果
loop 定时查询
深圳支行 -&amp;gt;&amp;gt; 广州支行: 转账订单状态
广州支行 --&amp;gt;&amp;gt; 深圳支行: 转账订单结果
end
alt 转账成功
深圳支行 --&amp;gt;&amp;gt; 深圳支行: 订单状态 SUCC
深圳支行 --&amp;gt;&amp;gt; 深圳支行: 事务 COMMIT
else 转账失败
深圳支行 --&amp;gt;&amp;gt; 深圳支行: 订单状态 FAIL
深圳支行 --&amp;gt;&amp;gt; - 深圳支行: 事务 ROLLBACK
end
深圳支行 -&amp;gt;&amp;gt; 用户A: 转账结果
&lt;/code>&lt;/pre>&lt;h3 id="二阶段提交协议">二阶段提交协议&lt;/h3>
&lt;p>2PC 与 MySQL单机中的 2PL 有相似点，都有两个阶段，但适用的目标是不一样的，不能混淆。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>二阶段加锁协议（Two-Phase Locking, 2PL）：一种用于管理数据库事务并发控制的协议，主要目的是防止多个事务同时修改同一数据项，以避免数据不一致的问题，实现可序列化的隔离等级。&lt;/li>
&lt;li>二阶段提交协议（Two-Phase Commit, 2PC） ：一种用于实现分布式系统中的原子性操作的协议，确保所有的事务参与者要么全部提交，要么全部回滚，从而保证分布式事务的完整性。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>2PC 的基本流程如下：
&lt;img src="https://vonng.github.io/ddia/img/fig9-9.png"
loading="lazy"
>&lt;/p>
&lt;p>2PC的相关内容，见设计密集型应用（Designing Data-Intensive Applications, DDIA）「&lt;a class="link" href="https://vonng.github.io/ddia/#/ch9?id=%e5%8e%9f%e5%ad%90%e6%8f%90%e4%ba%a4%e4%b8%8e%e4%b8%a4%e9%98%b6%e6%ae%b5%e6%8f%90%e4%ba%a4" target="_blank" rel="noopener"
>第九章：一致性与共识&lt;/a>」，笔者就不赘述了。&lt;/p>
&lt;h2 id="依赖关系mysql-为主">依赖关系：MySQL 为主&lt;/h2>
&lt;p>面试官表示分布式事务是更通用的解决方法，如果用到 &lt;code>MySQL&lt;/code> 和 &lt;code>MongoDB&lt;/code> 都是本地数据库这个条件，这题可以有更好的处理方法。面试结束后，伟大的互联网告诉笔者确实如此。&lt;/p>
&lt;p>&lt;code>MySQL&lt;/code> 存储点券，&lt;code>MongoDB&lt;/code> 存储积分，很明显点券是核心数据，那么需要以 &lt;code>MySQL&lt;/code> 为主，所以&lt;code>MySQL&lt;/code> 中应该有一个字段 &lt;code>mongo_id&lt;/code> 用于关联 &lt;code>MongoDB&lt;/code> 的主键 &lt;code>_id&lt;/code>，而查询 &lt;code>MongoDB&lt;/code> 存储的积分，只能通过 &lt;code>MySQL&lt;/code> 里 &lt;code>mongo_id&lt;/code> 字段。&lt;/p>
&lt;p>假设 &lt;code>MySQL&lt;/code> 表结构如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">wallet&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">user_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">INT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">COMMENT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;userId&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">DECIMAL&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">COMMENT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;点券&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">mongo_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">COMMENT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;MongoDB 主键id&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>MongoDB&lt;/code> 文档结构如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;661bcb98cd3500008c007b5c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;score&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">200&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>主要思想是借鉴预写日志（Write Ahead Log, WAL），实现 &lt;code>MySQL&lt;/code> 与 &lt;code>MongoDB&lt;/code> 的双写一致性：&lt;/p>
&lt;ol>
&lt;li>开启 &lt;code>MySQL&lt;/code> 事务，避免并发问题&lt;/li>
&lt;li>先在 &lt;code>MongoDB&lt;/code> 插入修改后的数据，而不是去更新 &lt;code>MongoDB&lt;/code>&lt;/li>
&lt;li>再更新 &lt;code>MySQL&lt;/code> 的 &lt;code>mongo_id&lt;/code>。&lt;/li>
&lt;/ol>
&lt;p>具体流程如下：&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-mermaid" data-lang="mermaid">%% 时序图 [Markdown 进阶技能：用代码画时序图](https://zhuanlan.zhihu.com/p/70261692)
%% -&amp;gt;&amp;gt;实线箭头 代表主动发出消息；--&amp;gt;虚线代表响应；末尾带「X」代表异步消息，无需等待回应。
sequenceDiagram
participant 用户
participant 系统
participant MySQL
participant MongoDB
用户 -&amp;gt;&amp;gt; + 系统: 积分兑换点券
系统 -&amp;gt;&amp;gt; MySQL: 事务 BEGIN
系统 -&amp;gt;&amp;gt; MySQL: 查询 user_id
MySQL --&amp;gt;&amp;gt; 系统: 返回 blance, mongo_id
系统 -&amp;gt;&amp;gt; MongoDB: 查询 mongo_id
MongoDB --&amp;gt;&amp;gt; 系统: 返回 document
系统 -&amp;gt;&amp;gt; 系统: document.score -= 100
系统 -&amp;gt;&amp;gt; MongoDB: 插入修改后的 document
MongoDB --&amp;gt;&amp;gt; 系统: 返回 mongo_id
系统 -&amp;gt;&amp;gt; MySQL: 更新 blance, mongo_id
MySQL --&amp;gt;&amp;gt; 系统: 更新成功
MySQL --&amp;gt;&amp;gt; 系统: 事务 COMMIT
系统 --&amp;gt;&amp;gt; - 用户: 兑换完成
&lt;/code>&lt;/pre>&lt;p>在这个流程中，无论什么时候写入出错，都不会影响到数据的一致性。&lt;/p>
&lt;ol>
&lt;li>如果在 &lt;code>MongoDB&lt;/code> 插入新数据时出错，&lt;code>MySQL&lt;/code> 中保存的仍为老数据。&lt;/li>
&lt;li>如果在 &lt;code>MySQL&lt;/code> 更新时出错，&lt;code>MySQL&lt;/code> 中保存的仍为老数据。&lt;/li>
&lt;/ol>
&lt;p>不过这种方案会带来一个问题，&lt;code>MongoDB&lt;/code> 会新增一条无效的垃圾数据，解决方法有两种：&lt;/p>
&lt;ol>
&lt;li>异步删除。通过带有重试机制的消息队列，直到垃圾数据被删除。&lt;/li>
&lt;li>定时器删除。通过定时器，查询出近段时间垃圾数据，并做删除。&lt;/li>
&lt;/ol>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://zq99299.github.io/note-book/back-end-storage/01/05.html#%e5%88%b0%e5%ba%95%e4%bb%80%e4%b9%88%e6%98%af%e5%88%86%e5%b8%83%e5%bc%8f%e4%ba%8b%e5%8a%a1" target="_blank" rel="noopener"
>分布式事务：如何保证多个系统间的数据是一致的？&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://juejin.cn/post/7173629924111532045" target="_blank" rel="noopener"
>如何保证mongodb和数据库双写数据一致性？&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.diguage.com/post/overview-of-distributed-transaction/" target="_blank" rel="noopener"
>分布式事务概述&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.fanyilun.me/2021/03/06/%e4%b8%80%e8%87%b4%e6%80%a7%e9%97%ae%e9%a2%98%e4%b8%8e%e5%88%86%e5%b8%83%e5%bc%8f%e4%ba%8b%e5%8a%a1/" target="_blank" rel="noopener"
>一致性问题与分布式事务&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.cnblogs.com/jackion5/p/11364935.html" target="_blank" rel="noopener"
>以银行转账为例分析分布式事务的解决方案&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>为 git clone github 设置 HTTP 和 SSH 代理</title><link>https://niluan304.github.io/p/%E4%B8%BA-git-clone-github-%E8%AE%BE%E7%BD%AE-http-%E5%92%8C-ssh-%E4%BB%A3%E7%90%86/</link><pubDate>Tue, 14 Mar 2023 18:08:02 +0800</pubDate><guid>https://niluan304.github.io/p/%E4%B8%BA-git-clone-github-%E8%AE%BE%E7%BD%AE-http-%E5%92%8C-ssh-%E4%BB%A3%E7%90%86/</guid><description>&lt;p>在国内执行 &lt;code>git clone https://github.com/golang/go.git&lt;/code> 操作，又慢又不稳定，搜索后发现可以使用代理这个问题。&lt;/p>
&lt;h2 id="准备工作">准备工作&lt;/h2>
&lt;p>首先，你需要准备好代理工具，一般的代理工具都有 &lt;code>Sock5&lt;/code> 和 &lt;code>HTTP&lt;/code> 两种代理方式。&lt;/p>
&lt;p>常见的代理软件使用的端口有：&lt;code>7890&lt;/code>, &lt;code>1080&lt;/code>，下文的 &lt;code>{port}&lt;/code> 参数都需要修改为对应的端口号。&lt;/p>
&lt;p>笔者会按照 &lt;code>Windows&lt;/code> 和 类 &lt;code>Unix&lt;/code> 系统介绍为 &lt;code>git&lt;/code> 设置代理的方法，由于相似处很多，请按需查看。&lt;/p>
&lt;h2 id="windows-下">&lt;code>Windows&lt;/code> 下&lt;/h2>
&lt;h3 id="为-http-协议设置代理">为 &lt;code>HTTP&lt;/code> 协议设置代理&lt;/h3>
&lt;p>在 GitHub上，通过第一种方式克隆仓库，这里走的就是 &lt;code>HTTP&lt;/code> 协议，修改起来也很简单：&lt;/p>
&lt;h4 id="命令行设置">命令行设置&lt;/h4>
&lt;ol>
&lt;li>通过代理软件 &lt;code>HTTP&lt;/code> 的端口
在终端中执行以下命令：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># {port} 修改为代理软件的端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global https.https://github.com.proxy https://127.0.0.1:&lt;span class="o">{&lt;/span>port&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>通过代理软件 &lt;code>Sock5&lt;/code> 的端口
在终端中执行以下命令：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># {port} 修改为代理软件的端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global https.https://github.com.proxy socks5://127.0.0.1:&lt;span class="o">{&lt;/span>port&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以发现，两者的命令极其相似，格式都为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git config --global https.https://github.com.proxy &lt;span class="o">{&lt;/span>protocol&lt;span class="o">}&lt;/span>://&lt;span class="o">{&lt;/span>ip&lt;span class="o">}&lt;/span>:&lt;span class="o">{&lt;/span>port&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>所以，凭个人喜好使用就好。&lt;/p>
&lt;p>另外，如果代理软件并不在本地运行，那么就将 &lt;code>127.0.0.1&lt;/code> 修改为代理软件服务器的 &lt;code>ip&lt;/code>（需要有访问权限）。&lt;/p>
&lt;h4 id="修改-gitconfig-文件">修改 &lt;code>.gitconfig&lt;/code> 文件&lt;/h4>
&lt;p>如果不喜欢在命令行中操作，也可以直接修改 &lt;code>C:/Users/${your username}/.gitconfig&lt;/code> 文件，在文件末尾添加以下内容：&lt;/p>
&lt;ol>
&lt;li>通过代理软件 &lt;code>HTTP&lt;/code> 的端口&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>https &lt;span class="s2">&amp;#34;https://github.com&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># {port} 修改为代理软件的端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">proxy&lt;/span> &lt;span class="o">=&lt;/span> https://127.0.0.1:&lt;span class="o">{&lt;/span>port&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>通过代理软件 &lt;code>Sock5&lt;/code> 的端口&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>http &lt;span class="s2">&amp;#34;https://github.com&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># {port} 修改为代理软件的端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">proxy&lt;/span> &lt;span class="o">=&lt;/span> socks5://127.0.0.1:&lt;span class="o">{&lt;/span>port&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="取消代理">取消代理&lt;/h4>
&lt;p>通过命令行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git config --global --unset https.https://github.com.proxy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以修改 &lt;code>C:/Users/${your username}/.gitconfig&lt;/code> 文件，删除或注释 &lt;code>[https &amp;quot;https://github.com&amp;quot;]&lt;/code> 区域的内容。&lt;/p>
&lt;h3 id="为-ssh-协议设置代理">为 &lt;code>SSH&lt;/code> 协议设置代理&lt;/h3>
&lt;p>在 GitHub上，通过第二种方式克隆仓库，走的就是 &lt;code>SSH&lt;/code> 协议：&lt;/p>
&lt;h4 id="修改-sshconfig-文件">修改 &lt;code>.ssh/config&lt;/code> 文件&lt;/h4>
&lt;p>找到 &lt;code>~/.ssh&lt;/code> 目录下的 &lt;code>config&lt;/code> 文件（如果没有找到这个文件，那么新建即可）。&lt;/p>
&lt;ol>
&lt;li>通过代理软件 &lt;code>HTTP&lt;/code> 的端口
&lt;code>config&lt;/code> 文件末尾添加以下内容：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Host github.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Hostname ssh.github.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># git 在 window 下使用的代理软件为 connect&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># -H为HTTP协议， -S指Socks 5协议&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># {port} 修改为代理软件的端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ProxyCommand connect -H 127.0.0.1:&lt;span class="o">{&lt;/span>port&lt;span class="o">}&lt;/span> %h %p
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 服务对应端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Port &lt;span class="m">443&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>通过代理软件 &lt;code>Sock5&lt;/code> 的端口
&lt;code>config&lt;/code> 文件末尾添加以下内容：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Host github.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Hostname ssh.github.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># git 在 window 下使用的代理软件为 connect&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># -H为HTTP协议， -S指Socks 5协议&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># {port} 修改为代理软件的端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ProxyCommand connect -S 127.0.0.1:&lt;span class="o">{&lt;/span>port&lt;span class="o">}&lt;/span> %h %p
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 服务对应端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Port &lt;span class="m">443&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="验证">验证&lt;/h4>
&lt;p>先打开 &lt;code>git bash&lt;/code> ，然后执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ssh -T git@github.com&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果类似：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -T git@github.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Hi niluan304! You&lt;span class="err">&amp;#39;&lt;/span>ve successfully authenticated, but GitHub does not provide shell access.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="类-unix-系统">类 &lt;code>Unix&lt;/code> 系统&lt;/h2>
&lt;h3 id="为-http-协议设置代理-1">为 &lt;code>HTTP&lt;/code> 协议设置代理&lt;/h3>
&lt;p>在 GitHub上，通过第一种方式克隆仓库，这里走的就是 &lt;code>HTTP&lt;/code> 协议，修改起来也很简单：&lt;/p>
&lt;h4 id="命令行设置-1">命令行设置&lt;/h4>
&lt;ol>
&lt;li>通过代理软件 &lt;code>HTTP&lt;/code> 的端口
在终端中执行以下命令：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># {port} 修改为代理软件的端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global https.https://github.com.proxy https://127.0.0.1:&lt;span class="o">{&lt;/span>port&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>通过代理软件 &lt;code>Sock5&lt;/code> 的端口
在终端中执行以下命令：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># {port} 修改为代理软件的端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global https.https://github.com.proxy socks5://127.0.0.1:&lt;span class="o">{&lt;/span>port&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以发现，两者的命令极其相似，格式都为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git config --global https.https://github.com.proxy &lt;span class="o">{&lt;/span>protocol&lt;span class="o">}&lt;/span>://&lt;span class="o">{&lt;/span>ip&lt;span class="o">}&lt;/span>:&lt;span class="o">{&lt;/span>port&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>所以，凭个人喜好使用就好。&lt;/p>
&lt;p>另外，如果代理软件并不在本地运行，那么就将 &lt;code>127.0.0.1&lt;/code> 修改为代理软件服务器的 &lt;code>ip&lt;/code>（需要有访问权限）。&lt;/p>
&lt;h4 id="修改-gitconfig-文件-1">修改 &lt;code>.gitconfig&lt;/code> 文件&lt;/h4>
&lt;p>如果不喜欢在命令行中操作，也可以直接修改 &lt;code>~/.gitconfig&lt;/code> 文件，在文件末尾添加以下内容：&lt;/p>
&lt;ol>
&lt;li>通过代理软件 &lt;code>HTTP&lt;/code> 的端口&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>https &lt;span class="s2">&amp;#34;https://github.com&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># {port} 修改为代理软件的端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">proxy&lt;/span> &lt;span class="o">=&lt;/span> https://127.0.0.1:&lt;span class="o">{&lt;/span>port&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>通过代理软件 &lt;code>Sock5&lt;/code> 的端口&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>http &lt;span class="s2">&amp;#34;https://github.com&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># {port} 修改为代理软件的端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">proxy&lt;/span> &lt;span class="o">=&lt;/span> socks5://127.0.0.1:&lt;span class="o">{&lt;/span>port&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="取消代理-1">取消代理&lt;/h4>
&lt;p>通过命令行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git config --global --unset https.https://github.com.proxy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以修改 &lt;code>~/.gitconfig&lt;/code> 文件，删除或注释 &lt;code>[https &amp;quot;https://github.com&amp;quot;]&lt;/code> 区域的内容。&lt;/p>
&lt;h3 id="为-ssh-协议设置代理-1">为 &lt;code>SSH&lt;/code> 协议设置代理&lt;/h3>
&lt;p>在 GitHub上，通过第二种方式克隆仓库，走的就是 &lt;code>SSH&lt;/code> 协议：&lt;/p>
&lt;h4 id="修改-sshconfig-文件-1">修改 &lt;code>.ssh/config&lt;/code> 文件&lt;/h4>
&lt;p>找到 &lt;code>~/.ssh&lt;/code> 目录下的 &lt;code>config&lt;/code> 文件（如果没有找到这个文件，那么新建即可）。&lt;/p>
&lt;ol>
&lt;li>通过代理软件 &lt;code>HTTP&lt;/code> 的端口
&lt;code>config&lt;/code> 文件末尾添加以下内容：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Host github.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Hostname ssh.github.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># git 在 Linux 和 Mac 下使用的代理软件为 netcat，简称nc。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># -X 5 指代理协议Socks 5， -X 4 指代理协议Socks 4， -X connect指代理协议Socks HTTP&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ProxyCommand nc -v -X 127.0.0.1:xxxx %h %p
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 服务对应端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Port &lt;span class="m">443&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>通过代理软件 &lt;code>Sock5&lt;/code> 的端口
&lt;code>config&lt;/code> 文件末尾添加以下内容：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Host github.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Hostname ssh.github.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># git 在 Linux 和 Mac 下使用的代理软件为 netcat，简称nc。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># -X 5 指代理协议Socks 5， -X 4 指代理协议Socks 4， -X connect指代理协议Socks HTTP&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ProxyCommand nc -v -X &lt;span class="m">5&lt;/span> 127.0.0.1:xxxx %h %p
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 服务对应端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Port &lt;span class="m">443&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="验证-1">验证&lt;/h4>
&lt;p>先打开 &lt;code>git bash&lt;/code> ，然后执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ssh -T git@github.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果类似：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -T git@github.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Hi niluan304! You&lt;span class="err">&amp;#39;&lt;/span>ve successfully authenticated, but GitHub does not provide shell access.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果遇到错误，可以删除 &lt;code>.ssh&lt;/code> 目录中 &lt;code>known_hosts&lt;/code> 文件后重试。&lt;/p></description></item><item><title>sort.Slice 不适合部分排序</title><link>https://niluan304.github.io/p/sort.slice-%E4%B8%8D%E9%80%82%E5%90%88%E9%83%A8%E5%88%86%E6%8E%92%E5%BA%8F/</link><pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate><guid>https://niluan304.github.io/p/sort.slice-%E4%B8%8D%E9%80%82%E5%90%88%E9%83%A8%E5%88%86%E6%8E%92%E5%BA%8F/</guid><description>&lt;img src="https://niluan304.github.io/p/sort.slice-%E4%B8%8D%E9%80%82%E5%90%88%E9%83%A8%E5%88%86%E6%8E%92%E5%BA%8F/Feng_2024-03-12_10-13-25.png" alt="Featured image of post sort.Slice 不适合部分排序" />&lt;p>使用 &lt;code>slices.Sort&lt;/code> 和 &lt;code>slices.SortFunc&lt;/code> 避免 &lt;code>sort.Slices&lt;/code> 的坑&lt;/p>
&lt;h2 id="sortslices-介绍">sort.Slices 介绍&lt;/h2>
&lt;p>&lt;code>sort.Slices&lt;/code> 是go 于1.18 版本新增的排序函数，签名如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">Slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="nx">any&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">less&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用起来非常简单：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">type&lt;/span> &lt;span class="nx">Student&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Name&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Age&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">students&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">Student&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Gopher&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Age&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">14&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Carol&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Age&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Alice&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Age&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Age&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Dave&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Age&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// sort by Age first, Name second
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">sort&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">students&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">students&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">students&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Age&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Age&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Age&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Age&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">student&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">students&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d %s\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">student&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Age&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">student&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Output:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 10 Alice
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 10 Carol
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 12 Dave
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 14 Gopher
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 15 Bob
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="闭包的坑">闭包的坑&lt;/h2>
&lt;p>上面的代码中，甚至进行了多字段排序。但如果我们只需要部分排序，代码又该怎么写呢？&lt;/p>
&lt;p>这样对吗？&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">SortAfter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">p&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 从p开始排序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">sort&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">:],&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>咋一看没什么问题，跑下测试用例吧：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">nums&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">tests&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">p&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">want&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">want&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">}},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">want&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">}},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">want&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">}},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tt&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">tests&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">got&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">slices&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Clone&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 拷贝原始数据，用于测试
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">SortAfter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">got&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">DeepEqual&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">got&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">want&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;when p: %v ,want: %v, but got: %v\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">want&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">got&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Output:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// when p: 1 ,want: [2 1 3 4 5 6 7], but got: [2 3 5 6 7 4 1]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// when p: 3 ,want: [2 3 1 4 5 6 7], but got: [2 3 1 5 6 4 7]
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为什么 p = 1,3 时不对，p = 2 时又是对的呢？
因为 sort.Slices 接收到的参数是 &lt;code>nums[p:]&lt;/code>，&lt;code>less&lt;/code> 闭包里的参数 &lt;code>i, j&lt;/code> 是在 &lt;code>nums[p:]&lt;/code> 的位置，如果直接比较 &lt;code>nums[i]&lt;/code> 和&lt;code>nums[j]&lt;/code>，那就忽略了 &lt;code>p&lt;/code> 偏移的影响，所以实际要比较的元素其实是 &lt;code>nums[i+p]&lt;/code> 和 &lt;code>nums[j+p]&lt;/code>，那么修复后的函数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">SortAfter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">p&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 从p开始排序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">sort&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">:],&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 这里传入的slice不再是完整的nums，而是nums[p:]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用-slicessort-优化">使用 slices.Sort 优化&lt;/h2>
&lt;p>手动修正偏移量，可以避免部分排序这个坑一时，但日后依旧有可能因为思维惯性而导致再次踩坑。具体实现也很别扭，也不方便修改。&lt;/p>
&lt;p>好在 go 在 1.21 版本新增了了 &lt;code>slices&lt;/code> 这个泛型库，里面包含了很多切片的通用操作，其中的 &lt;code>slices.Sort&lt;/code> 和 &lt;code>slices.SortFunc&lt;/code> 函数就可以避免上面的坑。&lt;/p>
&lt;p>这两个函数的签名：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nx">Sort&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">S&lt;/span> &lt;span class="err">~&lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="nx">E&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">E&lt;/span> &lt;span class="nx">cmp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Ordered&lt;/span>&lt;span class="p">](&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="nx">S&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nx">SortFunc&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">S&lt;/span> &lt;span class="err">~&lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="nx">E&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">E&lt;/span> &lt;span class="nx">any&lt;/span>&lt;span class="p">](&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="nx">S&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">cmp&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="nx">E&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用方法也很简单，直接传入要排序的部分，如果调用 &lt;code>slices.Sort&lt;/code>，还可以省去用手写 &lt;code>less&lt;/code> 闭包函数。
最重要的是，按照直觉使用这两个函数就可以避免 &lt;code>sort.Slices&lt;/code> 在部分排序时的坑：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">nums&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">tests&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">p&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">want&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">want&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">}},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">want&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">}},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">want&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">}},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">want&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">}},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tt&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">tests&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">got&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">slices&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Clone&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 拷贝原始数据，用于测试
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">slices&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">got&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">tt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">:])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">DeepEqual&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">got&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">want&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;when p: %v ,want: %v, but got: %v\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">want&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">got&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而使用 &lt;code>sort.SortFunc&lt;/code>，搭配 go 1.22 新增的泛型函数 &lt;code>cmp.Or&lt;/code>，可以更轻松的实现多字段排序，这段代码来自 &lt;a class="link" href="https://github.com/golang/go/blob/78755f6b8c5f18b0014e9dcac383898047ff14fe/src/cmp/cmp_test.go#L144-L177" target="_blank" rel="noopener"
>go1.22 标准库 &lt;code>cmp/cmp_test.go&lt;/code>&lt;/a>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">type&lt;/span> &lt;span class="nx">Order&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Product&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Customer&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Price&lt;/span> &lt;span class="kt">float64&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">orders&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">Order&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;alice&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.00&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;bar&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.00&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;baz&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;carol&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">4.00&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;alice&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">2.00&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;bar&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;carol&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.00&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">4.00&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Sort by customer first, product second, and last by higher price
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">slices&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SortFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">orders&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="nx">Order&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">cmp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Or&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">cmp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Compare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Customer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Customer&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">cmp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Compare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Product&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Product&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">cmp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Compare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Price&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Price&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">order&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">orders&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s %s %.2f\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">order&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Product&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">order&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Customer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">order&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Price&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Output:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// foo alice 2.00
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// foo alice 1.00
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// bar bob 3.00
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// foo bob 4.00
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// bar carol 1.00
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// baz carol 4.00
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 &lt;a class="link" href="https://github.com/golang/go/blob/78755f6b8c5f18b0014e9dcac383898047ff14fe/src/cmp/cmp.go#L61-L71" target="_blank" rel="noopener"
>&lt;code>cmp.Or&lt;/code> 的源码&lt;/a> 非常简单，只是用于找出切片中第一个非零的元素：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Or returns the first of its arguments that is not equal to the zero value.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// If no argument is non-zero, it returns the zero value.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nx">Or&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span> &lt;span class="nx">comparable&lt;/span>&lt;span class="p">](&lt;/span>&lt;span class="nx">vals&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">T&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">zero&lt;/span> &lt;span class="nx">T&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">val&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">vals&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">val&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nx">zero&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">val&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">zero&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，这样写 &lt;code>less&lt;/code> 函数，比手写多个 &lt;code>if&lt;/code> 优雅太多了。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.jianshu.com/p/b634b629db03" target="_blank" rel="noopener"
>golang sort.Slice踩坑记录 - 简书&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Wsl 使用笔记</title><link>https://niluan304.github.io/p/wsl-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</link><pubDate>Fri, 10 Feb 2023 10:28:36 +0800</pubDate><guid>https://niluan304.github.io/p/wsl-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</guid><description>&lt;h2 id="wsl-常用命令">&lt;code>wsl&lt;/code> 常用命令&lt;/h2>
&lt;h3 id="重启-wsl">重启 &lt;code>wsl&lt;/code>&lt;/h3>
&lt;p>尝试重启 &lt;code>wsl&lt;/code>，使用命令 &lt;code>wsl --shuntdown&lt;/code> 或其他命令，终端被挂起，无反应。&lt;/p>
&lt;p>解决办法：&lt;code>kill LxssManager&lt;/code>&lt;/p>
&lt;ol>
&lt;li>找到 &lt;code>svchost.exe&lt;/code> 进程的 &lt;code>pid&lt;/code>, 然后在「任务管理器/详细信息」里结束这个进程&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cmd" data-lang="cmd">&lt;span class="line">&lt;span class="cl">&lt;span class="k">echo&lt;/span> 寻找 `pid` 的指令：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tasklist /svc /fi &lt;span class="s2">&amp;#34;imagename eq svchost.exe&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> findstr LxssManager
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>&lt;code>PowerShell7&lt;/code> 里 &lt;code>kill LxssManager&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cmd" data-lang="cmd">&lt;span class="line">&lt;span class="cl">&lt;span class="k">echo&lt;/span> 在 `PowerShell7` 里运行（可能需要管理员启动）：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Stop-Process -Id $(Get-CimInstance -ClassName Win32_Service -Filter &lt;span class="s2">&amp;#34;Name=&amp;#39;LxssManager&amp;#39;&amp;#34;&lt;/span>).ProcessId -Force
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装-docker">安装 &lt;code>docker&lt;/code>&lt;/h2>
&lt;p>最简单的办法，大概是安装 &lt;code>Docker Desktop&lt;/code>，笔者使用了一段时间，似乎有兼容性问题（可能和笔者同时使用 Hyper-V 安卓模拟器有关系），于是又更换为 &lt;code>Linux&lt;/code> 版本的 &lt;code>docker&lt;/code>。&lt;/p>
&lt;p>直接运行官方的脚本，即可完成安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">curl -fsSL https://get.docker.com -o get-docker.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo sh get-docker.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo service docker start
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是笔者的机器安装过 &lt;code>Docker Desktop&lt;/code>，运行 &lt;code>service docker start&lt;/code> 后显示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>经过排查，发现还需要清理 &lt;code>Docker Desktop&lt;/code> 相关的配置。安装过 &lt;code>Docker Desktop&lt;/code>，所以 &lt;code>docker&lt;/code> 的配置文件 &lt;code>/root/.docker/config.json&lt;/code> 含有这个配置项：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;credsStore&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;desktop.exe&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>docker&lt;/code> 会因为配置了 &lt;code>&amp;quot;credsStore&amp;quot;&lt;/code> 字段去运行 &lt;code>&amp;quot;desktop.exe&amp;quot;&lt;/code>，而这个程序就是 &lt;code>Docker Desktpo&lt;/code>，才导致 &lt;code>docker&lt;/code> 无法启动。&lt;/p>
&lt;p>解决办法：&lt;/p>
&lt;ul>
&lt;li>删除 &lt;code>docker&lt;/code> 配置文件里的 &lt;code>&amp;quot;credsStore&amp;quot; &lt;/code> 字段。&lt;/li>
&lt;li>如果里面的配置不重要，也可以直接删除这个文件：&lt;code>rm /root/.docker/config.json&lt;/code>。&lt;/li>
&lt;/ul></description></item></channel></rss>