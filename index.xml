<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>雾封的笔</title><link>https://niluan304.github.io/</link><description>Recent content on 雾封的笔</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>雾封</copyright><lastBuildDate>Mon, 15 Apr 2024 09:52:02 +0800</lastBuildDate><atom:link href="https://niluan304.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>如何实现本地 MySQL 和 MongoDB 双写时数据一致性</title><link>https://niluan304.github.io/p/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0-mysql-%E5%92%8C-mongodb-%E5%8F%8C%E5%86%99%E6%97%B6%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7/</link><pubDate>Mon, 15 Apr 2024 09:52:02 +0800</pubDate><guid>https://niluan304.github.io/p/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0-mysql-%E5%92%8C-mongodb-%E5%8F%8C%E5%86%99%E6%97%B6%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7/</guid><description>&lt;p>这段时间面试，遇到了一道和实际生产相关的面试题：&lt;/p>
&lt;blockquote>
&lt;p>现有一系统，积分使用 &lt;code>MongoDB&lt;/code> 存储，点券存储在 &lt;code>MySQL&lt;/code>。&lt;/p>
&lt;p>用户通过日常任务获取积分，点券则可以提现。&lt;/p>
&lt;p>现推出一活动 1000 积分兑换 10 点券，怎么实现？&lt;/p>
&lt;/blockquote>
&lt;h2 id="和缓存一致性的不同">和缓存一致性的不同&lt;/h2>
&lt;p>对于这种跨数据库之间的操作，可能会误认为类似「如何实现 &lt;code>MySQL&lt;/code> 和 &lt;code>Redis&lt;/code> 的数据一致性？」，但两者之间其实很不同，&lt;code>Redis&lt;/code> 在这种场景一般用于充当远程缓存或分布式缓存数据库，其本质上是将数据从支持持久化但慢速的磁盘中，搬到断电丢失但高速的内存中。也就是说，在实现 &lt;code>MySQL&lt;/code>、&lt;code>Redis&lt;/code> 数据一致性时，我们操作的仍是同一份数据，考虑得比较多的是避免用户读取到脏数据（旧数据）。&lt;/p>
&lt;p>而题目的要求其实是：如何解决分布式数据库在双写时的数据一致性？&lt;/p>
&lt;h2 id="分布式事务">分布式事务&lt;/h2>
&lt;p>面试的时候，笔者联想到了跨行转账，跨行转账业务有三种情况：&lt;/p>
&lt;ol>
&lt;li>相同支行下的转账：同一支行内的转账（本地事务）&lt;/li>
&lt;li>不同支行下的转账：相同银行，不同支行下的转账 （分布式事务）&lt;/li>
&lt;li>跨行转账：和其他银行系统进行转账 （分布式事务）&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>假设银行以支行为最小单位，进行数据库部署&lt;/p>
&lt;/blockquote>
&lt;p>而这道题很像场景二，比如「用户A 是工行深圳支行的用户，用户B 是工行广州支行的用户，A向B转账100元」，虽然都是 A 和 B 都是工行用户，但是 A 和 B 的数据并不在同一个数据库，那么就需要两个数据库之间的进行数据交换，这时候无法通过本地数据库的事务实现 ACID，一般通过分布式事务解决的。&lt;/p>
&lt;h3 id="查询确认事务结果">查询确认事务结果&lt;/h3>
&lt;p>场景二下，可以认为在工行这个大系统，内部有由深圳支行和广州支行的这样微服务组成，而微服务之间的业务流转相对简单一些：&lt;/p>
&lt;ol>
&lt;li>深圳支行扣除用户A 的100元。&lt;/li>
&lt;li>深圳支行通知广州支行，用户A要转账 100元 给用户B。&lt;/li>
&lt;li>深圳支行定时向广州支行查询是否收到了转账，如果失败了那就回滚。&lt;/li>
&lt;/ol>
&lt;p>具体流程大概是这样：&lt;/p>
&lt;ol>
&lt;li>深圳支行的用户A 发起转账请求，开启事务&lt;/li>
&lt;li>深圳支行创建转账订单，记录用户A 的支出和转账前后点券，且状态设置为「支出中」&lt;/li>
&lt;li>深圳支行通知广州支行，用户A 向 用户B 转账，广州支行收到通知后：
&lt;ol>
&lt;li>开启事务&lt;/li>
&lt;li>创建转账订单，记录用户B 的收入和转账前后点券，且状态设置为「收入中」&lt;/li>
&lt;li>更新订单状态，并返回转账结果给深圳支行&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>深圳支行收到广州支行的回复：
&lt;ul>
&lt;li>成功：转账订单状态更新为「成功」，提交事务&lt;/li>
&lt;li>失败：转账订单状态更新为「失败」，回滚事务&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code class="language-mermaid" data-lang="mermaid">%% 时序图 [Markdown 进阶技能：用代码画时序图](https://zhuanlan.zhihu.com/p/70261692)
%% -&amp;gt;&amp;gt;实线箭头 代表主动发出消息；--&amp;gt;虚线代表响应；末尾带「X」代表异步消息，无需等待回应。
sequenceDiagram
participant 用户A
participant 深圳支行
participant 广州支行
participant 用户B
用户A -&amp;gt;&amp;gt; + 深圳支行: 向用户B 转账
深圳支行 -&amp;gt;&amp;gt; 深圳支行: 创建转账订单，状态 PAYOUT
深圳支行 -&amp;gt;&amp;gt; 深圳支行: 事务 BEGIN
深圳支行 -&amp;gt;&amp;gt; + 广州支行: A向B转账
广州支行 -&amp;gt;&amp;gt; 用户B: 执行转账操作
用户B --&amp;gt;&amp;gt; 广州支行: 转账结果
alt 转账成功
用户B --&amp;gt;&amp;gt; 广州支行: 订单状态 SUCC
else 转账失败
用户B --&amp;gt;&amp;gt; 广州支行: 订单状态 FAIL
end
广州支行 --&amp;gt;&amp;gt; - 深圳支行: 转账结果
alt 转账成功
深圳支行 --&amp;gt;&amp;gt; 深圳支行: 订单状态 SUCC
深圳支行 --&amp;gt;&amp;gt; 深圳支行: 事务 COMMIT
else 转账失败
深圳支行 --&amp;gt;&amp;gt; 深圳支行: 订单状态 FAIL
深圳支行 --&amp;gt;&amp;gt; 深圳支行: 事务 ROLLBAK
end
深圳支行 --&amp;gt;&amp;gt; - 用户A: 收到转账结果
&lt;/code>&lt;/pre>&lt;p>在上述流程是同步的，用户需要在转账界面等待转账结果，如果转账耗时过久，会影响到用户体验。可以将转账结果改成异步事件。&lt;/p>
&lt;p>在用户提交转账请求后，返回提示：「转账请求已提交，请稍后查看转账结果」，用户就可以先浏览其他页面，等待转账结果的推送。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-mermaid" data-lang="mermaid">%% 时序图 [Markdown 进阶技能：用代码画时序图](https://zhuanlan.zhihu.com/p/70261692)
%% -&amp;gt;&amp;gt;实线箭头 代表主动发出消息；--&amp;gt;虚线代表响应；末尾带「X」代表异步消息，无需等待回应。
sequenceDiagram
participant 用户A
participant 深圳支行
participant 广州支行
participant 用户B
用户A -&amp;gt;&amp;gt; + 深圳支行: 向用户B转账
深圳支行 -&amp;gt;&amp;gt; 深圳支行: 创建转账订单，状态 PAYOUT
深圳支行 --&amp;gt;&amp;gt; - 用户A: 稍后查看转账结果
深圳支行 -&amp;gt;&amp;gt; + 深圳支行: 事务 BEGIN
深圳支行 -&amp;gt;&amp;gt; 广州支行: A向B转账
广州支行 -&amp;gt;&amp;gt; 用户B: 执行转账操作
用户B --&amp;gt;&amp;gt; 广州支行: 转账结果
loop 定时查询
深圳支行 -&amp;gt;&amp;gt; 广州支行: 转账订单状态
广州支行 --&amp;gt;&amp;gt; 深圳支行: 转账订单结果
end
alt 转账成功
深圳支行 --&amp;gt;&amp;gt; 深圳支行: 订单状态 SUCC
深圳支行 --&amp;gt;&amp;gt; 深圳支行: 事务 COMMIT
else 转账失败
深圳支行 --&amp;gt;&amp;gt; 深圳支行: 订单状态 FAIL
深圳支行 --&amp;gt;&amp;gt; - 深圳支行: 事务 ROLLBACK
end
深圳支行 -&amp;gt;&amp;gt; 用户A: 转账结果
&lt;/code>&lt;/pre>&lt;h3 id="二阶段提交协议">二阶段提交协议&lt;/h3>
&lt;p>2PC 与 MySQL单机中的 2PL 有相似点，都有两个阶段，但适用的目标是不一样的，不能混淆。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>二阶段加锁协议（Two-Phase Locking, 2PL）：一种用于管理数据库事务并发控制的协议，主要目的是防止多个事务同时修改同一数据项，以避免数据不一致的问题，实现可序列化的隔离等级。&lt;/li>
&lt;li>二阶段提交协议（Two-Phase Commit, 2PC） ：一种用于实现分布式系统中的原子性操作的协议，确保所有的事务参与者要么全部提交，要么全部回滚，从而保证分布式事务的完整性。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>2PC 的基本流程如下：
&lt;img src="https://vonng.github.io/ddia/img/fig9-9.png"
loading="lazy"
>&lt;/p>
&lt;p>2PC的相关内容，见设计密集型应用（Designing Data-Intensive Applications, DDIA）「&lt;a class="link" href="https://vonng.github.io/ddia/#/ch9?id=%e5%8e%9f%e5%ad%90%e6%8f%90%e4%ba%a4%e4%b8%8e%e4%b8%a4%e9%98%b6%e6%ae%b5%e6%8f%90%e4%ba%a4" target="_blank" rel="noopener"
>第九章：一致性与共识&lt;/a>」，笔者就不赘述了。&lt;/p>
&lt;h2 id="依赖关系mysql-为主">依赖关系：MySQL 为主&lt;/h2>
&lt;p>面试官表示分布式事务是更通用的解决方法，如果用到 &lt;code>MySQL&lt;/code> 和 &lt;code>MongoDB&lt;/code> 都是本地数据库这个条件，这题可以有更好的处理方法。面试结束后，伟大的互联网告诉笔者确实如此。&lt;/p>
&lt;p>&lt;code>MySQL&lt;/code> 存储点券，&lt;code>MongoDB&lt;/code> 存储积分，很明显点券是核心数据，那么需要以 &lt;code>MySQL&lt;/code> 为主，所以&lt;code>MySQL&lt;/code> 中应该有一个字段 &lt;code>mongo_id&lt;/code> 用于关联 &lt;code>MongoDB&lt;/code> 的主键 &lt;code>_id&lt;/code>，而查询 &lt;code>MongoDB&lt;/code> 存储的积分，只能通过 &lt;code>MySQL&lt;/code> 里 &lt;code>mongo_id&lt;/code> 字段。&lt;/p>
&lt;p>假设 &lt;code>MySQL&lt;/code> 表结构如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">wallet&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">user_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">INT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">COMMENT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;userId&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">DECIMAL&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">COMMENT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;点券&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">mongo_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">COMMENT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;MongoDB 主键id&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>MongoDB&lt;/code> 文档结构如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;661bcb98cd3500008c007b5c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;score&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">200&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>主要思想是借鉴预写日志（Write Ahead Log, WAL），实现 &lt;code>MySQL&lt;/code> 与 &lt;code>MongoDB&lt;/code> 的双写一致性：&lt;/p>
&lt;ol>
&lt;li>开启 &lt;code>MySQL&lt;/code> 事务，避免并发问题&lt;/li>
&lt;li>先在 &lt;code>MongoDB&lt;/code> 插入修改后的数据，而不是去更新 &lt;code>MongoDB&lt;/code>&lt;/li>
&lt;li>再更新 &lt;code>MySQL&lt;/code> 的 &lt;code>mongo_id&lt;/code>。&lt;/li>
&lt;/ol>
&lt;p>具体流程如下：&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-mermaid" data-lang="mermaid">%% 时序图 [Markdown 进阶技能：用代码画时序图](https://zhuanlan.zhihu.com/p/70261692)
%% -&amp;gt;&amp;gt;实线箭头 代表主动发出消息；--&amp;gt;虚线代表响应；末尾带「X」代表异步消息，无需等待回应。
sequenceDiagram
participant 用户
participant 系统
participant MySQL
participant MongoDB
用户 -&amp;gt;&amp;gt; + 系统: 积分兑换点券
系统 -&amp;gt;&amp;gt; MySQL: 事务 BEGIN
系统 -&amp;gt;&amp;gt; MySQL: 查询 user_id
MySQL --&amp;gt;&amp;gt; 系统: 返回 blance, mongo_id
系统 -&amp;gt;&amp;gt; MongoDB: 查询 mongo_id
MongoDB --&amp;gt;&amp;gt; 系统: 返回 document
系统 -&amp;gt;&amp;gt; 系统: document.score -= 100
系统 -&amp;gt;&amp;gt; MongoDB: 插入修改后的 document
MongoDB --&amp;gt;&amp;gt; 系统: 返回 mongo_id
系统 -&amp;gt;&amp;gt; MySQL: 更新 blance, mongo_id
MySQL --&amp;gt;&amp;gt; 系统: 更新成功
MySQL --&amp;gt;&amp;gt; 系统: 事务 COMMIT
系统 --&amp;gt;&amp;gt; - 用户: 兑换完成
&lt;/code>&lt;/pre>&lt;p>在这个流程中，无论什么时候写入出错，都不会影响到数据的一致性。&lt;/p>
&lt;ol>
&lt;li>如果在 &lt;code>MongoDB&lt;/code> 插入新数据时出错，&lt;code>MySQL&lt;/code> 中保存的仍为老数据。&lt;/li>
&lt;li>如果在 &lt;code>MySQL&lt;/code> 更新时出错，&lt;code>MySQL&lt;/code> 中保存的仍为老数据。&lt;/li>
&lt;/ol>
&lt;p>不过这种方案会带来一个问题，&lt;code>MongoDB&lt;/code> 会新增一条无效的垃圾数据，解决方法有两种：&lt;/p>
&lt;ol>
&lt;li>异步删除。通过带有重试机制的消息队列，直到垃圾数据被删除。&lt;/li>
&lt;li>定时器删除。通过定时器，查询出近段时间垃圾数据，并做删除。&lt;/li>
&lt;/ol>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://zq99299.github.io/note-book/back-end-storage/01/05.html#%e5%88%b0%e5%ba%95%e4%bb%80%e4%b9%88%e6%98%af%e5%88%86%e5%b8%83%e5%bc%8f%e4%ba%8b%e5%8a%a1" target="_blank" rel="noopener"
>分布式事务：如何保证多个系统间的数据是一致的？&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://juejin.cn/post/7173629924111532045" target="_blank" rel="noopener"
>如何保证mongodb和数据库双写数据一致性？&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.diguage.com/post/overview-of-distributed-transaction/" target="_blank" rel="noopener"
>分布式事务概述&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.fanyilun.me/2021/03/06/%e4%b8%80%e8%87%b4%e6%80%a7%e9%97%ae%e9%a2%98%e4%b8%8e%e5%88%86%e5%b8%83%e5%bc%8f%e4%ba%8b%e5%8a%a1/" target="_blank" rel="noopener"
>一致性问题与分布式事务&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.cnblogs.com/jackion5/p/11364935.html" target="_blank" rel="noopener"
>以银行转账为例分析分布式事务的解决方案&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>LC2522. 统计上升四元组</title><link>https://niluan304.github.io/solutions/lc2522.-%E7%BB%9F%E8%AE%A1%E4%B8%8A%E5%8D%87%E5%9B%9B%E5%85%83%E7%BB%84/</link><pubDate>Fri, 12 Jan 2024 00:00:00 +0000</pubDate><guid>https://niluan304.github.io/solutions/lc2522.-%E7%BB%9F%E8%AE%A1%E4%B8%8A%E5%8D%87%E5%9B%9B%E5%85%83%E7%BB%84/</guid><description>&lt;p>$132$ 模式的进阶，求 $1324$ 模式 的个数：枚举 4 ，求 4 左边 132 模式的数量&lt;/p>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>四元上升组定义：一个组 $(i, j, k, l)$ 满足以下条件：&lt;/p>
&lt;ul>
&lt;li>$0 &amp;lt;= i &amp;lt; j &amp;lt; k &amp;lt; l &amp;lt; n $ 且&lt;/li>
&lt;li>$nums[i] &amp;lt; nums[k] &amp;lt; nums[j] &amp;lt; nums[l] $。&lt;/li>
&lt;/ul>
&lt;p>在数组中是这样的：&lt;/p>
&lt;p>&lt;img src="https://pic.leetcode.cn/1705071082-bzZhLS-image-20240112201924903.png"
loading="lazy"
alt="image-20240112201924903.png"
>&lt;/p>
&lt;p>这里称之为 $1324$ 模式，如果有疑惑，请先AC：&lt;a class="link" href="https://leetcode.cn/problems/132-pattern/description/" target="_blank" rel="noopener"
>456. 132 模式&lt;/a>&lt;/p>
&lt;p>AC后，可以先思考下：返回长度 $n-2$ 的数组，记录每个 $j$ 下有多少个 $132$ 模式。&lt;/p>
&lt;p>$
nums[i] &amp;lt; nums[k] &amp;lt; nums[j] \quad \quad i&amp;lt;j&amp;lt;k
$&lt;/p>
&lt;blockquote>
&lt;p>解法的时间复杂度应当不超过 $\mathcal{O}(n^2)$&lt;/p>
&lt;/blockquote>
&lt;p>比如 &lt;strong>示例3：$nums = [-1,3,2,0]$&lt;/strong>&lt;/p>
&lt;p>$j=1$ 下有 $2$ 个 $132$ 模式的的子序列：$[-1, 3, 2]$、$[-1, 3, 0]$&lt;/p>
&lt;p>$j=2$ 下有 $1$ 个 $132$ 模式的的子序列：$[-1, 2, 0]$&lt;/p>
&lt;p>那么答案为：$ans = [2,1]$&lt;/p>
&lt;p>&lt;strong>注意：&lt;/strong>&lt;/p>
&lt;p>本篇内容是尝试去拆分 佬&lt;a class="link" href="https://niluan304.github.io/u/destiny-god" >@DestinyGod&lt;/a> 题解&lt;a class="link" href="https://leetcode.cn/problems/count-increasing-quadruplets/solutions/2080664/by-destiny-god-4qc6" target="_blank" rel="noopener"
>最简洁代码&lt;/a>，从而得到的个人理解。&lt;/p>
&lt;h2 id="思路">思路&lt;/h2>
&lt;p>题目要求统计数组中有多少个 $1324$ 模式。&lt;/p>
&lt;p>题目数据范围：$4 &amp;lt;= nums.length &amp;lt;= 4000$，意味着代码的时间复杂度应为 $\mathcal{O}(n^2)$，部分语言 $\mathcal{O}(n^2 \log n)$ 也可以AC。&lt;/p>
&lt;h3 id="枚举-j-和-l">枚举 j 和 l&lt;/h3>
&lt;p>时间复杂度度 $\mathcal{O}(n^2)$ 可以过，可以枚举最大的 $3$ 和 $4$ ，设索引分别为 $j$ 和 $l$。&lt;/p>
&lt;p>如果知道在区间 $[0, l]$ 内，以 $j$ 为 $3$ 的 $132$ 模式的数量，记为 $count[l][j]$，并在双重循环中累加起来，那就是答案了。&lt;/p>
&lt;p>伪代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 从小到大枚举 l 统计答案
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 如果 nums[j] &amp;lt; nums[l]，那么有 `j为3, l为4` 的 `1324模式`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 答案应当加上以 `j为3` 的 `132模式` 的数量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="nx">l&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">l&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">l&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">l&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">j&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">l&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 符合 1324 模式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">ans&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">count&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">l&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1">// count[l][j] 表示 在区间 [0, l] 内，以 `j为3` 的 `132模式` 的数量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看出，这部分代码的时间复杂度是 $\mathcal{O}(n^2)$，如果能在时间复杂度 $\mathcal{O}(n^2)$ 以内预处理好 $count[l][j]$，那么就可以完成此题。&lt;/p>
&lt;h3 id="预处理-countlj">预处理 count[l][j]&lt;/h3>
&lt;p>需要注意在区间 $[0, l]$ 内，以 $j$ 为 $3$ 的 $132$ 模式的所有数量，等于 所有能满足&lt;/p>
&lt;p>$
nums[i] &amp;lt; nums[k] &amp;lt; nums[j] \quad \quad \quad i \in [0, j-1],\ k \in [j+1, l-1]
$&lt;/p>
&lt;p>$(i, k)$ 的对数&lt;/p>
&lt;hr>
&lt;p>计算 $count[l][j]$，可以借助动态规划的思想。&lt;/p>
&lt;p>在区间 $[0, l]$ 内，以 $j$ 为 $3$ 的 $132$ 模式的所有数量 等于 在区间 $[0, l-1]$ 内的数量加上以 $j$ 为 $3$，以 $l$ 为 $2$ 的 $132$ 的数量，记为 $x$，即：&lt;/p>
&lt;p>$
count[l][j] = count[l-1][j] + x
$&lt;/p>
&lt;p>而 $x$ 就是 在 $[0,j-1]$ 区间内，小于 $nums[l]$ 的数量，那如何计算 $x$ 呢？暴力枚举：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">x&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">l&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">j&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">l&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">x&lt;/span>&lt;span class="o">++&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在加上枚举 $l$ 的实现，就得到 预处理 $count[l][j]$的代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// count[l][j] 表示 在 [0, l] 这段区间内，以 `j为3` 的 `132模式` 数量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">count&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([][]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="nx">l&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">l&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">l&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">count&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">l&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">l&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">x&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c1">// x 记录 [0, j] 这段区间，有多少个数小于 nums[l]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 动态规划的思想
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">l&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">j&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 在 [0, l] 区间，以 `j为3` 的 `132模式` 数量等于在 [0, l-1] 区间内的数量 + 以 `j为3`，以 `l为2` 的 `132模式` 的数量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">count&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">l&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">count&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">l&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 如果 nums[j] &amp;gt; nums[l]，说明 nums[l] 可以作为新的 2，新增的数量：在 [0, j] 区间中小于 nums[l] 的个数，
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 也就是以 `j为3, l为2` 的 `132模式` 中，x 就为 1 的数量。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">l&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">count&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">l&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">x&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 如果 nums[j] &amp;lt; nums[l]，说明不满足 `132模式`。但是小于 nums[l] 的数量 +1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">l&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">x&lt;/span>&lt;span class="o">++&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="代码">代码&lt;/h2>
&lt;h3 id="组合代码">组合代码&lt;/h3>
&lt;p>组合 &lt;strong>枚举 $j$ 和 $l$&lt;/strong> 和 &lt;strong>预处理 $count[l][j]$&lt;/strong> 的代码即可解决本题：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">countQuadruplets&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int64&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 1324 模式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// i &amp;lt; j &amp;lt; k &amp;lt; l
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// nums[i] &amp;lt; nums[k] &amp;lt; nums[j] &amp;lt; nums[l]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ans&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// count[l][j] 表示 在 [0, l] 这段区间内，以 `j为3` 的 `132模式` 数量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">count&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([][]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">l&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">l&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">l&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">count&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">l&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">l&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">x&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c1">// x 记录 [0, j] 这段区间，有多少个数小于 nums[l]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 动态规划的思想
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">l&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">j&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 在 [0, l] 区间，以 `j为3` 的 `132模式` 数量等于在 [0, l-1] 区间内的数量加上以 `j为3`，以 `l为2` 的 `132模式` 的数量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">count&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">l&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">count&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">l&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 如果 nums[j] &amp;gt; nums[l]，说明 nums[l] 可以作为新的 2，新增的数量：在 [0, j] 区间中小于 nums[l] 的个数，
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 也就是以 `j为3, l为2` 的 `132模式` 中，x 就为 1 的数量。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">l&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">count&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">l&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">x&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 如果 nums[j] &amp;lt; nums[l]，说明不满足 `132模式`。但是小于 nums[l] 的数量 +1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">l&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">x&lt;/span>&lt;span class="o">++&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 从小到大枚举 l 统计答案
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 如果 nums[j] &amp;lt; nums[l]，那么有 `j为3, l为4` 的 `1324模式`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 答案应当加上以 `j为3` 的 `132模式` 的数量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="nx">l&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">l&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">l&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">l&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">j&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">l&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 符合 1324 模式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">ans&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">count&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">l&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1">// count[l][j] 表示 在区间 [0, l] 内，以 `j为3` 的 `132模式` 的数量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">int64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ans&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="空间优化">空间优化&lt;/h3>
&lt;p>可以发现， &lt;strong>枚举 $j$ 和 $l$&lt;/strong> 和 &lt;strong>预处理 $count[l][j]$&lt;/strong> 的遍历的顺序都是一样的：&lt;strong>外层遍历 $l$, 内层遍历 $j$&lt;/strong>&lt;/p>
&lt;p>那么可以一边统计答案，一边预处理$count[l][j]$，同时也可以把 $count[l][j]$ 压缩到一维数组。&lt;/p>
&lt;ul>
&lt;li>这就是 题解&lt;a class="link" href="https://leetcode.cn/problems/count-increasing-quadruplets/solutions/2080664/by-destiny-god-4qc6" target="_blank" rel="noopener"
>最简洁代码&lt;/a> 的解法&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">countQuadruplets&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int64&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 1324 模式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// i &amp;lt; j &amp;lt; k &amp;lt; l
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// nums[i] &amp;lt; nums[k] &amp;lt; nums[j] &amp;lt; nums[l]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ans&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// count[l][j] 表示 在 [0, l] 这段区间内，以 `j为3` 的 `132模式` 数量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 一边统计答案，一边预处理 count[l][j]，并将 count[l][j] 为 一维数组
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">count&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">l&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">l&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">l&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">x&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c1">// x 记录 [0, j] 这段区间，有多少个数小于 nums[l]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">l&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">j&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 动态规划的思想
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 在 [0, l] 区间，以 `j为3` 的 `132模式` 数量等于在 [0, l-1] 区间内的数量 + 以 `j为3`，以 `k为2` 的 `132模式` 的数量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 如果 nums[j] &amp;gt; nums[l]，说明 nums[l] 可以作为新的 2，而新增的数量为：在 [0, j] 区间中小于 nums[l] 的个数，
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 也就是以 `j为3, k为2` 的 `132模式` 中，1 的数量。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">l&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">count&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">x&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 如果 nums[j] &amp;lt; nums[l]，说明有 `j为3, l为4` 的 `1324` 模式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 并且 在 [0,j] 区间内 小于 nums[l] 的数量 +1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">l&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ans&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">count&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">x&lt;/span>&lt;span class="o">++&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">int64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ans&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>LC2681. 英雄的力量</title><link>https://niluan304.github.io/solutions/lc2681.-%E8%8B%B1%E9%9B%84%E7%9A%84%E5%8A%9B%E9%87%8F/</link><pubDate>Sat, 06 Jan 2024 00:00:00 +0000</pubDate><guid>https://niluan304.github.io/solutions/lc2681.-%E8%8B%B1%E9%9B%84%E7%9A%84%E5%8A%9B%E9%87%8F/</guid><description>&lt;p>&lt;img src="https://niluan304.github.io/solutions/lc2681.-%E8%8B%B1%E9%9B%84%E7%9A%84%E5%8A%9B%E9%87%8F/Feng_2024-03-11_21-58-20.png"
width="1280"
height="853"
srcset="https://niluan304.github.io/solutions/lc2681.-%E8%8B%B1%E9%9B%84%E7%9A%84%E5%8A%9B%E9%87%8F/Feng_2024-03-11_21-58-20_hua57436bf84eefbfb810184d2122223e4_1200694_480x0_resize_box_3.png 480w, https://niluan304.github.io/solutions/lc2681.-%E8%8B%B1%E9%9B%84%E7%9A%84%E5%8A%9B%E9%87%8F/Feng_2024-03-11_21-58-20_hua57436bf84eefbfb810184d2122223e4_1200694_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="alt text"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/p>
&lt;h2 id="读题">读题&lt;/h2>
&lt;p>根据「这组英雄的力量」的定义，得知元素顺序不影响答案，那么可以先排序，然后固定最大值。&lt;/p>
&lt;p>暴力解法：全排列小于当前最大值的数，再遍历最小值，但是这种做法时间复杂度过高，没办法优化。&lt;/p>
&lt;blockquote>
&lt;p>优化暴力解法，也是一种解题方法。&lt;/p>
&lt;/blockquote>
&lt;p>读题时有两点必须要注意到：&lt;/p>
&lt;ul>
&lt;li>数据范围： $1 \leq nums.length \leq 10^5$，表明本题时间复杂度至多为 $\mathcal{O}(n\log n)$;&lt;/li>
&lt;li>由于答案可能非常大，请你将结果对 $10^9 + 7$ &lt;strong>取余。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>根据我以往的做题经验，猜测本题的解法是动态规划。&lt;/p>
&lt;h2 id="观察与猜测">观察与猜测&lt;/h2>
&lt;p>没什么思路的时，我喜欢在草稿纸上写例子，比如有 $nums = [1,2,3,4,5]$，顺序从小到大。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>以下思考过程是有问题的&lt;/strong>，因为按子序列个数的划分方式并不方便找到规律。&lt;/p>
&lt;/blockquote>
&lt;p>设当前最大值为 $a_n$，$[a_1,a_2,&amp;hellip;,a_n]$ 的全排列后的最小值之和为 $S_n$，那么答案为：$\sum{a_n^2 * S_n}$&lt;/p>
&lt;p>$a_1 = 1, S_1 = [1]$&lt;/p>
&lt;p>$a_2=2, S_2 = [ 2 + (1)]$&lt;/p>
&lt;ul>
&lt;li>解释：只有 $1$ 个数时：$\sum\min{[2]} = 2$，$2$ 个数时：$\sum\min{[2,1]} = 1$&lt;/li>
&lt;/ul>
&lt;p>$a_3 = 3, S_3 = [3 + (2+1) + (1)]$&lt;/p>
&lt;ul>
&lt;li>解释：只有 $1$ 个数时：$\sum\min{[3]} = 3$，$2$ 个数时：$\sum\min{[3,2]} + \sum\min{[3,1]} = 2 + 1$，$3$ 个数：$\sum\min{[3,2,1]} = 1$&lt;/li>
&lt;/ul>
&lt;p>$a_4 = 4, S_4 = [4 + (3+2+1) + (2+1+1) + (1)]$&lt;/p>
&lt;p>$a_5 = 5, S_5 = [5 + (4+3+2+1) + &amp;hellip;]$&lt;/p>
&lt;h3 id="再观察">再观察&lt;/h3>
&lt;p>为了找到规律，我尝试 &lt;strong>在 $S_n$ 内逐个固定最大值，再分组&lt;/strong> ：&lt;/p>
&lt;p>$a_1 = 1, S_1 = 1$&lt;/p>
&lt;p>$a_2=2, S_2 = 2 + (1)$&lt;/p>
&lt;p>$a_3 = 3, S_3 = 3 + (2+1) + (1)$&lt;/p>
&lt;p>$a_4 = 4, S_4 = 4 + [3+(2+1)+1] + [2+(1)] + (1)$&lt;/p>
&lt;p>$a_5 = 5, S_5 = 5 + {4 + [3+(2+1)+1] + [2+(1)] + (1)} + &amp;hellip;$&lt;/p>
&lt;p>我发现式子有以下特点：&lt;/p>
&lt;p>$a_1 = 1, S_1 = a_1$&lt;/p>
&lt;p>$a_2=2, S_2 = a_2 + S_1$&lt;/p>
&lt;p>$a_3 = 3, S_3 = a_3 + S_2 + S_1$&lt;/p>
&lt;p>$a_4 = 4, S_4 = a_4 + S_3 + S_2 + S_1$&lt;/p>
&lt;p>$a_5 = 5, S_5 = a_5 + S_4 + S_3 + S_2 + S_1$&lt;/p>
&lt;p>根据这样的规划，容易猜测出：$S_n = a_n + \sum{S_{i-1}}$&lt;/p>
&lt;p>根据错位相减法或换元法，可以求得：$S_n = a_n - a_{n-1} + 2*S_{n-1}$&lt;/p>
&lt;h2 id="代码实现">代码实现&lt;/h2>
&lt;p>下面就是编码验证环节：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">sumOfPower&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">const&lt;/span> &lt;span class="nx">mod&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1_000_000_007&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">nums&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 哨兵，防止nums[i-1]时数组越界
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">sort&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Ints&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">dp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">power&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">num&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">dp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">num&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">dp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="nx">mod&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="nx">mod&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">power&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">power&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">num&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">num&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="nx">mod&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">dp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="nx">mod&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">power&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="复杂度分析">复杂度分析&lt;/h3>
&lt;ul>
&lt;li>时间复杂度：$\mathcal{O}(n\log n)$，其中 $n$ 为 $\textit{nums}$ 的长度。&lt;/li>
&lt;li>空间复杂度：$\mathcal{O}(n)$。&lt;/li>
&lt;/ul>
&lt;h2 id="感想">感想&lt;/h2>
&lt;p>虽然过程崎岖，但胜在收获不错，动态规划的题目，如果没有思路，在草稿纸上列出具体的例子，或许能帮助你发现数据的规律，并找到解题方法。&lt;/p>
&lt;p>非常感谢你的阅读，衷心祝愿你不会踩到取模陷阱。&lt;/p></description></item><item><title>gee-web-day10 通过反射构造规范路由</title><link>https://niluan304.github.io/p/gee-web-day10-%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%E6%9E%84%E9%80%A0%E8%A7%84%E8%8C%83%E8%B7%AF%E7%94%B1/</link><pubDate>Fri, 22 Dec 2023 15:43:59 +0800</pubDate><guid>https://niluan304.github.io/p/gee-web-day10-%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%E6%9E%84%E9%80%A0%E8%A7%84%E8%8C%83%E8%B7%AF%E7%94%B1/</guid><description>&lt;blockquote>
&lt;p>源代码/数据集已上传到：&lt;a class="link" href="https://github.com/niluan304/gee" target="_blank" rel="noopener"
>GitHub - follow gee to learn go&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="goframe-的-reqresfunc-类型">&lt;code>GoFrame&lt;/code> 的 &lt;code>ReqResFunc&lt;/code> 类型&lt;/h2>
&lt;p>在 day7.5 开篇的时候，笔者提到 &lt;code>GoFrame&lt;/code> 支持第二种路由注册方法，这里笔者称之为 &lt;code>ReqResFunc&lt;/code> 类型（下文同）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 写法二
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">Prefix&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="nx">Req&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">res&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">Prefix&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="nx">Res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 业务代码逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是 day9 实现的函数签名：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">decode&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">point&lt;/span> &lt;span class="nx">any&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span> &lt;span class="nx">any&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对比可以发现，和 &lt;code>ReqResFunc&lt;/code> 类型有明显不同，我们可以在 &lt;code>GoFrame&lt;/code> 的源码里一探究竟。&lt;/p>
&lt;p>从 &lt;code>GoFrame&lt;/code> 的 &lt;a class="link" href="https://goframe.org/pages/viewpage.action?pageId=1114240" target="_blank" rel="noopener"
>文档「路由注册-函数注册」中&lt;/a>，可以找到 &lt;a class="link" href="https://github.com/gogf/gf/blob/313d9d138f96b0ed460d47684298a7fb26d3fd75/net/ghttp/ghttp_server_service_handler.go#L21-L39" target="_blank" rel="noopener"
>入口函数&lt;/a>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// https://github.com/gogf/gf/blob/313d9d138f96b0ed460d47684298a7fb26d3fd75/net/ghttp/ghttp_server_service_handler.go#L21-L39
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// BindHandler registers a handler function to server with a given pattern.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Note that the parameter `handler` can be type of:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 1. func(*ghttp.Request)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 2. func(context.Context, BizRequest)(BizResponse, error)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Server&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">BindHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pattern&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">handler&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{})&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">ctx&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">TODO&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">funcInfo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">checkAndCreateFuncInfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">handler&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Logger&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Fatalf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">`%+v`&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">doBindHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">doBindHandlerInput&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Prefix&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Pattern&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">pattern&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">FuncInfo&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">funcInfo&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Middleware&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Source&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在源码里，可以发现关键代码在 &lt;a class="link" href="https://github.com/gogf/gf/blob/313d9d138f96b0ed460d47684298a7fb26d3fd75/net/ghttp/ghttp_server_service_handler.go#L148" target="_blank" rel="noopener"
>&lt;code>checkAndCreateFuncInfo&lt;/code> 方法&lt;/a>，继续前行，就能够发现端倪：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// https://github.com/gogf/gf/blob/313d9d138f96b0ed460d47684298a7fb26d3fd75/net/ghttp/ghttp_server_service_handler.go#L148
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Server&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">checkAndCreateFuncInfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="nx">pkgPath&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">structName&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">methodName&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">funcInfo&lt;/span> &lt;span class="nx">handlerFuncInfo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">funcInfo&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">handlerFuncInfo&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="c1">// 根据传入的 f，初始化返回值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">Type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">TypeOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ValueOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>GoFrame&lt;/code> 通过反射 &lt;code>reflect&lt;/code>，获取了传入的函数的参数信息，并做了相应的校验，关键代码有 5 行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 校验请求和返回的参数数量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="nx">reflectType&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NumIn&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">reflectType&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NumOut&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 第一个请求参数必须为 context.Context 类型
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">reflectType&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">In&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nf">Implements&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">TypeOf&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kc">nil&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nf">Elem&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 第二个返回参数必须为 error 类型
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">reflectType&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Out&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nf">Implements&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">TypeOf&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="kt">error&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kc">nil&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nf">Elem&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 第二个请求参数必须为以 `Req` 结尾
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">strings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">HasSuffix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">reflectType&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">In&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nf">String&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="s">`Req`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 第一个返回参数必须为以 `Res` 结尾
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">strings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">HasSuffix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">reflectType&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Out&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nf">String&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="s">`Res`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过这些校验，&lt;code>GoFrame&lt;/code> 就实现了规范路由函数必须是 &lt;code>ResReqFunc&lt;/code> 类型的约束。校验过程中，有一些细节：&lt;/p>
&lt;ol>
&lt;li>&lt;code>ctx&lt;/code> 和 &lt;code>error&lt;/code> 是接口类型，只能调用 &lt;code>func (Type) Implements(u Type) bool&lt;/code> 确认是否实现了对应的接口，&lt;code>(*error)(nil)&lt;/code> 和 &lt;code>(*context.Context)(nil)&lt;/code> 则是声明了对应接口的空值 &lt;code>nil&lt;/code>。&lt;/li>
&lt;li>&lt;code>req&lt;/code> 和 &lt;code>res&lt;/code> 的初始类型是结构体，可以直接获取结构体的类型名。&lt;/li>
&lt;/ol>
&lt;h2 id="实现-reqresfunc-类型的约束">实现 &lt;code>ReqResFunc&lt;/code> 类型的约束&lt;/h2>
&lt;p>接下来，我们就可以仿照 &lt;code>GoFrame&lt;/code>，实现 &lt;code>ResReqFunc&lt;/code> 类型的约束。首先需要创建一个结构体，用于保存反射解析出来的值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">ReqResFunc&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fn&lt;/span> &lt;span class="nx">reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Value&lt;/span> &lt;span class="c1">// 函数调用入口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ctx&lt;/span> &lt;span class="nx">reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Type&lt;/span> &lt;span class="c1">// 第一个请求参数：context.Context
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">req&lt;/span> &lt;span class="nx">reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Type&lt;/span> &lt;span class="c1">// 第二个请求参数：XXXReq
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">res&lt;/span> &lt;span class="nx">reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Type&lt;/span> &lt;span class="c1">// 第一个返回参数：XXXRes
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="nx">reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Type&lt;/span> &lt;span class="c1">// 第二个返回参数：error
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>具体的解析代码，可以全部仿照 &lt;code>GoFrame&lt;/code> 的流程，获取入参 &lt;code>reqRes&lt;/code> 的反射对象，然后逐个校验，最后再构造 &lt;code>ReqResFunc&lt;/code>。&lt;/p>
&lt;p>那么还剩最后一个问题， &lt;code>ReqResFunc&lt;/code> 要注册到 &lt;code>Gin&lt;/code>框架里呢？这里和 day9 遇到的情况一样，还是那句名言：&lt;/p>
&lt;blockquote>
&lt;p>All problems in computer science can be solved by another level of indirection.&lt;/p>
&lt;p>计算机科学领域的任何问题都可以通过增加一个中间层来解决。&lt;/p>
&lt;/blockquote>
&lt;p>倘若解决不了，那就再加一个中间层，因此完全可以把 &lt;code>ReqResFunc&lt;/code> 转换为 &lt;code>DecodeFunc&lt;/code>，实现也不复杂：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ReqResFunc&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">decode&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">point&lt;/span> &lt;span class="nx">any&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">any&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">req&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Elem&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">point&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Interface&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">point&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">result&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Call&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="nx">reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Value&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ValueOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">IsNil&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Interface&lt;/span>&lt;span class="p">().(&lt;/span>&lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nf">Interface&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ReqResFunc&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">DecodeFunc&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="nx">DecodeFunc&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Call&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而 &lt;code>GoFrame&lt;/code> 也是这样转化的，相关源码： &lt;a class="link" href="https://github.com/gogf/gf/blob/313d9d138f96b0ed460d47684298a7fb26d3fd75/net/ghttp/ghttp_server_service_handler.go#L264-L306" target="_blank" rel="noopener"
>&lt;code>func createRouterFunc(funcInfo handlerFuncInfo) func(r *Request)&lt;/code>&lt;/a>&lt;/p>
&lt;h2 id="验证-reqresfunc-类型">验证 &lt;code>ReqResFunc&lt;/code> 类型&lt;/h2>
&lt;p>增加了一个新特性，做个简单测试，通过 &lt;code>teamId&lt;/code> 获取团队成员：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// internal/controller/controller.go
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">team&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">GetUsers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">TeamGetUsersReq&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">res&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">TeamGetUsersRes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">out&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Team&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GetUsers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TeamGetUsersReq&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">Id&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Id&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">TeamGetUsersRes&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">TeamGetUsersRes&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">out&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// internal/service/service.go
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">team&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">GetUsers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">TeamGetUsersReq&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">res&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">TeamGetUsersRes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">users&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">UserGetRes&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 查询数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Users 只是一个切片 []User，用于充当数据库
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">row&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Users&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TeamId&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Id&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">users&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">users&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">UserGetRes&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">Id&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">TeamId&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TeamId&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">TeamGetUsersRes&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">Users&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">users&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>测试接口：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">Test_Client&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Second&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 等待服务端启动
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">paths&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;/user/1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// {&amp;#34;code&amp;#34;:200,&amp;#34;msg&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;data&amp;#34;:{&amp;#34;id&amp;#34;:1,&amp;#34;name&amp;#34;:&amp;#34;Alice&amp;#34;,&amp;#34;teamId&amp;#34;:1}}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="s">&amp;#34;/user/3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// {&amp;#34;code&amp;#34;:400,&amp;#34;msg&amp;#34;:&amp;#34;user not found: 3&amp;#34;,&amp;#34;data&amp;#34;:null}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="s">&amp;#34;/user/1/team&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// {&amp;#34;code&amp;#34;:200,&amp;#34;msg&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;data&amp;#34;:{&amp;#34;id&amp;#34;:1,&amp;#34;name&amp;#34;:&amp;#34;Alice&amp;#34;,&amp;#34;team&amp;#34;:{&amp;#34;id&amp;#34;:3,&amp;#34;name&amp;#34;:&amp;#34;Apple&amp;#34;}}}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="s">&amp;#34;/team/3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// {&amp;#34;code&amp;#34;:200,&amp;#34;msg&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;data&amp;#34;:{&amp;#34;id&amp;#34;:3,&amp;#34;name&amp;#34;:&amp;#34;Apple&amp;#34;}}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="s">&amp;#34;/team/5&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// {&amp;#34;code&amp;#34;:400,&amp;#34;msg&amp;#34;:&amp;#34;team not found: 5&amp;#34;,&amp;#34;data&amp;#34;:null}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="s">&amp;#34;/team/3/users&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// {&amp;#34;code&amp;#34;:200,&amp;#34;msg&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;data&amp;#34;:{&amp;#34;users&amp;#34;:[{&amp;#34;id&amp;#34;:1,&amp;#34;name&amp;#34;:&amp;#34;Alice&amp;#34;,&amp;#34;teamId&amp;#34;:3}]}}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="s">&amp;#34;/team/5/users&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// {&amp;#34;code&amp;#34;:200,&amp;#34;msg&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;data&amp;#34;:{&amp;#34;Users&amp;#34;:null}}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">path&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">paths&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">resp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;http://localhost:8080&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;req err&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ReadAll&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">resp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Body&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;read resp.Body err&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="通过对象注册路由">通过对象注册路由&lt;/h2>
&lt;p>事实上，&lt;code>GoFrame&lt;/code> 还有第三种路由注册方法：&lt;a class="link" href="https://goframe.org/pages/viewpage.action?pageId=116004922" target="_blank" rel="noopener"
>对象注册&lt;/a>，向 &lt;code>(*ghttp.RouterGroup).Bind&lt;/code> 传入一个结构体变量，然后 &lt;code>GoFrame&lt;/code> 会尝试注册这个结构体上的所有 &lt;code>ReqResFunc&lt;/code> 类型的方法。这也是通过反射实现的，核心代码也很简短：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">ObjectHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">object&lt;/span> &lt;span class="nx">any&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">handles&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HandlerFunc&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">v&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ValueOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">object&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 如果是结构体, 那么获取这个结构体的指针, 从而遍历到他的所有方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Kind&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">newValue&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Type&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">newValue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Elem&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">v&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">v&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">newValue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Kind&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nx">reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Pointer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;v.Kind() must be reflect.Pointer&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NumMethod&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fn&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Method&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 所有方法都必须为 ReqResFunc 类型
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">handles&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">handles&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">ReqResHandle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Interface&lt;/span>&lt;span class="p">()))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">handles&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是通过对象注册路由有个缺点，难以为 &lt;strong>&lt;code>HandlerFunc&lt;/code>&lt;/strong> 绑定 &lt;code>path&lt;/code> 和 &lt;code>method&lt;/code>。&lt;/p>
&lt;p>已知的解决方式：&lt;/p>
&lt;ol>
&lt;li>&lt;code>GoFrame&lt;/code> 是在 &lt;code>Req&lt;/code>（第二个请求参数）里写 &lt;code>go tag&lt;/code>，有兴趣的读者，可以查看&lt;a class="link" href="https://goframe.org/pages/viewpage.action?pageId=116004922#id-%e8%a7%84%e8%8c%83%e8%b7%af%e7%94%b1%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8-%e8%a7%84%e8%8c%83%e5%8f%82%e6%95%b0%e7%bb%93%e6%9e%84" target="_blank" rel="noopener"
>「文档：规范参数结构」&lt;/a>。&lt;/li>
&lt;li>&lt;code>iris&lt;/code> 要求方法名（函数名）的格式为：请求方法+请求路径，如 &lt;code>GetHelloWorld&lt;/code> 对应 &lt;code>GET: /hello/world&lt;/code>，示例：&lt;a class="link" href="https://github.com/iris-contrib/examples/blob/master/mvc/hello-world/main.go" target="_blank" rel="noopener"
>examples/mvc/hello-world/main.go&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>笔者也做了简单的实现：&lt;a class="link" href="https://github.com/niluan304/gee/blob/main/web/day10/handle/handle_test.go" target="_blank" rel="noopener"
>gee/web/day10/handle/handle_test.go&lt;/a>，这里就不再赘述了。&lt;/p></description></item><item><title>gee-web-day9 反序列化与解耦</title><link>https://niluan304.github.io/p/gee-web-day9-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E8%A7%A3%E8%80%A6/</link><pubDate>Thu, 21 Dec 2023 18:15:11 +0800</pubDate><guid>https://niluan304.github.io/p/gee-web-day9-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E8%A7%A3%E8%80%A6/</guid><description>&lt;blockquote>
&lt;p>源代码/数据集已上传到：&lt;a class="link" href="https://github.com/niluan304/gee" target="_blank" rel="noopener"
>GitHub - follow gee to learn go&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>经过分层处理后，项目布局有了很大改善，但是仍然存在问题。&lt;/p>
&lt;ol>
&lt;li>&lt;code>controller&lt;/code> 层的错误处理代码特别繁琐，有太多的：&lt;code>ctx.JSON(http.StatusOK, Response{400, err.Error(), nil})&lt;/code>&lt;/li>
&lt;li>&lt;code>controller&lt;/code> 层只支持 &lt;code>Gin&lt;/code> 框架，更不支持其他协议&lt;/li>
&lt;/ol>
&lt;h2 id="让调用者帮忙反序列化">让调用者帮忙反序列化&lt;/h2>
&lt;p>观察 &lt;code>controller&lt;/code> 层可以得出一个结论：&lt;code>controller&lt;/code> 的需求其实很简单：反序列化为 &lt;code>service&lt;/code> 层所需要 &lt;code>go&lt;/code> 类型，并在 &lt;code>err != nil&lt;/code> 时做控制的流转。&lt;/p>
&lt;p>那么该怎么实现呢？这其实并不难。说到反序列化，笔者相信各位都非常熟悉标准库的 &lt;code>json.Unmarshal(data []byte, v any) error&lt;/code>，&lt;code>json.Unmarshal&lt;/code> 要求传入 &lt;code>JSON&lt;/code> 编码的数据源和接收变量的指针，反序列化需要两个最基本的源：数据源和接收源。如果数据源是 &lt;code>r io.Reader&lt;/code>类型，还可以直接使用标准库装好的方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">dec&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">json&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewDecoder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">dec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">point&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>笔者提及 &lt;code>func (dec *Decoder) Decode(v any) error&lt;/code> 有什么用呢？回顾一下 day8 的 &lt;code>controller&lt;/code> 层代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">req&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">UserGetReq&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ShouldBindUri&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>很明显接收源是 &lt;code>var req *service.UserGetReq&lt;/code>，而 &lt;code>ctx.ShouldBindUri(&amp;amp;req)&lt;/code> 与 &lt;code>dec.Decode(point)&lt;/code> 高度相似，甚至函数类型都是：&lt;code>func(point any) error&lt;/code>。分析一下，对于 &lt;code>*json.Decoder&lt;/code> 和 &lt;code>*gin.Context&lt;/code> 来说，数据源都被隐藏在结构体内部了，真正关键的，是反序列化的入口函数：&lt;code>ShouldBindUri&lt;/code> 和 &lt;code>Decode&lt;/code>，因此是可以将 &lt;code>ctx *gin.Context&lt;/code> 替换为 &lt;code>decode func(point any) error&lt;/code> 的，外部传入这个闭包，&lt;code>controller&lt;/code> 层调用闭包，完成反序列化。修改之后的函数签名：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// 第一个参数：ctx
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">decode&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">point&lt;/span> &lt;span class="nx">any&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="c1">// 第二个参数：用于反序列化的闭包
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">data&lt;/span> &lt;span class="nx">any&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// 返回的数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// 错误处理
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">req&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">UserGetReq&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">decode&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 通过闭包反序列化 req
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>经过改动的 &lt;code>controller&lt;/code> 和 web框架彻底解耦了，完全看不到 &lt;code>Gin&lt;/code> 框架的代码，毕竟反序列化的工作也并不是 &lt;code>controller&lt;/code> 的任务，错误处理和数据返回也变得非常简单，只需要抛给上层处理（要么 &lt;code>return nil, err&lt;/code>，要么 &lt;code>return res, nil&lt;/code>），解耦之后也为 &lt;code>controller&lt;/code> 层兼容多种协议带来了可能。&lt;/p>
&lt;p>不过但也带来了一个问题：这样的函数，该如何注册到 &lt;code>Gin&lt;/code>框架里呢？&lt;/p>
&lt;h2 id="统一错误处理和数据返回">统一错误处理和数据返回&lt;/h2>
&lt;blockquote>
&lt;p>All problems in computer science can be solved by another level of indirection.&lt;/p>
&lt;p>计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决。&lt;/p>
&lt;/blockquote>
&lt;p>阐述这部分内容之前，笔者想简单的介绍一下「设计模式」里的「适配器模式」&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>：&lt;/p>
&lt;p>简单来讲，就是通过接口转换，让两个不兼容的接口，能够一起工作，现实中的经典例子：
&lt;img src="https://niluan304.github.io/p/gee-web-day9-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E8%A7%A3%E8%80%A6/image.png"
width="800"
height="726"
srcset="https://niluan304.github.io/p/gee-web-day9-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E8%A7%A3%E8%80%A6/image_hu08276af00c1ca3e15fbde43bace3f67d_365741_480x0_resize_box_3.png 480w, https://niluan304.github.io/p/gee-web-day9-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E8%A7%A3%E8%80%A6/image_hu08276af00c1ca3e15fbde43bace3f67d_365741_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="110"
data-flex-basis="264px"
>&lt;/p>
&lt;p>和上面的图片类似，修改后的函数类型已经和框架要求的 &lt;code>gin.HandlerFunc&lt;/code> 截然不同，但借鉴适配器模式的思想，通过中间函数转化，就可以了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ./handle/handle.go
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 设置为类型，用于优化参数显示
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">DecodeFunc&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// 第一个参数：ctx
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">decode&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">point&lt;/span> &lt;span class="nx">any&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="c1">// 第二个参数：用于反序列化的闭包
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">data&lt;/span> &lt;span class="nx">any&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// 返回的数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// 错误处理
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">Handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">decode&lt;/span> &lt;span class="nx">DecodeFunc&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HandlerFunc&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">point&lt;/span> &lt;span class="nx">any&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 实现反序列化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ShouldBind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">point&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StatusOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Response&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">Code&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">400&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Msg&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">Data&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StatusOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Response&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>新的函数作为「适配器」，也会被其他路由调用，也不是业务相关的内容，不适合放到 &lt;code>internal&lt;/code> 包，应当放到新的包（文件夹）里，笔者将之保存至 &lt;code>/handle/handle.go&lt;/code>。&lt;/p>
&lt;p>相应地，路由注册也有些变化：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">r&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Default&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">user&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Group&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/user&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">handle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">controller&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Get&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">POST&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">handle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">controller&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Add&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// listen and serve on 0.0.0.0:8080 (for windows &amp;#34;localhost:8080&amp;#34;)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对比 day8 的注册模式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">controller&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Get&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 函数签名：func (c *user) Get(ctx *gin.Context)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">POST&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">controller&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Add&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 函数签名：func (c *user) Add(ctx *gin.Context)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>虽然注册路由时，必须得借用 &lt;code>handle.Handle&lt;/code> 才能转化为 &lt;code>gin.HandlerFunc&lt;/code>，但是可以不用在 &lt;code>controller&lt;/code> 层里写：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StatusOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Response&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">Code&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">400&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Msg&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">Data&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StatusOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Response&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>至此，我们就完成了错误处理和数据返回的统一。&lt;/p>
&lt;h2 id="小结">小结&lt;/h2>
&lt;p>本章节主要做了两件事：&lt;/p>
&lt;ol>
&lt;li>&lt;code>controller&lt;/code> 层通过传入 &lt;code>decode&lt;/code> 闭包，调用闭包实现反序列化出 &lt;code>service&lt;/code> 层所需数据，也完成了 &lt;code>controller&lt;/code> 与框架的解耦，日后可以兼容其他框架（如 echo）和其他协议（如 rpc）。&lt;/li>
&lt;li>借鉴适配器模式，将 &lt;code>DecodeFunc&lt;/code> 函数转化为框架所需要的类型，并实现错误处理和数据返回的统一。&lt;/li>
&lt;/ol>
&lt;p>运行结果也没有变化：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">client&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Second&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 等待路由注册
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">reqs&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">host&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Response&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">host&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Response&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">host&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;/user?name=Carol&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">host&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Response&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">host&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;/user?name=Bob&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">host&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Response&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">host&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s">&amp;#34;/user&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;application/json&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">bytes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewBufferString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">`{&amp;#34;name&amp;#34;:&amp;#34;Carol&amp;#34;,&amp;#34;age&amp;#34;:44,&amp;#34;job&amp;#34;:&amp;#34;worker&amp;#34;}`&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">host&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Response&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">host&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;/user?name=Carol&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">reqs&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">resp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">req&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;http://localhost:8080&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;req err&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ReadAll&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">resp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Body&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;read resp.Body err&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Output:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// {&amp;#34;code&amp;#34;:200,&amp;#34;msg&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;data&amp;#34;:null}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// {&amp;#34;code&amp;#34;:200,&amp;#34;msg&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;data&amp;#34;:{&amp;#34;name&amp;#34;:&amp;#34;Bob&amp;#34;,&amp;#34;age&amp;#34;:30,&amp;#34;job&amp;#34;:&amp;#34;driver&amp;#34;}}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// {&amp;#34;code&amp;#34;:200,&amp;#34;msg&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;data&amp;#34;:null}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// {&amp;#34;code&amp;#34;:200,&amp;#34;msg&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;data&amp;#34;:{&amp;#34;name&amp;#34;:&amp;#34;Carol&amp;#34;,&amp;#34;age&amp;#34;:44,&amp;#34;job&amp;#34;:&amp;#34;worker&amp;#34;}}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a class="link" href="https://www.yuque.com/aceld/lfhu8y/vnhf4b#gVTIW" target="_blank" rel="noopener"
>适配器模式&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>gee-web-day8 分层设计的必要性</title><link>https://niluan304.github.io/p/gee-web-day8-%E5%88%86%E5%B1%82%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%BF%85%E8%A6%81%E6%80%A7/</link><pubDate>Wed, 20 Dec 2023 13:49:08 +0800</pubDate><guid>https://niluan304.github.io/p/gee-web-day8-%E5%88%86%E5%B1%82%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%BF%85%E8%A6%81%E6%80%A7/</guid><description>&lt;blockquote>
&lt;p>源代码/数据集已上传到：&lt;a class="link" href="https://github.com/niluan304/gee" target="_blank" rel="noopener"
>GitHub - follow gee to learn go&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="什么是请求分层流转">什么是请求分层流转&lt;/h2>
&lt;p>在阐述为什么需要分层设计之前，笔者想先介绍一下分层流转&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>：&lt;/p>
&lt;p>&lt;img src="https://niluan304.github.io/p/gee-web-day8-%E5%88%86%E5%B1%82%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%BF%85%E8%A6%81%E6%80%A7/image.png"
width="1158"
height="2014"
srcset="https://niluan304.github.io/p/gee-web-day8-%E5%88%86%E5%B1%82%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%BF%85%E8%A6%81%E6%80%A7/image_hua5d8aba367ec884939a4137d6275928e_116175_480x0_resize_box_3.png 480w, https://niluan304.github.io/p/gee-web-day8-%E5%88%86%E5%B1%82%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%BF%85%E8%A6%81%E6%80%A7/image_hua5d8aba367ec884939a4137d6275928e_116175_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="57"
data-flex-basis="137px"
>
分层之后，可以让每一层的专注于一类事，这类似于设计模式里单一职责的思想，可以提高项目的可维护性，与接口的可复用性，从而实现低耦合高内聚。计算机网络中的「TCP/IP 四层模式」就是非常典型的分层，实现从 &lt;code>HTTP&lt;/code> 到 &lt;code>HTTPS&lt;/code> 的升级，只需要在 &lt;code>HTTP&lt;/code> 协议与 &lt;code>TCP&lt;/code> 中加了一层 &lt;code>TLS&lt;/code>，其他层的协议与应用不需要做任何改动，这就是计算机网络模型低耦合高内聚的表现。&lt;/p>
&lt;h2 id="代码纠缠的困境">代码纠缠的困境&lt;/h2>
&lt;p>这里有一份简单的 &lt;code>CURD&lt;/code> 代码，只有 &lt;code>*user.Get&lt;/code>、&lt;code>*team.Get&lt;/code> 两个接口，和对应的数据库表 &lt;code>UserTable&lt;/code>、&lt;code>TeamTable&lt;/code>，功能也很简单，根据表主键，获取对应的行数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ./internal/api.go
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Response&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Code&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="s">`json:&amp;#34;code&amp;#34;`&lt;/span> &lt;span class="c1">// 业务代码，200 表示 OK，其他表示错误
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">Msg&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="s">`json:&amp;#34;msg&amp;#34;`&lt;/span> &lt;span class="c1">// 错误消息
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">Data&lt;/span> &lt;span class="nx">any&lt;/span> &lt;span class="s">`json:&amp;#34;data&amp;#34;`&lt;/span> &lt;span class="c1">// 返回的数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">const&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">CodeOK&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">200&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">CodeBadRequest&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">400&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">User&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">req&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Id&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="s">`uri:&amp;#34;id&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ShouldBindUri&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StatusOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Response&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">CodeBadRequest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">slices&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">IndexFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Users&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">row&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Id&lt;/span> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 数据库未找到数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StatusOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Response&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">CodeBadRequest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;user not found: %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Id&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 返回数据库内容
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">row&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Users&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1">// Users 只是一个切片 []User，用于充当数据库表
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StatusOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Response&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">CodeOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">row&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">team&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">Team&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">team&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">team&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">req&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Id&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="s">`uri:&amp;#34;id&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ShouldBindUri&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StatusOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Response&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">CodeBadRequest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 查询数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">slices&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">IndexFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Teams&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">row&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Team&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Id&lt;/span> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 数据库未找到数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StatusOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Response&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">CodeBadRequest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;team not found: %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Id&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 返回数据库内容
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">row&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Teams&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1">// Teams 只是一个切片 []Team，用于充当数据库表
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StatusOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Response&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">CodeOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">row&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>代码很简单，没什么问题，但假如随着项目的进展，需要新增一个接口：通过 &lt;code>userId&lt;/code> 获取用户信息和用户所在 &lt;code>Team&lt;/code> 的信息。&lt;/p>
&lt;p>返回的数据格式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">UserWithTeam&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Id&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="s">`json:&amp;#34;id&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Name&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="s">`json:&amp;#34;name&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Team&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Id&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="s">`json:&amp;#34;id&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Name&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="s">`json:&amp;#34;name&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="s">`json:&amp;#34;team&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这时候理想的处理办法：&lt;/p>
&lt;ol>
&lt;li>根据 &lt;code>userId&lt;/code> 通过 &lt;code>*user.Get&lt;/code> 获取到用户信息和 &lt;code>teamId&lt;/code>&lt;/li>
&lt;li>根据 &lt;code>teamId&lt;/code> 通过 &lt;code>*team.Get&lt;/code> 获取用户所在 &lt;code>Team&lt;/code> 的信息&lt;/li>
&lt;/ol>
&lt;p>流程看起来只需要复用先用的接口，就可以实现需求了，比如这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">GetWithTeam&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Team&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果仅仅是这样的执行顺序，很明显是错误的，用户端通过路由会得到&amp;quot;粘包的 &lt;code>json&lt;/code>&amp;quot;：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;code&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;msg&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;data&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;Id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;Name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Alice&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;TeamId&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;code&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">400&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;msg&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;team not found: 1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;data&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">null&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>分析一下原因，&lt;/p>
&lt;ol>
&lt;li>首先 &lt;code>*gin.Context&lt;/code> 通过路由接收到的数据，只有 &lt;code>userId&lt;/code> 这个数据，并不包含 &lt;code>teamId&lt;/code>，而需要的 &lt;code>teamId&lt;/code> 在 &lt;code>*user.Get&lt;/code> 接口内部直接写到了 &lt;code>(*gin.Context).JSON&lt;/code> 中。&lt;/li>
&lt;li>即便有办法获取传入 &lt;code>(*gin.Context).JSON&lt;/code> 的数据，还需要改造 &lt;code>*gin.Context&lt;/code>，让 &lt;code>*team.Get&lt;/code> 也能获取到正确的 &lt;code>teamId&lt;/code>，但是修改 &lt;code>*gin.Context&lt;/code> 内部数据是很危险的一件事，稍有不慎，就可能跌落悬崖。&lt;/li>
&lt;/ol>
&lt;p>如果 &lt;code>*user.Get&lt;/code> 和 &lt;code>*team.Get&lt;/code> 的设计是传入 &lt;code>id&lt;/code>，返回对应信息，那么就可以轻松实现新接口，还能规避修改 &lt;code>*gin.Context&lt;/code>，比如这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">GetWithTeam&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">user&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">User&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">team&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">Team&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TeamId&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 组装数据，写入返回
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这其实就运用到计算机网络模型里经典的分层思想，将共同属性的分到同一层，通过上下层的「封包」和「解包」实现解耦。现在比较流行的纯后端 API 模块一般采用下述划分方法&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/p>
&lt;ol>
&lt;li>Controller，与上述类似，服务入口，负责处理路由，参数校验，请求转发。&lt;/li>
&lt;li>Logic/Service，逻辑（服务）层，一般是业务逻辑的入口，可以认为从这里开始，所有的请求参数一定是合法的。业务逻辑和业务流程也都在这一层中。常见的设计中会将该层称为 Business Rules。&lt;/li>
&lt;li>DAO/Repository，这一层主要负责和数据、存储打交道。将下层存储以更简单的函数、接口形式暴露给 Logic 层来使用。负责数据的持久化工作。&lt;/li>
&lt;/ol>
&lt;h2 id="分层设计">分层设计&lt;/h2>
&lt;p>先介绍下分层后的目录结构：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span>-- go.mod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span>-- go.sum
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span>-- internal
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>-- controller
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="sb">`&lt;/span>-- controller.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> &lt;span class="sb">`&lt;/span>-- service
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>-- service.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> &lt;span class="sb">`&lt;/span>-- service_model.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span>-- main.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当业务代码都放到了 &lt;code>service&lt;/code> 层时，这一层的代码互相调用是不会被 &lt;code>controller&lt;/code> 层影响的，这也实现了 &lt;code>Gin&lt;/code> 框架与业务代码的解耦。&lt;/p>
&lt;p>&lt;code>controller&lt;/code> 层的主要代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ./internal/controller/controller.go
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">req&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">UserGetReq&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ShouldBindUri&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StatusOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Response&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">CodeBadRequest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StatusOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Response&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">CodeBadRequest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 填写响应内容
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StatusOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Response&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">CodeOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">team&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">req&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TeamGetReq&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ShouldBindUri&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StatusOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Response&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">CodeBadRequest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Team&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StatusOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Response&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">CodeBadRequest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 填写响应内容
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StatusOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Response&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">CodeOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>service&lt;/code> 层的主要代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ./internal/service/service.go
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">UserGetReq&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">res&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">UserGetRes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 查询数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">slices&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">IndexFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Users&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">row&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Id&lt;/span> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 数据库未找到数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;user not found: %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 返回数据库内容
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">row&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Users&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1">// Users 只是一个切片 []User，用于充当数据库表
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">UserGetRes&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">Id&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">TeamId&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TeamId&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">team&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">TeamGetReq&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">res&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">TeamGetRes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 查询数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">slices&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">IndexFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Teams&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">row&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Team&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Id&lt;/span> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 数据库未找到数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;team not found: %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 返回数据库内容
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">row&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Teams&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1">// Teams 只是一个切片 []Team，用于充当数据库表
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">TeamGetRes&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">Id&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这时候，再来实现一下，新增一个接口：通过 &lt;code>userId&lt;/code> 获取用户信息和用户所在 &lt;code>Team&lt;/code> 的信息。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">GetWithTeam&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">req&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">UserGetReq&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ShouldBindUri&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StatusOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Response&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">CodeBadRequest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">userRes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StatusOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Response&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">CodeBadRequest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">teamRes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Team&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TeamGetReq&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">Id&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">userRes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TeamId&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StatusOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Response&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">CodeBadRequest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">type&lt;/span> &lt;span class="nx">UserWithTeam&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Id&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="s">`json:&amp;#34;id&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Name&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="s">`json:&amp;#34;name&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Team&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TeamGetRes&lt;/span> &lt;span class="s">`json:&amp;#34;team&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 填写响应内容
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StatusOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Response&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">CodeOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">UserWithTeam&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Id&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">userRes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Id&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">userRes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Team&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">teamRes&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>分层后的总代码行数有所增加，整个项目的布局变得更清晰了，业务代码也不会受到 web框架的干扰，可以集中处理业务。而且业务层的函数签名具有可读性了，调用 &lt;code>service&lt;/code> 层的方法时，就可以知道所需要的参数，以及返回的值。不过有些读者可能会有疑问，为什么 &lt;code>service&lt;/code> 层方法的第一个参数都是 &lt;code>ctx context.Context&lt;/code>，即便代码中未必使用，这算是 &lt;code>go&lt;/code> 语言在 web 开发中的特色（也可能是技术债），用于并发控制和上下文信息传递的，有兴趣可以自行了解下。&lt;/p>
&lt;p>但是在 &lt;code>controller&lt;/code> 层有太多的 &lt;code>(*gin.Context).JSON()&lt;/code>，也就是处理接口的响应，变得异常繁琐，为了解决这一点，笔者将在下一节阐述如何在框架中实现统一错误处理和数据返回。&lt;/p>
&lt;h2 id="小结">小结&lt;/h2>
&lt;p>本章节介绍下如何通过「分层设计」将一个大问题，转化为若干的分工明确的小问题，实现业务代码与 web框架解耦，提高系统的拓展性和可维护性，从而实现高内聚低耦合。&lt;/p>
&lt;ul>
&lt;li>注意：分层设计也会导致一个问题：新增一个业务接口时，需要改动的文件也会变多，不过这可以通过脚本生成代码缓解。&lt;/li>
&lt;/ul>
&lt;p>最后让我们来看看程序的运行结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">client&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Second&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 等待路由注册
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">reqs&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">host&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Response&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">host&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Response&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">host&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;/user?name=Carol&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">host&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Response&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">host&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;/user?name=Bob&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">host&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Response&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">host&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s">&amp;#34;/user&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;application/json&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">bytes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewBufferString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">`{&amp;#34;name&amp;#34;:&amp;#34;Carol&amp;#34;,&amp;#34;age&amp;#34;:44,&amp;#34;job&amp;#34;:&amp;#34;worker&amp;#34;}`&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">host&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Response&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">host&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;/user?name=Carol&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">reqs&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">resp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">req&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;http://localhost:8080&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;req err&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ReadAll&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">resp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Body&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;read resp.Body err&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Output:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// {&amp;#34;code&amp;#34;:200,&amp;#34;msg&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;data&amp;#34;:null}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// {&amp;#34;code&amp;#34;:200,&amp;#34;msg&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;data&amp;#34;:{&amp;#34;name&amp;#34;:&amp;#34;Bob&amp;#34;,&amp;#34;age&amp;#34;:30,&amp;#34;job&amp;#34;:&amp;#34;driver&amp;#34;}}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// {&amp;#34;code&amp;#34;:200,&amp;#34;msg&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;data&amp;#34;:null}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// {&amp;#34;code&amp;#34;:200,&amp;#34;msg&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;data&amp;#34;:{&amp;#34;name&amp;#34;:&amp;#34;Carol&amp;#34;,&amp;#34;age&amp;#34;:44,&amp;#34;job&amp;#34;:&amp;#34;worker&amp;#34;}}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a class="link" href="https://goframe.org/pages/viewpage.action?pageId=30740166" target="_blank" rel="noopener"
>工程目录设计🔥 - GoFrame (ZH)&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;a class="link" href="https://chai2010.cn/advanced-go-programming-book/ch5-web/ch5-07-layout-of-web-project.html" target="_blank" rel="noopener"
>大型Web项目分层 - Go语言高级编程&lt;/a>：&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>LC70. 从爬楼梯上手动态规划</title><link>https://niluan304.github.io/solutions/lc70.-%E7%88%AC%E6%A5%BC%E6%A2%AF/</link><pubDate>Thu, 21 Sep 2023 00:00:00 +0000</pubDate><guid>https://niluan304.github.io/solutions/lc70.-%E7%88%AC%E6%A5%BC%E6%A2%AF/</guid><description>&lt;p>&lt;img src="https://niluan304.github.io/solutions/lc70.-%E7%88%AC%E6%A5%BC%E6%A2%AF/Feng_2024-03-11_21-58-50.png"
width="1280"
height="853"
srcset="https://niluan304.github.io/solutions/lc70.-%E7%88%AC%E6%A5%BC%E6%A2%AF/Feng_2024-03-11_21-58-50_huaaa334b64bbe980ec87644e4e8bceab4_3023194_480x0_resize_box_3.png 480w, https://niluan304.github.io/solutions/lc70.-%E7%88%AC%E6%A5%BC%E6%A2%AF/Feng_2024-03-11_21-58-50_huaaa334b64bbe980ec87644e4e8bceab4_3023194_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="alt text"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/p>
&lt;p>将简单难度的题目拓展到中等难度&lt;/p>
&lt;h2 id="动态规划入门递归">动态规划入门：递归&lt;/h2>
&lt;p>本题 &lt;a class="link" href="https://leetcode.cn/problems/climbing-stairs/description/" target="_blank" rel="noopener"
>70. 爬楼梯&lt;/a> 是非常经典的动态规划入门题，动态规划的核心是找到状态转移方程：当前状态与之前状态的关系。想要找到方程，通常需要我们用自顶向下的方式去思考问题，将一个大问题转化为解决子问题，实现的手段通常为递归。&lt;/p>
&lt;p>&lt;strong>读题：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>每次可以爬 $1$ 或 $2$ 阶；&lt;/li>
&lt;li>一共要爬 $n$ 阶；&lt;/li>
&lt;li>问爬到 $n$ 阶有多少种方法？&lt;/li>
&lt;/ol>
&lt;p>假设当前处于第 $n$ 阶，问：上一步处于哪个阶梯？&lt;/p>
&lt;p>答：处于 $n-1$ 或 $n-2$ 阶。因为每次只能爬 $1$ 阶或 $2$ 阶，那么上一步选择爬 $1$ 阶，就会处于 $n-1$ 阶，选择爬 $2$ 阶，就会处于 $n-2$ 阶。&lt;/p>
&lt;p>&lt;strong>解题思路：&lt;/strong>&lt;/p>
&lt;p>记 $f(n)$ 为爬到 $n$ 阶的方法数，如果知道了 $f(n-1)$ 和 $f(n-2)$ ，两者相加就能得到 $f(n)$ ，即 $f(n) = f(n-1) + f(n-2)$ 。&lt;/p>
&lt;p>那又如何求 $f(n-1)$ 和 $f(n-2)$ 呢？令 $n = n-1$ ，就有 $f(n-1) = f(n-2) + f(n-3)$ ，可以发现，解决的手段就是递归。&lt;/p>
&lt;p>用到了递归，就需要确定递归边界。式子中最小为 $n-2$ ，那么有 $n-2 &amp;gt;= 0$ ，所以 $n_{min}=2$ ，即最后一次递归为 $f(2) = f(1) + f(0)$ 。
示例一还很贴心的解释了如何确定初始值 $f(2) = 1 + 1 = 2$ ，因此 $f(0) = 1; f(1) = 1$ 。&lt;/p>
&lt;p>如果你足够熟悉，会发现这个公式就是斐波那契数的通项公式： &lt;a class="link" href="https://leetcode.cn/problems/fibonacci-number/description/" target="_blank" rel="noopener"
>509. 斐波那契数 &lt;/a>。不同点仅有：
爬楼梯的初始值是 $f(0) = 1; f(1) = 1$ ;
斐波那契数的是 $f(0) = 0; f(1) = 1$ 。&lt;/p>
&lt;p>因此只需要修改下初始值就能解答此题：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">climbstairs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">fib&lt;/span> &lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fib&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nf">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>不过对于题目的数据范围： $1&amp;lt;=n&amp;lt;=45$ ，不做优化是会超时的，因为&lt;/p>
&lt;ul>
&lt;li>时间复杂度： $O(2^n)$ ，每次递归都需要再计算 $n-1$ 次&lt;/li>
&lt;li>空间复杂度： $O(n)$&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="递归优化使用缓存">递归优化：使用缓存&lt;/h2>
&lt;p>指数级别的时间复杂度，显然是不能满足题目要求的，那么该如何优化呢？&lt;/p>
&lt;p>举个例子，先画出 $f(5)$ 的递归的过程，这是一颗二叉树，便于观察它的规律：
&lt;img src="https://pic.leetcode.cn/1695282259-uwYWgR-image-20230921114920125.png"
loading="lazy"
alt="image-20230921114920125.png"
>&lt;/p>
&lt;p>查看这颗二叉树，可以看到 $f(5) = f(4) + f(3)$ ， $f(4) = f(3) + f(2)$ ，这两个地方都会去计算 $f(3)$ ，而这两次计算的结果都是一样的，那么可以在第一次计算的时候，把计算结果保存到 $cache$ 数组或哈希表中。下次计算时，可以直接返回 $cache$ 的结果。优化后的搜索树就变成这样：
&lt;img src="https://pic.leetcode.cn/1695282274-JBKBtF-image-20230921115057978.png"
loading="lazy"
alt="image-20230921115057978.png"
>
优化后的搜索树只有 $O(n)$ 个节点，因此时间复杂度也优化到了 $O(n)$ 。&lt;/p>
&lt;p>代码实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">climbStairs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">cache&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">fib&lt;/span> &lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fib&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">cache&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">cache&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">res&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nf">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">cache&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">res&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">res&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="将特例化的题目一般化">将特例化的题目一般化&lt;/h2>
&lt;p>对于这道经典题目，如果只是止步于此，那就太可惜了。完全可以稍微修改题目，用于如何归纳出递推公式。&lt;/p>
&lt;p>比如，原版是：&lt;/p>
&lt;blockquote>
&lt;p>每次你可以爬 $1$ 或 $2$ 个台阶&lt;/p>
&lt;/blockquote>
&lt;p>那如果修改成：&lt;/p>
&lt;blockquote>
&lt;p>每次你可以爬 $k1$ 或 $k2$ 个台阶&lt;/p>
&lt;/blockquote>
&lt;p>就得到了：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>爬楼梯2
假设你正在爬楼梯。需要 $n$ 阶你才能到达楼顶。&lt;/p>
&lt;p>给你两个&lt;strong>正整数&lt;/strong> $k1$ 和 $k2$ ，每次你可以爬 $k1$ 或 $k2$ 个台阶。你有多少种不同的方法可以爬到楼顶呢？&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">climbStairs2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">k1&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">k2&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>又或者再增加可以爬 $3$ 阶的选择， 这样就得到了：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>爬楼梯3&lt;/p>
&lt;p>假设你正在爬楼梯。需要 $n$ 阶你才能到达楼顶。&lt;/p>
&lt;p>每次你可以爬 $1$ 或 $2$ 或 $3$ 个台阶。你有多少种不同的方法可以爬到楼顶呢？&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">climbStairs3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>还可以把爬楼梯2和爬楼梯3的修改组合起来，这样就得到了：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>爬楼梯4&lt;/p>
&lt;p>假设你正在爬楼梯。需要 $n$ 阶你才能到达楼顶。&lt;/p>
&lt;p>给你一个&lt;strong>正整数&lt;/strong>数组 $nums$ ， 每次你可以爬 $nums[i]$ 个台阶。你有多少种不同的方法可以爬到楼顶呢？&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">climbStairs4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">nums&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>完成了 &lt;code>climbStairs4&lt;/code> 后，很容易发现：&lt;/p>
&lt;ul>
&lt;li>&lt;code>climbStairs2&lt;/code> 是 &lt;code>climbStairs4&lt;/code> 在 $len(nums) = 2$ 条件下的特例；&lt;/li>
&lt;li>&lt;code>climbStairs3&lt;/code> 是 &lt;code>climbStairs4 &lt;/code>在 $nums = [1,2,3]$ 条件下的特例。&lt;/li>
&lt;/ul>
&lt;p>至此，我们就把一道简单难度的题目拓展为一道中等难度的题目了。另外，这也可以称得上多题一解。&lt;/p>
&lt;hr>
&lt;h2 id="相关题目练习">相关题目练习&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://leetcode.cn/problems/combination-sum-iv/" target="_blank" rel="noopener"
>377. 组合总和 Ⅳ &lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://leetcode.cn/problems/count-ways-to-build-good-strings/" target="_blank" rel="noopener"
>2466. 统计构造好字符串的方案数&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://leetcode.cn/problems/unique-paths/" target="_blank" rel="noopener"
>62. 不同路径&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://leetcode.cn/problems/unique-paths-ii/" target="_blank" rel="noopener"
>63. 不同路径 II&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://leetcode.cn/problems/unique-binary-search-trees/" target="_blank" rel="noopener"
>96. 不同的二叉搜索树&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>刚开始上手动态规划题目时，建议尽量&lt;strong>先使用记忆化搜索&lt;/strong>解题，&lt;strong>再翻译为递推&lt;/strong>，这也是一题多解的体现。&lt;/p>
&lt;p>递归搜索+缓存=记忆化搜索的内容，拷贝自灵神的视频讲解，视频里还着重讲解了如何将记忆化搜索翻译为递推，推荐观看：&lt;a class="link" href="https://www.bilibili.com/video/BV1%ef%bc%8a%ef%bc%8a%ef%bc%8a411K7oF/" target="_blank" rel="noopener"
>动态规划入门：从记忆化搜索到递推【基础算法精讲 17】&lt;/a>&lt;/p></description></item><item><title>为 git clone github 设置 HTTP 和 SSH 代理</title><link>https://niluan304.github.io/p/%E4%B8%BA-git-clone-github-%E8%AE%BE%E7%BD%AE-http-%E5%92%8C-ssh-%E4%BB%A3%E7%90%86/</link><pubDate>Tue, 14 Mar 2023 18:08:02 +0800</pubDate><guid>https://niluan304.github.io/p/%E4%B8%BA-git-clone-github-%E8%AE%BE%E7%BD%AE-http-%E5%92%8C-ssh-%E4%BB%A3%E7%90%86/</guid><description>&lt;p>在国内执行 &lt;code>git clone https://github.com/golang/go.git&lt;/code> 操作，又慢又不稳定，搜索后发现可以使用代理这个问题。&lt;/p>
&lt;h2 id="准备工作">准备工作&lt;/h2>
&lt;p>首先，你需要准备好代理工具，一般的代理工具都有 &lt;code>Sock5&lt;/code> 和 &lt;code>HTTP&lt;/code> 两种代理方式。&lt;/p>
&lt;p>常见的代理软件使用的端口有：&lt;code>7890&lt;/code>, &lt;code>1080&lt;/code>，下文的 &lt;code>{port}&lt;/code> 参数都需要修改为对应的端口号。&lt;/p>
&lt;p>笔者会按照 &lt;code>Windows&lt;/code> 和 类 &lt;code>Unix&lt;/code> 系统介绍为 &lt;code>git&lt;/code> 设置代理的方法，由于相似处很多，请按需查看。&lt;/p>
&lt;h2 id="windows-下">&lt;code>Windows&lt;/code> 下&lt;/h2>
&lt;h3 id="为-http-协议设置代理">为 &lt;code>HTTP&lt;/code> 协议设置代理&lt;/h3>
&lt;p>在 GitHub上，通过第一种方式克隆仓库，这里走的就是 &lt;code>HTTP&lt;/code> 协议，修改起来也很简单：&lt;/p>
&lt;h4 id="命令行设置">命令行设置&lt;/h4>
&lt;ol>
&lt;li>通过代理软件 &lt;code>HTTP&lt;/code> 的端口
在终端中执行以下命令：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># {port} 修改为代理软件的端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global https.https://github.com.proxy https://127.0.0.1:&lt;span class="o">{&lt;/span>port&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>通过代理软件 &lt;code>Sock5&lt;/code> 的端口
在终端中执行以下命令：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># {port} 修改为代理软件的端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global https.https://github.com.proxy socks5://127.0.0.1:&lt;span class="o">{&lt;/span>port&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以发现，两者的命令极其相似，格式都为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git config --global https.https://github.com.proxy &lt;span class="o">{&lt;/span>protocol&lt;span class="o">}&lt;/span>://&lt;span class="o">{&lt;/span>ip&lt;span class="o">}&lt;/span>:&lt;span class="o">{&lt;/span>port&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>所以，凭个人喜好使用就好。&lt;/p>
&lt;p>另外，如果代理软件并不在本地运行，那么就将 &lt;code>127.0.0.1&lt;/code> 修改为代理软件服务器的 &lt;code>ip&lt;/code>（需要有访问权限）。&lt;/p>
&lt;h4 id="修改-gitconfig-文件">修改 &lt;code>.gitconfig&lt;/code> 文件&lt;/h4>
&lt;p>如果不喜欢在命令行中操作，也可以直接修改 &lt;code>C:/Users/${your username}/.gitconfig&lt;/code> 文件，在文件末尾添加以下内容：&lt;/p>
&lt;ol>
&lt;li>通过代理软件 &lt;code>HTTP&lt;/code> 的端口&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>https &lt;span class="s2">&amp;#34;https://github.com&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># {port} 修改为代理软件的端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">proxy&lt;/span> &lt;span class="o">=&lt;/span> https://127.0.0.1:&lt;span class="o">{&lt;/span>port&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>通过代理软件 &lt;code>Sock5&lt;/code> 的端口&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>http &lt;span class="s2">&amp;#34;https://github.com&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># {port} 修改为代理软件的端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">proxy&lt;/span> &lt;span class="o">=&lt;/span> socks5://127.0.0.1:&lt;span class="o">{&lt;/span>port&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="取消代理">取消代理&lt;/h4>
&lt;p>通过命令行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git config --global --unset https.https://github.com.proxy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以修改 &lt;code>C:/Users/${your username}/.gitconfig&lt;/code> 文件，删除或注释 &lt;code>[https &amp;quot;https://github.com&amp;quot;]&lt;/code> 区域的内容。&lt;/p>
&lt;h3 id="为-ssh-协议设置代理">为 &lt;code>SSH&lt;/code> 协议设置代理&lt;/h3>
&lt;p>在 GitHub上，通过第二种方式克隆仓库，走的就是 &lt;code>SSH&lt;/code> 协议：&lt;/p>
&lt;h4 id="修改-sshconfig-文件">修改 &lt;code>.ssh/config&lt;/code> 文件&lt;/h4>
&lt;p>找到 &lt;code>~/.ssh&lt;/code> 目录下的 &lt;code>config&lt;/code> 文件（如果没有找到这个文件，那么新建即可）。&lt;/p>
&lt;ol>
&lt;li>通过代理软件 &lt;code>HTTP&lt;/code> 的端口
&lt;code>config&lt;/code> 文件末尾添加以下内容：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Host github.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Hostname ssh.github.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># git 在 window 下使用的代理软件为 connect&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># -H为HTTP协议， -S指Socks 5协议&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># {port} 修改为代理软件的端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ProxyCommand connect -H 127.0.0.1:&lt;span class="o">{&lt;/span>port&lt;span class="o">}&lt;/span> %h %p
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 服务对应端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Port &lt;span class="m">443&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>通过代理软件 &lt;code>Sock5&lt;/code> 的端口
&lt;code>config&lt;/code> 文件末尾添加以下内容：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Host github.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Hostname ssh.github.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># git 在 window 下使用的代理软件为 connect&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># -H为HTTP协议， -S指Socks 5协议&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># {port} 修改为代理软件的端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ProxyCommand connect -S 127.0.0.1:&lt;span class="o">{&lt;/span>port&lt;span class="o">}&lt;/span> %h %p
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 服务对应端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Port &lt;span class="m">443&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="验证">验证&lt;/h4>
&lt;p>先打开 &lt;code>git bash&lt;/code> ，然后执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ssh -T git@github.com&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果类似：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -T git@github.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Hi niluan304! You&lt;span class="err">&amp;#39;&lt;/span>ve successfully authenticated, but GitHub does not provide shell access.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="类-unix-系统">类 &lt;code>Unix&lt;/code> 系统&lt;/h2>
&lt;h3 id="为-http-协议设置代理-1">为 &lt;code>HTTP&lt;/code> 协议设置代理&lt;/h3>
&lt;p>在 GitHub上，通过第一种方式克隆仓库，这里走的就是 &lt;code>HTTP&lt;/code> 协议，修改起来也很简单：&lt;/p>
&lt;h4 id="命令行设置-1">命令行设置&lt;/h4>
&lt;ol>
&lt;li>通过代理软件 &lt;code>HTTP&lt;/code> 的端口
在终端中执行以下命令：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># {port} 修改为代理软件的端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global https.https://github.com.proxy https://127.0.0.1:&lt;span class="o">{&lt;/span>port&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>通过代理软件 &lt;code>Sock5&lt;/code> 的端口
在终端中执行以下命令：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># {port} 修改为代理软件的端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global https.https://github.com.proxy socks5://127.0.0.1:&lt;span class="o">{&lt;/span>port&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以发现，两者的命令极其相似，格式都为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git config --global https.https://github.com.proxy &lt;span class="o">{&lt;/span>protocol&lt;span class="o">}&lt;/span>://&lt;span class="o">{&lt;/span>ip&lt;span class="o">}&lt;/span>:&lt;span class="o">{&lt;/span>port&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>所以，凭个人喜好使用就好。&lt;/p>
&lt;p>另外，如果代理软件并不在本地运行，那么就将 &lt;code>127.0.0.1&lt;/code> 修改为代理软件服务器的 &lt;code>ip&lt;/code>（需要有访问权限）。&lt;/p>
&lt;h4 id="修改-gitconfig-文件-1">修改 &lt;code>.gitconfig&lt;/code> 文件&lt;/h4>
&lt;p>如果不喜欢在命令行中操作，也可以直接修改 &lt;code>~/.gitconfig&lt;/code> 文件，在文件末尾添加以下内容：&lt;/p>
&lt;ol>
&lt;li>通过代理软件 &lt;code>HTTP&lt;/code> 的端口&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>https &lt;span class="s2">&amp;#34;https://github.com&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># {port} 修改为代理软件的端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">proxy&lt;/span> &lt;span class="o">=&lt;/span> https://127.0.0.1:&lt;span class="o">{&lt;/span>port&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>通过代理软件 &lt;code>Sock5&lt;/code> 的端口&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>http &lt;span class="s2">&amp;#34;https://github.com&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># {port} 修改为代理软件的端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">proxy&lt;/span> &lt;span class="o">=&lt;/span> socks5://127.0.0.1:&lt;span class="o">{&lt;/span>port&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="取消代理-1">取消代理&lt;/h4>
&lt;p>通过命令行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git config --global --unset https.https://github.com.proxy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以修改 &lt;code>~/.gitconfig&lt;/code> 文件，删除或注释 &lt;code>[https &amp;quot;https://github.com&amp;quot;]&lt;/code> 区域的内容。&lt;/p>
&lt;h3 id="为-ssh-协议设置代理-1">为 &lt;code>SSH&lt;/code> 协议设置代理&lt;/h3>
&lt;p>在 GitHub上，通过第二种方式克隆仓库，走的就是 &lt;code>SSH&lt;/code> 协议：&lt;/p>
&lt;h4 id="修改-sshconfig-文件-1">修改 &lt;code>.ssh/config&lt;/code> 文件&lt;/h4>
&lt;p>找到 &lt;code>~/.ssh&lt;/code> 目录下的 &lt;code>config&lt;/code> 文件（如果没有找到这个文件，那么新建即可）。&lt;/p>
&lt;ol>
&lt;li>通过代理软件 &lt;code>HTTP&lt;/code> 的端口
&lt;code>config&lt;/code> 文件末尾添加以下内容：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Host github.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Hostname ssh.github.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># git 在 Linux 和 Mac 下使用的代理软件为 netcat，简称nc。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># -X 5 指代理协议Socks 5， -X 4 指代理协议Socks 4， -X connect指代理协议Socks HTTP&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ProxyCommand nc -v -X 127.0.0.1:xxxx %h %p
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 服务对应端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Port &lt;span class="m">443&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>通过代理软件 &lt;code>Sock5&lt;/code> 的端口
&lt;code>config&lt;/code> 文件末尾添加以下内容：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Host github.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Hostname ssh.github.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># git 在 Linux 和 Mac 下使用的代理软件为 netcat，简称nc。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># -X 5 指代理协议Socks 5， -X 4 指代理协议Socks 4， -X connect指代理协议Socks HTTP&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ProxyCommand nc -v -X &lt;span class="m">5&lt;/span> 127.0.0.1:xxxx %h %p
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 服务对应端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Port &lt;span class="m">443&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="验证-1">验证&lt;/h4>
&lt;p>先打开 &lt;code>git bash&lt;/code> ，然后执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ssh -T git@github.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果类似：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -T git@github.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Hi niluan304! You&lt;span class="err">&amp;#39;&lt;/span>ve successfully authenticated, but GitHub does not provide shell access.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果遇到错误，可以删除 &lt;code>.ssh&lt;/code> 目录中 &lt;code>known_hosts&lt;/code> 文件后重试。&lt;/p></description></item><item><title>sort.Slice 不适合部分排序</title><link>https://niluan304.github.io/p/sort.slice-%E4%B8%8D%E9%80%82%E5%90%88%E9%83%A8%E5%88%86%E6%8E%92%E5%BA%8F/</link><pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate><guid>https://niluan304.github.io/p/sort.slice-%E4%B8%8D%E9%80%82%E5%90%88%E9%83%A8%E5%88%86%E6%8E%92%E5%BA%8F/</guid><description>&lt;img src="https://niluan304.github.io/p/sort.slice-%E4%B8%8D%E9%80%82%E5%90%88%E9%83%A8%E5%88%86%E6%8E%92%E5%BA%8F/Feng_2024-03-12_10-13-25.png" alt="Featured image of post sort.Slice 不适合部分排序" />&lt;p>使用 &lt;code>slices.Sort&lt;/code> 和 &lt;code>slices.SortFunc&lt;/code> 避免 &lt;code>sort.Slices&lt;/code> 的坑&lt;/p>
&lt;h2 id="sortslices-介绍">sort.Slices 介绍&lt;/h2>
&lt;p>&lt;code>sort.Slices&lt;/code> 是go 于1.18 版本新增的排序函数，签名如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">Slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="nx">any&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">less&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用起来非常简单：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">type&lt;/span> &lt;span class="nx">Student&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Name&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Age&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">students&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">Student&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Gopher&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Age&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">14&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Carol&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Age&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Alice&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Age&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Age&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Dave&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Age&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// sort by Age first, Name second
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">sort&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">students&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">students&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">students&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Age&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Age&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Age&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Age&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">student&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">students&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d %s\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">student&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Age&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">student&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Output:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 10 Alice
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 10 Carol
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 12 Dave
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 14 Gopher
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 15 Bob
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="闭包的坑">闭包的坑&lt;/h2>
&lt;p>上面的代码中，甚至进行了多字段排序。但如果我们只需要部分排序，代码又该怎么写呢？&lt;/p>
&lt;p>这样对吗？&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">SortAfter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">p&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 从p开始排序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">sort&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">:],&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>咋一看没什么问题，跑下测试用例吧：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">nums&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">tests&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">p&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">want&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">want&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">}},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">want&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">}},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">want&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">}},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tt&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">tests&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">got&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">slices&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Clone&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 拷贝原始数据，用于测试
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">SortAfter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">got&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">DeepEqual&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">got&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">want&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;when p: %v ,want: %v, but got: %v\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">want&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">got&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Output:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// when p: 1 ,want: [2 1 3 4 5 6 7], but got: [2 3 5 6 7 4 1]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// when p: 3 ,want: [2 3 1 4 5 6 7], but got: [2 3 1 5 6 4 7]
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为什么 p = 1,3 时不对，p = 2 时又是对的呢？
因为 sort.Slices 接收到的参数是 &lt;code>nums[p:]&lt;/code>，&lt;code>less&lt;/code> 闭包里的参数 &lt;code>i, j&lt;/code> 是在 &lt;code>nums[p:]&lt;/code> 的位置，如果直接比较 &lt;code>nums[i]&lt;/code> 和&lt;code>nums[j]&lt;/code>，那就忽略了 &lt;code>p&lt;/code> 偏移的影响，所以实际要比较的元素其实是 &lt;code>nums[i+p]&lt;/code> 和 &lt;code>nums[j+p]&lt;/code>，那么修复后的函数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">SortAfter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">p&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 从p开始排序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">sort&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">:],&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 这里传入的slice不再是完整的nums，而是nums[p:]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用-slicessort-优化">使用 slices.Sort 优化&lt;/h2>
&lt;p>手动修正偏移量，可以避免部分排序这个坑一时，但日后依旧有可能因为思维惯性而导致再次踩坑。具体实现也很别扭，也不方便修改。&lt;/p>
&lt;p>好在 go 在 1.21 版本新增了了 &lt;code>slices&lt;/code> 这个泛型库，里面包含了很多切片的通用操作，其中的 &lt;code>slices.Sort&lt;/code> 和 &lt;code>slices.SortFunc&lt;/code> 函数就可以避免上面的坑。&lt;/p>
&lt;p>这两个函数的签名：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nx">Sort&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">S&lt;/span> &lt;span class="err">~&lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="nx">E&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">E&lt;/span> &lt;span class="nx">cmp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Ordered&lt;/span>&lt;span class="p">](&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="nx">S&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nx">SortFunc&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">S&lt;/span> &lt;span class="err">~&lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="nx">E&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">E&lt;/span> &lt;span class="nx">any&lt;/span>&lt;span class="p">](&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="nx">S&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">cmp&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="nx">E&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用方法也很简单，直接传入要排序的部分，如果调用 &lt;code>slices.Sort&lt;/code>，还可以省去用手写 &lt;code>less&lt;/code> 闭包函数。
最重要的是，按照直觉使用这两个函数就可以避免 &lt;code>sort.Slices&lt;/code> 在部分排序时的坑：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">nums&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">tests&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">p&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">want&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">want&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">}},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">want&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">}},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">want&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">}},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">want&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">}},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tt&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">tests&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">got&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">slices&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Clone&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 拷贝原始数据，用于测试
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">slices&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">got&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">tt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">:])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">DeepEqual&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">got&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">want&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;when p: %v ,want: %v, but got: %v\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">want&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">got&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而使用 &lt;code>sort.SortFunc&lt;/code>，搭配 go 1.22 新增的泛型函数 &lt;code>cmp.Or&lt;/code>，可以更轻松的实现多字段排序，这段代码来自 &lt;a class="link" href="https://github.com/golang/go/blob/78755f6b8c5f18b0014e9dcac383898047ff14fe/src/cmp/cmp_test.go#L144-L177" target="_blank" rel="noopener"
>go1.22 标准库 &lt;code>cmp/cmp_test.go&lt;/code>&lt;/a>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">type&lt;/span> &lt;span class="nx">Order&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Product&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Customer&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Price&lt;/span> &lt;span class="kt">float64&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">orders&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">Order&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;alice&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.00&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;bar&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.00&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;baz&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;carol&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">4.00&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;alice&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">2.00&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;bar&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;carol&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.00&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">4.00&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Sort by customer first, product second, and last by higher price
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">slices&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SortFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">orders&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="nx">Order&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">cmp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Or&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">cmp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Compare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Customer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Customer&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">cmp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Compare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Product&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Product&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">cmp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Compare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Price&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Price&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">order&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">orders&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s %s %.2f\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">order&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Product&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">order&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Customer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">order&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Price&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Output:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// foo alice 2.00
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// foo alice 1.00
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// bar bob 3.00
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// foo bob 4.00
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// bar carol 1.00
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// baz carol 4.00
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 &lt;a class="link" href="https://github.com/golang/go/blob/78755f6b8c5f18b0014e9dcac383898047ff14fe/src/cmp/cmp.go#L61-L71" target="_blank" rel="noopener"
>&lt;code>cmp.Or&lt;/code> 的源码&lt;/a> 非常简单，只是用于找出切片中第一个非零的元素：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Or returns the first of its arguments that is not equal to the zero value.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// If no argument is non-zero, it returns the zero value.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nx">Or&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span> &lt;span class="nx">comparable&lt;/span>&lt;span class="p">](&lt;/span>&lt;span class="nx">vals&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">T&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">zero&lt;/span> &lt;span class="nx">T&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">val&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">vals&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">val&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nx">zero&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">val&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">zero&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，这样写 &lt;code>less&lt;/code> 函数，比手写多个 &lt;code>if&lt;/code> 优雅太多了。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.jianshu.com/p/b634b629db03" target="_blank" rel="noopener"
>golang sort.Slice踩坑记录 - 简书&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Wsl 使用笔记</title><link>https://niluan304.github.io/p/wsl-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</link><pubDate>Fri, 10 Feb 2023 10:28:36 +0800</pubDate><guid>https://niluan304.github.io/p/wsl-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</guid><description>&lt;h2 id="wsl-常用命令">&lt;code>wsl&lt;/code> 常用命令&lt;/h2>
&lt;h3 id="重启-wsl">重启 &lt;code>wsl&lt;/code>&lt;/h3>
&lt;p>尝试重启 &lt;code>wsl&lt;/code>，使用命令 &lt;code>wsl --shuntdown&lt;/code> 或其他命令，终端被挂起，无反应。&lt;/p>
&lt;p>解决办法：&lt;code>kill LxssManager&lt;/code>&lt;/p>
&lt;ol>
&lt;li>找到 &lt;code>svchost.exe&lt;/code> 进程的 &lt;code>pid&lt;/code>, 然后在「任务管理器/详细信息」里结束这个进程&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cmd" data-lang="cmd">&lt;span class="line">&lt;span class="cl">&lt;span class="k">echo&lt;/span> 寻找 `pid` 的指令：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tasklist /svc /fi &lt;span class="s2">&amp;#34;imagename eq svchost.exe&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> findstr LxssManager
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>&lt;code>PowerShell7&lt;/code> 里 &lt;code>kill LxssManager&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cmd" data-lang="cmd">&lt;span class="line">&lt;span class="cl">&lt;span class="k">echo&lt;/span> 在 `PowerShell7` 里运行（可能需要管理员启动）：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Stop-Process -Id $(Get-CimInstance -ClassName Win32_Service -Filter &lt;span class="s2">&amp;#34;Name=&amp;#39;LxssManager&amp;#39;&amp;#34;&lt;/span>).ProcessId -Force
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装-docker">安装 &lt;code>docker&lt;/code>&lt;/h2>
&lt;p>最简单的办法，大概是安装 &lt;code>Docker Desktop&lt;/code>，笔者使用了一段时间，似乎有兼容性问题（可能和笔者同时使用 Hyper-V 安卓模拟器有关系），于是又更换为 &lt;code>Linux&lt;/code> 版本的 &lt;code>docker&lt;/code>。&lt;/p>
&lt;p>直接运行官方的脚本，即可完成安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">curl -fsSL https://get.docker.com -o get-docker.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo sh get-docker.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo service docker start
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是笔者的机器安装过 &lt;code>Docker Desktop&lt;/code>，运行 &lt;code>service docker start&lt;/code> 后显示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>经过排查，发现还需要清理 &lt;code>Docker Desktop&lt;/code> 相关的配置。安装过 &lt;code>Docker Desktop&lt;/code>，所以 &lt;code>docker&lt;/code> 的配置文件 &lt;code>/root/.docker/config.json&lt;/code> 含有这个配置项：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;credsStore&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;desktop.exe&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>docker&lt;/code> 会因为配置了 &lt;code>&amp;quot;credsStore&amp;quot;&lt;/code> 字段去运行 &lt;code>&amp;quot;desktop.exe&amp;quot;&lt;/code>，而这个程序就是 &lt;code>Docker Desktpo&lt;/code>，才导致 &lt;code>docker&lt;/code> 无法启动。&lt;/p>
&lt;p>解决办法：&lt;/p>
&lt;ul>
&lt;li>删除 &lt;code>docker&lt;/code> 配置文件里的 &lt;code>&amp;quot;credsStore&amp;quot; &lt;/code> 字段。&lt;/li>
&lt;li>如果里面的配置不重要，也可以直接删除这个文件：&lt;code>rm /root/.docker/config.json&lt;/code>。&lt;/li>
&lt;/ul></description></item><item><title>Archives</title><link>https://niluan304.github.io/archives/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://niluan304.github.io/archives/</guid><description/></item><item><title/><link>https://niluan304.github.io/solutions/0x3f/discuss/2022-%E4%B8%8A%E5%8D%8A%E5%B9%B4%E5%91%A8%E8%B5%9B%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://niluan304.github.io/solutions/0x3f/discuss/2022-%E4%B8%8A%E5%8D%8A%E5%B9%B4%E5%91%A8%E8%B5%9B%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/</guid><description>&lt;p>我从上半年的周赛中精选了部分题目，分类整理后得到了下面的表格（按题号排序），供各位练习/复习时参考。&lt;/p>
&lt;p>另外我更新了表中一部分题解，完善了多种解法（例如 &lt;a class="link" href="https://leetcode.cn/problems/escape-the-spreading-fire/solution/er-fen-bfspythonjavacgo-by-endlesscheng-ypp1/" target="_blank" rel="noopener"
>2258. 逃离火灾&lt;/a> 添加了不用二分的线性做法），且所有题解均包含 Python/Java/C++/Go 四种语言。&lt;/p>
&lt;h2 id="思维题">思维题&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>题解&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-collisions-on-a-road/" target="_blank" rel="noopener"
>2211. 统计道路上的碰撞次数&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-collisions-on-a-road/solution/jie-lun-ti-san-xing-gao-ding-by-endlessc-bvnw/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>1581&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 脑筋急转弯 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/encrypt-and-decrypt-strings/" target="_blank" rel="noopener"
>2227. 加密解密字符串&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/encrypt-and-decrypt-strings/solution/by-endlesscheng-sm8h/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>1944&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 逆向思维 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-score-of-a-node-sequence/" target="_blank" rel="noopener"
>2242. 节点序列的最大得分&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-score-of-a-node-sequence/solution/by-endlesscheng-dt8h/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2304&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 有技巧的枚举 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/naming-a-company/" target="_blank" rel="noopener"
>2306. 公司命名&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/naming-a-company/solution/by-endlesscheng-ruz8/" target="_blank" rel="noopener"
>题解&lt;/a> | &lt;a class="link" href="https://www.bilibili.com/video/BV1aT41157bh?t=14m10s" target="_blank" rel="noopener"
>视频&lt;/a>&lt;/td>
&lt;td>2305&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 分类讨论 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-xor-after-operations/" target="_blank" rel="noopener"
>2317. 操作后的最大异或和&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-xor-after-operations/solution/yi-bu-bu-tis-by-endlesscheng-89kw/" target="_blank" rel="noopener"
>题解&lt;/a> | &lt;a class="link" href="https://www.bilibili.com/video/BV143411w7Wx?t=6m14s" target="_blank" rel="noopener"
>视频&lt;/a>&lt;/td>
&lt;td>1678&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 位运算 &lt;/font>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="贪心">贪心&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>题解&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/earliest-possible-day-of-full-bloom/" target="_blank" rel="noopener"
>2136. 全部开花的最早一天&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/earliest-possible-day-of-full-bloom/solution/tan-xin-ji-qi-zheng-ming-by-endlesscheng-hfwe/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2033&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 邻项交换法 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-running-time-of-n-computers/" target="_blank" rel="noopener"
>2141. 同时运行 N 台电脑的最长时间&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-running-time-of-n-computers/solution/liang-chong-jie-fa-er-fen-da-an-pai-xu-t-grd8/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2265&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 贪心 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-total-beauty-of-the-gardens/" target="_blank" rel="noopener"
>2234. 花园的最大总美丽值&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-total-beauty-of-the-gardens/solution/by-endlesscheng-10i7/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2561&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 贪心 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/longest-binary-subsequence-less-than-or-equal-to-k/" target="_blank" rel="noopener"
>2311. 小于等于 K 的最长二进制子序列&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/longest-binary-subsequence-less-than-or-equal-to-k/solution/fen-lei-tao-lun-tan-xin-by-endlesscheng-vnlx/" target="_blank" rel="noopener"
>题解&lt;/a> | &lt;a class="link" href="https://www.bilibili.com/video/BV1CW4y1k7B3?t=14m56s" target="_blank" rel="noopener"
>视频&lt;/a>&lt;/td>
&lt;td>1839&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 贪心 &lt;/font>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="双指针">双指针&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>题解&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-white-tiles-covered-by-a-carpet/" target="_blank" rel="noopener"
>2271. 毯子覆盖的最多白色砖块数&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-white-tiles-covered-by-a-carpet/solution/by-endlesscheng-kdy9/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2021&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 双指针 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-subarrays-with-score-less-than-k/" target="_blank" rel="noopener"
>2302. 统计得分小于 K 的子数组数目&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-subarrays-with-score-less-than-k/solution/by-endlesscheng-b120/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>1808&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 双指针 &lt;/font>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="二分">二分&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>题解&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-running-time-of-n-computers/" target="_blank" rel="noopener"
>2141. 同时运行 N 台电脑的最长时间&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-running-time-of-n-computers/solution/liang-chong-jie-fa-er-fen-da-an-pai-xu-t-grd8/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2265&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 二分答案 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/number-of-flowers-in-full-bloom/" target="_blank" rel="noopener"
>2251. 花期内花的数目&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/number-of-flowers-in-full-bloom/solution/chai-fen-pythonjavacgo-by-endlesscheng-wz35/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2022&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 转换 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/escape-the-spreading-fire/" target="_blank" rel="noopener"
>2258. 逃离火灾&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/escape-the-spreading-fire/solution/er-fen-bfspythonjavacgo-by-endlesscheng-ypp1/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2346&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 二分答案 &lt;/font>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="数学">数学&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>题解&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-array-pairs-divisible-by-k/" target="_blank" rel="noopener"
>2183. 统计可以被 K 整除的下标对数目&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-array-pairs-divisible-by-k/solution/tong-ji-yin-zi-chu-xian-ci-shu-by-endles-t5k8/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2246&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 数论 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-trailing-zeros-in-a-cornered-path/" target="_blank" rel="noopener"
>2245. 转角路径的乘积中最多能有几个尾随零&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-trailing-zeros-in-a-cornered-path/solution/by-endlesscheng-7z5a/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2036&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 数论、前缀和 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/sum-of-total-strength-of-wizards/" target="_blank" rel="noopener"
>2281. 巫师的总力量和&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/sum-of-total-strength-of-wizards/solution/dan-diao-zhan-qian-zhui-he-de-qian-zhui-d9nki/" target="_blank" rel="noopener"
>题解&lt;/a> | &lt;a class="link" href="https://www.bilibili.com/video/BV1RY4y157nW?t=17m0s" target="_blank" rel="noopener"
>视频&lt;/a>&lt;/td>
&lt;td>2621&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 和式变形、前缀和 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/sum-of-numbers-with-units-digit-k/" target="_blank" rel="noopener"
>2310. 个位数字为 K 的整数之和&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/sum-of-numbers-with-units-digit-k/solution/mei-ju-da-an-by-endlesscheng-zh75/" target="_blank" rel="noopener"
>题解&lt;/a> | &lt;a class="link" href="https://www.bilibili.com/video/BV1CW4y1k7B3?t=7m11s" target="_blank" rel="noopener"
>视频&lt;/a>&lt;/td>
&lt;td>1558&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 同余 &lt;/font>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="动态规划">动态规划&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>题解&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/solving-questions-with-brainpower/" target="_blank" rel="noopener"
>2140. 解决智力问题&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/solving-questions-with-brainpower/solution/dao-xu-dp-by-endlesscheng-2qkc/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>1709&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 线性 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-time-to-remove-all-cars-containing-illegal-goods/" target="_blank" rel="noopener"
>2167. 移除所有载有违禁货物车厢所需的最少时间&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-time-to-remove-all-cars-containing-illegal-goods/solution/qian-hou-zhui-fen-jie-dp-by-endlesscheng-6u1b/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2219&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 线性 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-and-sum-of-array/" target="_blank" rel="noopener"
>2172. 数组的最大与和&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-and-sum-of-array/solution/zhuang-tai-ya-suo-dp-by-endlesscheng-5eqn/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2392&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 状压 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-time-to-finish-the-race/" target="_blank" rel="noopener"
>2188. 完成比赛的最少时间&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-time-to-finish-the-race/solution/jie-he-xing-zhi-qiao-miao-dp-by-endlessc-b963/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2315&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 线性 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-white-tiles-after-covering-with-carpets/" target="_blank" rel="noopener"
>2209. 用地毯覆盖后的最少白色砖块&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-white-tiles-after-covering-with-carpets/solution/by-endlesscheng-pa3v/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2105&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 线性 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-value-of-k-coins-from-piles/" target="_blank" rel="noopener"
>2218. 从栈中取出 K 个硬币的最大面值和&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-value-of-k-coins-from-piles/solution/zhuan-hua-cheng-fen-zu-bei-bao-pythongoc-3xnk/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2157&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 分组背包 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/longest-path-with-different-adjacent-characters/" target="_blank" rel="noopener"
>2246. 相邻字符不同的最长路径&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/longest-path-with-different-adjacent-characters/solution/by-endlesscheng-92fw/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2126&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 树形 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/total-appeal-of-a-string/" target="_blank" rel="noopener"
>2262. 字符串的总引力&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/total-appeal-of-a-string/solution/by-endlesscheng-g405/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2033&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 线性 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-number-of-texts/" target="_blank" rel="noopener"
>2266. 统计打字方案数&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-number-of-texts/solution/by-endlesscheng-gj8f/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>1856&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 线性 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/substring-with-largest-variance/" target="_blank" rel="noopener"
>2272. 最大波动的子字符串&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/substring-with-largest-variance/solution/by-endlesscheng-5775/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2515&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 线性 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/fair-distribution-of-cookies/" target="_blank" rel="noopener"
>2305. 公平分发饼干&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/fair-distribution-of-cookies/solution/by-endlesscheng-80ao/" target="_blank" rel="noopener"
>题解&lt;/a> | &lt;a class="link" href="https://www.bilibili.com/video/BV1aT41157bh" target="_blank" rel="noopener"
>视频&lt;/a>&lt;/td>
&lt;td>1886&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 子集状压 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/selling-pieces-of-wood/" target="_blank" rel="noopener"
>2312. 卖木头块&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/selling-pieces-of-wood/solution/by-endlesscheng-mrmd/" target="_blank" rel="noopener"
>题解&lt;/a> | &lt;a class="link" href="https://www.bilibili.com/video/BV1CW4y1k7B3?t=23m21s" target="_blank" rel="noopener"
>视频&lt;/a>&lt;/td>
&lt;td>2363&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 线性 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/number-of-distinct-roll-sequences/" target="_blank" rel="noopener"
>2318. 不同骰子序列的数目&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/number-of-distinct-roll-sequences/solution/by-endlesscheng-tgkn/" target="_blank" rel="noopener"
>题解&lt;/a> | &lt;a class="link" href="https://www.bilibili.com/video/BV143411w7Wx?t=11m33s" target="_blank" rel="noopener"
>视频&lt;/a>&lt;/td>
&lt;td>2090&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 线性 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-number-of-ways-to-place-houses/" target="_blank" rel="noopener"
>2320. 统计放置房子的方式数&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-number-of-ways-to-place-houses/solution/d-by-endlesscheng-gybx/" target="_blank" rel="noopener"
>题解&lt;/a> | &lt;a class="link" href="https://www.bilibili.com/video/BV1pW4y1r7xs" target="_blank" rel="noopener"
>视频&lt;/a>&lt;/td>
&lt;td>1607&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 线性 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-score-of-spliced-array/" target="_blank" rel="noopener"
>2321. 拼接数组的最大分数&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-score-of-spliced-array/solution/by-endlesscheng-fm8l/" target="_blank" rel="noopener"
>题解&lt;/a> | &lt;a class="link" href="https://www.bilibili.com/video/BV1pW4y1r7xs?t=8m18s" target="_blank" rel="noopener"
>视频&lt;/a>&lt;/td>
&lt;td>1790&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 线性 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/EJvmW4/" target="_blank" rel="noopener"
>LCP 53. 守护太空城&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/EJvmW4/solution/by-endlesscheng-pk2q/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>-&lt;/td>
&lt;td>&lt;font style="background:white" color="white">子集状压 DP&lt;/font>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="数据结构">数据结构&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>题解&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/groups-of-strings/" target="_blank" rel="noopener"
>2157. 字符串分组&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/groups-of-strings/solution/bing-cha-ji-wei-yun-suan-by-endlesscheng-uejd/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2499&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 哈希并查集 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-difference-in-sums-after-removal-of-elements/" target="_blank" rel="noopener"
>2163. 删除元素后和的最小差值&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-difference-in-sums-after-removal-of-elements/solution/qian-zhui-zui-xiao-he-hou-zhui-zui-da-he-yz3d/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2225&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 堆 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-good-triplets-in-an-array/" target="_blank" rel="noopener"
>2179. 统计数组中好三元组数目&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-good-triplets-in-an-array/solution/deng-jie-zhuan-huan-shu-zhuang-shu-zu-by-xmyd/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2272&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 树状数组 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/replace-non-coprime-numbers-in-array/" target="_blank" rel="noopener"
>2197. 替换数组中的非互质数&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/replace-non-coprime-numbers-in-array/solution/li-yong-zhan-mo-ni-gocpythonjava-by-endl-bnbv/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2057&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 栈 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/longest-substring-of-one-repeating-character/" target="_blank" rel="noopener"
>2213. 由单个字符重复的最长子字符串&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/longest-substring-of-one-repeating-character/solution/by-endlesscheng-qpbw/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2628&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 线段树 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-integers-in-intervals/" target="_blank" rel="noopener"
>2276. 统计区间中的整数数目&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-integers-in-intervals/solution/by-endlesscheng-clk2/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2222&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 珂朵莉树、动态开点线段树 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/sum-of-total-strength-of-wizards/" target="_blank" rel="noopener"
>2281. 巫师的总力量和&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/sum-of-total-strength-of-wizards/solution/dan-diao-zhan-qian-zhui-he-de-qian-zhui-d9nki/" target="_blank" rel="noopener"
>题解&lt;/a> | &lt;a class="link" href="https://www.bilibili.com/video/BV1RY4y157nW?t=17m0s" target="_blank" rel="noopener"
>视频&lt;/a>&lt;/td>
&lt;td>2621&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 单调栈 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/booking-concert-tickets-in-groups/" target="_blank" rel="noopener"
>2286. 以组为单位订音乐会的门票&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/booking-concert-tickets-in-groups/solution/by-endlesscheng-okcu/" target="_blank" rel="noopener"
>题解&lt;/a> | &lt;a class="link" href="https://www.bilibili.com/video/BV18t4y1p736?t=8m7s" target="_blank" rel="noopener"
>视频&lt;/a>&lt;/td>
&lt;td>2470&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 线段树二分 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/steps-to-make-array-non-decreasing/" target="_blank" rel="noopener"
>2289. 使数组按非递减顺序排列&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/steps-to-make-array-non-decreasing/solution/by-endlesscheng-s2yc/" target="_blank" rel="noopener"
>题解&lt;/a> | &lt;a class="link" href="https://www.bilibili.com/video/BV1iF41157dG" target="_blank" rel="noopener"
>视频&lt;/a>&lt;/td>
&lt;td>2481&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 单调栈 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/design-a-text-editor/" target="_blank" rel="noopener"
>2296. 设计一个文本编辑器&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/design-a-text-editor/solution/lian-biao-mo-ni-pythonjavacgo-by-endless-egw4/" target="_blank" rel="noopener"
>题解&lt;/a> | &lt;a class="link" href="https://www.bilibili.com/video/BV1w34y1L7yu/?t=6m29s" target="_blank" rel="noopener"
>视频&lt;/a>&lt;/td>
&lt;td>1911&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 对顶栈 &lt;/font>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="图论">图论&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>题解&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-employees-to-be-invited-to-a-meeting/" target="_blank" rel="noopener"
>2127. 参加会议的最多员工数&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-employees-to-be-invited-to-a-meeting/solution/nei-xiang-ji-huan-shu-tuo-bu-pai-xu-fen-c1i1b/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2449&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 基环树、拓扑排序 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/k-highest-ranked-items-within-a-price-range/" target="_blank" rel="noopener"
>2146. 价格范围内最高排名的 K 样物品&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/k-highest-ranked-items-within-a-price-range/solution/fen-ceng-bfs-de-tong-shi-pai-xu-by-endle-ash6/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>1836&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> BFS &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-and-sum-of-array/" target="_blank" rel="noopener"
>2172. 数组的最大与和&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-and-sum-of-array/solution/zhuang-tai-ya-suo-dp-by-endlesscheng-5eqn/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2392&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 最小费用最大流 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-weighted-subgraph-with-the-required-paths/" target="_blank" rel="noopener"
>2203. 得到要求路径的最小带权子图&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-weighted-subgraph-with-the-required-paths/solution/by-endlesscheng-2mxm/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2364&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 单源最短路 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/escape-the-spreading-fire/" target="_blank" rel="noopener"
>2258. 逃离火灾&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/escape-the-spreading-fire/solution/er-fen-bfspythonjavacgo-by-endlesscheng-ypp1/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2346&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 多源 BFS &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/check-if-there-is-a-valid-parentheses-string-path/" target="_blank" rel="noopener"
>2267. 检查是否有合法括号字符串路径&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/check-if-there-is-a-valid-parentheses-string-path/solution/tian-jia-zhuang-tai-hou-dfscpythonjavago-f287/" target="_blank" rel="noopener"
>题解&lt;/a>&lt;/td>
&lt;td>2084&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> DFS &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-obstacle-removal-to-reach-corner/" target="_blank" rel="noopener"
>2290. 到达角落需要移除障碍物的最小数目&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-obstacle-removal-to-reach-corner/solution/0-1-bfs-by-endlesscheng-4pjt/" target="_blank" rel="noopener"
>题解&lt;/a> | &lt;a class="link" href="https://www.bilibili.com/video/BV1iF41157dG?t=21m10s" target="_blank" rel="noopener"
>视频&lt;/a>&lt;/td>
&lt;td>2137&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 0-1 BFS &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-score-after-removals-on-a-tree/" target="_blank" rel="noopener"
>2322. 从树中删除边的最小分数&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-score-after-removals-on-a-tree/solution/dfs-shi-jian-chuo-chu-li-shu-shang-wen-t-x1kk/" target="_blank" rel="noopener"
>题解&lt;/a> | &lt;a class="link" href="https://www.bilibili.com/video/BV1pW4y1r7xs?t=19m37s" target="_blank" rel="noopener"
>视频&lt;/a>&lt;/td>
&lt;td>2391&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> DFS 时间戳 &lt;/font>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>相比往年的周赛，今年上半年，动态规划题略有减少，数据结构题有所增多，去年的数据结构题中经常遇到并查集，今年见到了不少线段树的题目。&lt;/p>
&lt;p>不过动态规划依旧是周赛常客，对于目标周赛四题的选手，我仍然推荐将动态规划作为平时练习中的重点。&lt;/p>
&lt;p>最后欢迎点赞评论，祝各位周周四题！&lt;/p></description></item><item><title/><link>https://niluan304.github.io/solutions/0x3f/discuss/2022-%E4%B8%8B%E5%8D%8A%E5%B9%B4%E5%91%A8%E8%B5%9B%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://niluan304.github.io/solutions/0x3f/discuss/2022-%E4%B8%8B%E5%8D%8A%E5%B9%B4%E5%91%A8%E8%B5%9B%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/</guid><description>&lt;p>前篇：&lt;a class="link" href="https://leetcode.cn/circle/discuss/G0n5iY/" target="_blank" rel="noopener"
>2022 上半年周赛题目总结&lt;/a>&lt;/p>
&lt;p>周赛包含大量算法套路题，我从下半年的 $39$ 场周赛，共计 $156$ 道题目中，整理了一些「能学到技巧」的题目，供各位练习。&lt;/p>
&lt;p>每道题目我都写了题解，以及对应的视频讲解，可以在每道题的题解区看到。&lt;/p>
&lt;p>我把周赛题目分为以下七类：&lt;/p>
&lt;ol>
&lt;li>模拟&lt;/li>
&lt;li>技巧&lt;/li>
&lt;li>动态规划&lt;/li>
&lt;li>数据结构&lt;/li>
&lt;li>图论&lt;/li>
&lt;li>数学&lt;/li>
&lt;li>思维题&lt;/li>
&lt;/ol>
&lt;h1 id="1-模拟">1. 模拟&lt;/h1>
&lt;p>模拟指按照题目要求实现相应代码，一般暴力即可通过。&lt;/p>
&lt;p>某些模拟题会有点复杂，这也能很好地&lt;strong>锻炼实现代码的能力&lt;/strong>。&lt;/p>
&lt;blockquote>
&lt;p>注 1：常见于周赛第一题（约占 $90%$）、第二题（约占 $40%$）和第三题（约占 $19%$）。&lt;/p>
&lt;p>注 2：表格已按照难度排序（下同）。&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>难度&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/number-of-valid-clock-times/" target="_blank" rel="noopener"
>2437. 有效时间的数目&lt;/a>&lt;/td>
&lt;td>1427&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/design-a-number-container-system/" target="_blank" rel="noopener"
>2349. 设计数字容器系统&lt;/a>&lt;/td>
&lt;td>1540&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/most-popular-video-creator/" target="_blank" rel="noopener"
>2456. 最流行的视频创作者&lt;/a>&lt;/td>
&lt;td>1548&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-days-spent-together/" target="_blank" rel="noopener"
>2409. 统计共同度过的日子数&lt;/a>&lt;/td>
&lt;td>1562&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/reward-top-k-students/" target="_blank" rel="noopener"
>2512. 奖励最顶尖的 K 名学生&lt;/a>&lt;/td>
&lt;td>1636&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/design-memory-allocator/" target="_blank" rel="noopener"
>2502. 设计内存分配器&lt;/a>&lt;/td>
&lt;td>1746&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/design-a-food-rating-system/" target="_blank" rel="noopener"
>2353. 设计食物评分系统&lt;/a>&lt;/td>
&lt;td>1782&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="2-技巧">2. 技巧&lt;/h1>
&lt;p>技巧指一些比较套路的算法，包括双指针、滑动窗口、二分（主要指二分答案）、前缀和、差分、前后缀分解、位运算、二进制枚举、贡献法等。&lt;strong>这些技巧相对容易掌握，想在周赛上分的同学可以优先学习这些内容。&lt;/strong>&lt;/p>
&lt;p>顺带一提，我一般把窗口大小不固定的叫做双指针，窗口大小固定的叫做滑动窗口。&lt;/p>
&lt;p>为了不剧透，这些题目我就不分类了，而是写在备注中。&lt;/p>
&lt;blockquote>
&lt;p>注：常见于周赛第二题（约占 $18%$）和第三题（约占 $27%$）。&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-penalty-for-a-shop/" target="_blank" rel="noopener"
>2483. 商店的最少代价&lt;/a>&lt;/td>
&lt;td>1495&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 前后缀分解 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-sum-of-distinct-subarrays-with-length-k/" target="_blank" rel="noopener"
>2461. 长度为 K 子数组中的最大和&lt;/a>&lt;/td>
&lt;td>1553&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 非常标准的滑动窗口题 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/bitwise-xor-of-all-pairings/" target="_blank" rel="noopener"
>2425. 所有数对的异或和&lt;/a>&lt;/td>
&lt;td>1622&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 贡献法 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/find-all-good-indices/description/" target="_blank" rel="noopener"
>2420. 找到所有好下标&lt;/a>&lt;/td>
&lt;td>1695&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 前后缀分解 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-rows-covered-by-columns/" target="_blank" rel="noopener"
>2397. 被列覆盖的最多行数&lt;/a>&lt;/td>
&lt;td>1719&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 二进制枚举 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/longest-nice-subarray/" target="_blank" rel="noopener"
>2401. 最长优雅子数组&lt;/a>&lt;/td>
&lt;td>1750&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 位运算与双指针结合的好题（暴力也可以过） &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/shifting-letters-ii/" target="_blank" rel="noopener"
>2381. 字母移位 II&lt;/a>&lt;/td>
&lt;td>1793&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 差分 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/take-k-of-each-character-from-left-and-right/" target="_blank" rel="noopener"
>2516. 每种字符至少取 K 个&lt;/a>&lt;/td>
&lt;td>1947&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 绝大多数双指针题目都是算子数组/子串，而这题是算的前缀+后缀，如此变形后要怎么做呢？ &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimize-maximum-of-array/" target="_blank" rel="noopener"
>2439. 最小化数组中的最大值&lt;/a>&lt;/td>
&lt;td>1965&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 二分答案之最小化最大值（看到最小和最大就要往二分答案上想） &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-tastiness-of-candy-basket/" target="_blank" rel="noopener"
>2517. 礼盒的最大甜蜜度&lt;/a>&lt;/td>
&lt;td>2020&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 二分答案 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-subarrays-with-fixed-bounds/" target="_blank" rel="noopener"
>2444. 统计定界子数组的数目&lt;/a>&lt;/td>
&lt;td>2093&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 较为复杂的多指针题目，你能写出简洁的代码吗？ &lt;/font>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="3-动态规划">3. 动态规划&lt;/h1>
&lt;p>周赛常客。&lt;/p>
&lt;p>如果你很难想出状态转移方程，以及递推的顺序，可以先从记忆化搜索开始思考，然后转换到递推上。具体请看 &lt;a class="link" href="https://www.bilibili.com/video/BV1Xj411K7oF/" target="_blank" rel="noopener"
>动态规划入门：从记忆化搜索到递推【基础算法精讲 17】&lt;/a>。&lt;/p>
&lt;p>记忆化搜索像是自动挡，无需思考递推顺序，边界条件也容易确认；而递推像是手动挡，需要仔细确认递推的顺序以及初始值。但记忆化搜索并不是万能的，某些题目递推的写法可以结合数据结构等来优化时间复杂度。&lt;/p>
&lt;blockquote>
&lt;p>注：常见于周赛第四题（约占 $28%$），偶见于第三题（约占 $9%$）。&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-ways-to-build-good-strings/" target="_blank" rel="noopener"
>2466. 统计构造好字符串的方案数&lt;/a>&lt;/td>
&lt;td>1694&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 本质上是 &lt;a class="link" href="https://leetcode.cn/problems/climbing-stairs/" target="_blank" rel="noopener"
>70. 爬楼梯&lt;/a> &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/number-of-ways-to-reach-a-position-after-exactly-k-steps/" target="_blank" rel="noopener"
>2400. 恰好移动 k 步到达某一位置的方法数目&lt;/a>&lt;/td>
&lt;td>1751&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 也有数学解 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/check-if-there-is-a-valid-partition-for-the-array/" target="_blank" rel="noopener"
>2369. 检查数组是否存在有效划分&lt;/a>&lt;/td>
&lt;td>1780&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/longest-ideal-subsequence/" target="_blank" rel="noopener"
>2370. 最长理想子序列&lt;/a>&lt;/td>
&lt;td>1835&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/number-of-people-aware-of-a-secret/" target="_blank" rel="noopener"
>2327. 知道秘密的人数&lt;/a>&lt;/td>
&lt;td>1894&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/paths-in-matrix-whose-sum-is-divisible-by-k/" target="_blank" rel="noopener"
>2435. 矩阵中和能被 K 整除的路径&lt;/a>&lt;/td>
&lt;td>1952&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/number-of-increasing-paths-in-a-grid/" target="_blank" rel="noopener"
>2328. 网格图中递增路径的数目&lt;/a>&lt;/td>
&lt;td>2001&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-number-of-non-overlapping-palindrome-substrings/" target="_blank" rel="noopener"
>2472. 不重叠回文子字符串的最大数目&lt;/a>&lt;/td>
&lt;td>2013&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 中心扩展法 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-deletions-on-a-string/" target="_blank" rel="noopener"
>2430. 对字母串可执行的最大删除数&lt;/a>&lt;/td>
&lt;td>2102&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-special-integers/" target="_blank" rel="noopener"
>2376. 统计特殊整数&lt;/a>&lt;/td>
&lt;td>2120&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 数位 DP，这类题目非常套路，掌握模板后就可以随便秒了 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/longest-increasing-subsequence-ii/" target="_blank" rel="noopener"
>2407. 最长递增子序列 II&lt;/a>&lt;/td>
&lt;td>2280&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 线段树优化 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/height-of-binary-tree-after-subtree-removal-queries/" target="_blank" rel="noopener"
>2458. 移除子树后的二叉树高度&lt;/a>&lt;/td>
&lt;td>2299&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 树形 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/number-of-beautiful-partitions/" target="_blank" rel="noopener"
>2478. 完美分割的方案数&lt;/a>&lt;/td>
&lt;td>2344&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/number-of-great-partitions/" target="_blank" rel="noopener"
>2518. 好分区的数目&lt;/a>&lt;/td>
&lt;td>2414&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 01 背包，需要一些思维转换 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-total-distance-traveled/" target="_blank" rel="noopener"
>2463. 最小移动总距离&lt;/a>&lt;/td>
&lt;td>2454&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> &lt;/font>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="4-数据结构">4. 数据结构&lt;/h1>
&lt;p>包括堆（优先队列）、单调栈、单调队列、字典树、并查集、树状数组、线段树等。&lt;/p>
&lt;p>学习这些只是开始，能否灵活运用才是关键。&lt;/p>
&lt;blockquote>
&lt;p>注：常见于周赛第四题（约占 $21%$）。&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/sum-of-prefix-scores-of-strings/" target="_blank" rel="noopener"
>2416. 字符串的前缀分数和&lt;/a>&lt;/td>
&lt;td>1725&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 字典树 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/total-cost-to-hire-k-workers/" target="_blank" rel="noopener"
>2462. 雇佣 K 位工人的总代价&lt;/a>&lt;/td>
&lt;td>1764&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 最小堆 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-number-of-robots-within-budget/" target="_blank" rel="noopener"
>2398. 预算内的最多机器人数目&lt;/a>&lt;/td>
&lt;td>1917&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 双指针+单调队列 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/number-of-pairs-satisfying-inequality/" target="_blank" rel="noopener"
>2426. 满足不等式的数对数目&lt;/a>&lt;/td>
&lt;td>2030&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 式子变形+逆序对模型+树状数组 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/meeting-rooms-iii/" target="_blank" rel="noopener"
>2402. 会议室 III&lt;/a>&lt;/td>
&lt;td>2093&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 最小堆 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-segment-sum-after-removals/" target="_blank" rel="noopener"
>2382. 删除操作后的最大子段和&lt;/a>&lt;/td>
&lt;td>2136&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 并查集 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/next-greater-element-iv/" target="_blank" rel="noopener"
>2454. 下一个更大元素 IV&lt;/a>&lt;/td>
&lt;td>2175&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 单调栈 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-number-of-points-from-grid-queries/" target="_blank" rel="noopener"
>2503. 矩阵查询可获得的最大分数&lt;/a>&lt;/td>
&lt;td>2196&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 离线询问+并查集/最小堆 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/subarray-with-elements-greater-than-varying-threshold/" target="_blank" rel="noopener"
>2334. 元素值大于变化阈值的子数组&lt;/a>&lt;/td>
&lt;td>2381&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 并查集/单调栈 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/number-of-good-paths/" target="_blank" rel="noopener"
>2421. 好路径的数目&lt;/a>&lt;/td>
&lt;td>2445&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 并查集 &lt;/font>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="5-图论">5. 图论&lt;/h1>
&lt;p>周赛中的图论题目比较少，除了下面选的 DFS、BFS、拓扑排序、基环树、二分图判定等，还有最短路、DFS 时间戳等（这些可以在上半年的周赛题目中学到）。&lt;/p>
&lt;blockquote>
&lt;p>注：偶见于周赛第三题（约占 $10%$）和第四题（约占 $13%$）。&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/reachable-nodes-with-restrictions/" target="_blank" rel="noopener"
>2368. 受限条件下可到达节点的数目&lt;/a>&lt;/td>
&lt;td>1477&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> DFS/BFS 典型题 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/amount-of-time-for-binary-tree-to-be-infected/" target="_blank" rel="noopener"
>2385. 感染二叉树需要的总时间&lt;/a>&lt;/td>
&lt;td>1711&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> DFS+BFS &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/find-closest-node-to-given-two-nodes/" target="_blank" rel="noopener"
>2359. 找到离给定两个节点最近的节点&lt;/a>&lt;/td>
&lt;td>1715&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/longest-cycle-in-a-graph/" target="_blank" rel="noopener"
>2360. 图中的最长环&lt;/a>&lt;/td>
&lt;td>1897&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 内向基环树+时间戳技巧 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/cycle-length-queries-in-a-tree/" target="_blank" rel="noopener"
>2509. 查询树中环的长度&lt;/a>&lt;/td>
&lt;td>1948&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 最近公共祖先 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/build-a-matrix-with-conditions/" target="_blank" rel="noopener"
>2392. 给定条件下构造矩阵&lt;/a>&lt;/td>
&lt;td>1961&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 拓扑排序 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/most-profitable-path-in-a-tree/" target="_blank" rel="noopener"
>2467. 树上最大得分和路径&lt;/a>&lt;/td>
&lt;td>2053&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/divide-nodes-into-the-maximum-number-of-groups/" target="_blank" rel="noopener"
>2493. 将节点分成尽可能多的组&lt;/a>&lt;/td>
&lt;td>2415&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 二分图判定（可选）+BFS &lt;/font>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="6-数学">6. 数学&lt;/h1>
&lt;p>主要考察的是数论（质数、GCD、LCM、逆元等）和组合数学。&lt;/p>
&lt;blockquote>
&lt;p>注：占比很少，不足 $10%$。&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/smallest-value-after-replacing-with-sum-of-prime-factors/" target="_blank" rel="noopener"
>2507. 使用质因数之和替换后可以取到的最小值&lt;/a>&lt;/td>
&lt;td>1500&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 质因数分解 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/number-of-subarrays-with-lcm-equal-to-k/" target="_blank" rel="noopener"
>2470. 最小公倍数为 K 的子数组数目&lt;/a>&lt;/td>
&lt;td>1560&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> LCM &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/number-of-subarrays-with-gcd-equal-to-k/" target="_blank" rel="noopener"
>2447. 最大公因数等于 K 的子数组数目&lt;/a>&lt;/td>
&lt;td>1603&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> GCD &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-deletions-to-make-array-divisible/" target="_blank" rel="noopener"
>2344. 使数组可以被整除的最少删除次数&lt;/a>&lt;/td>
&lt;td>1641&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> GCD &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/destroy-sequential-targets/" target="_blank" rel="noopener"
>2453. 摧毁一系列目标&lt;/a>&lt;/td>
&lt;td>1762&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 同余 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-anagrams/" target="_blank" rel="noopener"
>2514. 统计同位异构字符串数目&lt;/a>&lt;/td>
&lt;td>2069&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 组合数学+逆元 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimize-the-maximum-of-two-arrays/" target="_blank" rel="noopener"
>2513. 最小化两个数组中的最大值&lt;/a>&lt;/td>
&lt;td>2302&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 二分答案+LCM+容斥 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-the-number-of-ideal-arrays/" target="_blank" rel="noopener"
>2338. 统计理想数组的数目&lt;/a>&lt;/td>
&lt;td>2615&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 质因数分解+放球问题 &lt;/font>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="7-思维题">7. 思维题&lt;/h1>
&lt;p>包含贪心、脑筋急转弯等，挑选一些比较有趣的题目。&lt;/p>
&lt;blockquote>
&lt;p>注：常见于周赛第二题（约占 $21%$）、第三题（约占 $26%$）和第四题（约占 $17%$）。&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-hours-of-training-to-win-a-competition/" target="_blank" rel="noopener"
>2383. 赢得比赛需要的最少训练时长&lt;/a>&lt;/td>
&lt;td>1413&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 上帝视角下的贪心 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/longest-subarray-with-maximum-bitwise-and/" target="_blank" rel="noopener"
>2419. 按位与最大的最长子数组&lt;/a>&lt;/td>
&lt;td>1496&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 脑筋急转弯 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/move-pieces-to-obtain-a-string/" target="_blank" rel="noopener"
>2337. 移动片段得到字符串&lt;/a>&lt;/td>
&lt;td>1693&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 脑筋急转弯 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/frog-jump-ii/" target="_blank" rel="noopener"
>2498. 青蛙过河 II&lt;/a>&lt;/td>
&lt;td>1759&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/the-latest-time-to-catch-a-bus/" target="_blank" rel="noopener"
>2332. 坐上公交的最晚时间&lt;/a>&lt;/td>
&lt;td>1841&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 脑筋急转弯 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/shortest-impossible-sequence-of-rolls/" target="_blank" rel="noopener"
>2350. 不可能得到的最短骰子序列&lt;/a>&lt;/td>
&lt;td>1961&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-subarrays-with-median-k/" target="_blank" rel="noopener"
>2488. 统计中位数为 K 的子数组&lt;/a>&lt;/td>
&lt;td>1999&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 等价转换 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-cost-to-make-array-equal/" target="_blank" rel="noopener"
>2448. 使数组相等的最小开销&lt;/a>&lt;/td>
&lt;td>2005&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 转换成中位数贪心 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-money-required-before-transactions/" target="_blank" rel="noopener"
>2412. 完成所有交易的初始最少钱数&lt;/a>&lt;/td>
&lt;td>2092&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-total-cost-to-make-arrays-unequal/" target="_blank" rel="noopener"
>2499. 让数组不相等的最小总代价&lt;/a>&lt;/td>
&lt;td>2633&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/find-the-k-sum-of-an-array/" target="_blank" rel="noopener"
>2386. 找出数组的第 K 大和&lt;/a>&lt;/td>
&lt;td>2648&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> &lt;/font>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="其他算法套路每日一题题解精选">其他算法套路（每日一题题解精选）&lt;/h1>
&lt;ul>
&lt;li>&lt;a class="link" href="https://leetcode.cn/problems/shortest-subarray-with-sum-at-least-k/solutions/1925036/liang-zhang-tu-miao-dong-dan-diao-dui-li-9fvh/" target="_blank" rel="noopener"
>两张图秒懂单调队列&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://leetcode.cn/problems/sum-of-subarray-minimums/solutions/1930857/gong-xian-fa-dan-diao-zhan-san-chong-shi-gxa5/" target="_blank" rel="noopener"
>贡献法与单调栈&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://leetcode.cn/problems/maximum-profit-in-job-scheduling/solutions/1913089/dong-tai-gui-hua-er-fen-cha-zhao-you-hua-zkcg/" target="_blank" rel="noopener"
>一步步引导你思考动态规划&lt;/a>&lt;/li>
&lt;li>更多内容可以看 &lt;a class="link" href="https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md" target="_blank" rel="noopener"
>往期每日一题题解（按 tag 分类）&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="致谢">致谢&lt;/h1>
&lt;ul>
&lt;li>感谢 &lt;a class="link" href="https://niluan304.github.io/u/zerotrac2/" >@zerotrac2&lt;/a> 的 &lt;a class="link" href="https://zerotrac.github.io/leetcode_problem_rating/" target="_blank" rel="noopener"
>周赛难度分统计&lt;/a>。&lt;/li>
&lt;li>感谢 &lt;a class="link" href="https://niluan304.github.io/u/huxulm/" >@huxulm&lt;/a> 的 &lt;a class="link" href="https://huxulm.github.io/lc-rating/" target="_blank" rel="noopener"
>周赛难度分可视化&lt;/a>。&lt;/li>
&lt;li>感谢 &lt;a class="link" href="https://niluan304.github.io/u/runonline/" >@runonline&lt;/a> 的 &lt;a class="link" href="https://greasyfork.org/zh-CN/scripts/450890-leetcoderating-%E6%98%BE%E7%A4%BA%E5%8A%9B%E6%89%A3%E5%91%A8%E8%B5%9B%E9%9A%BE%E5%BA%A6%E5%88%86" target="_blank" rel="noopener"
>周赛难度分油猴脚本&lt;/a>。&lt;/li>
&lt;/ul>
&lt;h1 id="最后">最后&lt;/h1>
&lt;p>欢迎点赞~我在B站讲算法，欢迎大家关注 &lt;a class="link" href="space.bilibili.com/206214" >B站@灵茶山艾府&lt;/a>~&lt;/p></description></item><item><title/><link>https://niluan304.github.io/solutions/0x3f/discuss/2023-%E4%B8%8A%E5%8D%8A%E5%B9%B4%E5%91%A8%E8%B5%9B%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://niluan304.github.io/solutions/0x3f/discuss/2023-%E4%B8%8A%E5%8D%8A%E5%B9%B4%E5%91%A8%E8%B5%9B%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/</guid><description>&lt;p>上一期：&lt;a class="link" href="https://leetcode.cn/circle/discuss/WR1MJP/" target="_blank" rel="noopener"
>2022 下半年周赛题目总结&lt;/a>&lt;/p>
&lt;p>大家好，又到了半年一度的周赛总结时间！&lt;/p>
&lt;p>周赛包含大量算法套路题，我从上半年的 $39$ 场周赛，共计 $156$ 道题目中，精选了一些「能学到技巧」的题目，供各位练习。&lt;/p>
&lt;p>列出的题目已按照难度分排序，大家可以结合自己的薄弱之处针对练习。&lt;/p>
&lt;h2 id="一技巧类题目">一、技巧类题目&lt;/h2>
&lt;p>技巧指一些比较套路的算法，包括双指针、滑动窗口、二分答案、前缀和、差分、回溯、前后缀分解、二进制枚举、贡献法等。&lt;/p>
&lt;p>&lt;strong>这些技巧相对容易掌握，无论是求职面试还是周赛，都是经常考察的，可以优先学习这些内容。&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>注：常见于周赛第二题（约占 $20%$）和第三题（约占 $30%$）。&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/find-the-longest-semi-repetitive-substring/" target="_blank" rel="noopener"
>2730. 找到最长的半重复子字符串&lt;/a>&lt;/td>
&lt;td>1502&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 双指针 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/find-the-punishment-number-of-an-integer/" target="_blank" rel="noopener"
>2698. 求一个整数的惩罚数&lt;/a>&lt;/td>
&lt;td>1679&lt;/td>
&lt;td>&lt;font style="background:white" color="white">回溯 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-the-number-of-fair-pairs/" target="_blank" rel="noopener"
>2563. 统计公平数对的数目&lt;/a>&lt;/td>
&lt;td>1721&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 排序+二分查找 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/sliding-subarray-beauty/" target="_blank" rel="noopener"
>2653. 滑动子数组的美丽值&lt;/a>&lt;/td>
&lt;td>1785&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 滑动窗口 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/sum-of-matrix-after-queries/" target="_blank" rel="noopener"
>2718. 查询后矩阵的和&lt;/a>&lt;/td>
&lt;td>1769&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 倒序处理 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/find-the-maximum-number-of-marked-indices/" target="_blank" rel="noopener"
>2576. 求出最多标记下标&lt;/a>&lt;/td>
&lt;td>1843&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 二分答案/双指针 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-the-number-of-good-subarrays/" target="_blank" rel="noopener"
>2537. 统计好子数组的数目&lt;/a>&lt;/td>
&lt;td>1892&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 双指针 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-operations-to-make-all-array-elements-equal/" target="_blank" rel="noopener"
>2602. 使数组元素全部相等的最少操作次数&lt;/a>&lt;/td>
&lt;td>1903&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 排序+前缀和+二分查找 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-time-to-repair-cars/" target="_blank" rel="noopener"
>2594. 修车的最少时间&lt;/a>&lt;/td>
&lt;td>1915&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 二分答案 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/power-of-heroes/" target="_blank" rel="noopener"
>2681. 英雄的力量&lt;/a>&lt;/td>
&lt;td>2060&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 贡献法                     &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximize-win-from-two-segments/" target="_blank" rel="noopener"
>2555. 两个线段获得的最多奖品&lt;/a>&lt;/td>
&lt;td>2081&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 双指针 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/house-robber-iv/" target="_blank" rel="noopener"
>2560. 打家劫舍 IV&lt;/a>&lt;/td>
&lt;td>2081&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 二分答案+DP/贪心 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimize-the-maximum-difference-of-pairs/" target="_blank" rel="noopener"
>2616. 最小化数对的最大差值&lt;/a>&lt;/td>
&lt;td>2155&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 二分答案+贪心 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximize-the-minimum-powered-city/" target="_blank" rel="noopener"
>2528. 最大化城市的最小供电站数目&lt;/a>&lt;/td>
&lt;td>2236&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 二分答案+前缀和+差分+贪心 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/subsequence-with-the-minimum-score/" target="_blank" rel="noopener"
>2565. 最少得分子序列&lt;/a>&lt;/td>
&lt;td>2432&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 前后缀分解 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-increasing-quadruplets/" target="_blank" rel="noopener"
>2552. 统计上升四元组&lt;/a>&lt;/td>
&lt;td>2433&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 有技巧的枚举 &lt;/font>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="二动态规划">二、动态规划&lt;/h2>
&lt;p>周赛常客。&lt;/p>
&lt;p>如果你很难想出状态转移方程，以及递推的顺序，可以先从记忆化搜索开始思考，然后转换到递推上。具体请看 &lt;a class="link" href="https://www.bilibili.com/video/BV1Xj411K7oF/" target="_blank" rel="noopener"
>动态规划入门：从记忆化搜索到递推【基础算法精讲 17】&lt;/a>。&lt;/p>
&lt;p>记忆化搜索像是自动挡，无需思考递推顺序，边界条件也容易确认；而递推像是手动挡，需要仔细确认递推的顺序以及初始值。但记忆化搜索并不是万能的，某些题目递推的写法可以结合数据结构等来优化时间复杂度。&lt;/p>
&lt;blockquote>
&lt;p>注：常见于周赛第四题（约占 $25%$）。&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/find-the-substring-with-maximum-cost/" target="_blank" rel="noopener"
>2606. 找到最大开销的子字符串&lt;/a>&lt;/td>
&lt;td>1422&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 最大子数组和 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/extra-characters-in-a-string/" target="_blank" rel="noopener"
>2707. 字符串中的额外字符&lt;/a>&lt;/td>
&lt;td>1736&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 线性 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/number-of-ways-to-earn-points/" target="_blank" rel="noopener"
>2585. 获得分数的方法数&lt;/a>&lt;/td>
&lt;td>1910&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 背包 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-cost-to-split-an-array/" target="_blank" rel="noopener"
>2547. 拆分数组的最小代价&lt;/a>&lt;/td>
&lt;td>2020&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 划分型 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/the-number-of-beautiful-subsets/" target="_blank" rel="noopener"
>2597. 美丽子集的数目&lt;/a>&lt;/td>
&lt;td>2023&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 回溯/动态规划 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-number-of-possible-root-nodes/" target="_blank" rel="noopener"
>2581. 统计可能的树根数目&lt;/a>&lt;/td>
&lt;td>2228&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 换根 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimize-the-total-price-of-the-trips/" target="_blank" rel="noopener"
>2646. 最小化旅行的价格总和&lt;/a>&lt;/td>
&lt;td>2238&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 树形 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-of-integers/" target="_blank" rel="noopener"
>2719. 统计整数数目&lt;/a>&lt;/td>
&lt;td>2355&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 数位 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-strictly-increasing-cells-in-a-matrix/" target="_blank" rel="noopener"
>2713. 矩阵中严格递增的单元格数&lt;/a>&lt;/td>
&lt;td>2387&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> DP+优化 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/difference-between-maximum-and-minimum-price-sum/" target="_blank" rel="noopener"
>2538. 最大价值和与最小价值和的差值&lt;/a>&lt;/td>
&lt;td>2398&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 树形 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-the-number-of-square-free-subsets/" target="_blank" rel="noopener"
>2572. 无平方子集计数&lt;/a>&lt;/td>
&lt;td>2420&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 0-1背包/子集状压DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/painting-the-walls/" target="_blank" rel="noopener"
>2742. 给墙壁刷油漆&lt;/a>&lt;/td>
&lt;td>2425&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 线性DP/0-1背包 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-number-of-visited-cells-in-a-grid/" target="_blank" rel="noopener"
>2617. 网格图中最少访问的格子数&lt;/a>&lt;/td>
&lt;td>2581&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 线段树/单调栈优化DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="三图论">三、图论&lt;/h2>
&lt;p>包含 DFS、BFS、拓扑排序、最短路等。&lt;/p>
&lt;blockquote>
&lt;p>注：周赛第三题约占 $11%$，第四题约占 $16%$。&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/cousins-in-binary-tree-ii/" target="_blank" rel="noopener"
>2641. 二叉树的堂兄弟节点 II&lt;/a>&lt;/td>
&lt;td>1677&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> BFS &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-number-of-moves-in-a-grid/" target="_blank" rel="noopener"
>2684. 矩阵中移动的最大次数&lt;/a>&lt;/td>
&lt;td>1626&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> BFS &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-the-number-of-complete-components/" target="_blank" rel="noopener"
>2685. 统计完全连通分量的数量&lt;/a>&lt;/td>
&lt;td>1769&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> DFS &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/design-graph-with-shortest-path-calculator/" target="_blank" rel="noopener"
>2642. 设计可以求最短路径的图类&lt;/a>&lt;/td>
&lt;td>1811&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> Dijkstra/Floyd 模板 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/shortest-cycle-in-a-graph/" target="_blank" rel="noopener"
>2608. 图中的最短环&lt;/a>&lt;/td>
&lt;td>1904&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> BFS &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-cost-of-a-path-with-special-roads/" target="_blank" rel="noopener"
>2662. 前往目标的最小代价&lt;/a>&lt;/td>
&lt;td>2154&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> Dijkstra &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-time-to-visit-a-cell-in-a-grid/" target="_blank" rel="noopener"
>2577. 在网格图中访问一个格子的最少时间&lt;/a>&lt;/td>
&lt;td>2382&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> Dijkstra/二分答案+BFS &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/collect-coins-in-a-tree/" target="_blank" rel="noopener"
>2603. 收集树中金币&lt;/a>&lt;/td>
&lt;td>2712&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 拓扑排序 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/modify-graph-edge-weights/" target="_blank" rel="noopener"
>2699. 修改图中的边权&lt;/a>&lt;/td>
&lt;td>2874&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> Dijkstra &lt;/font>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="四数据结构">四、数据结构&lt;/h2>
&lt;p>包括堆（优先队列）、单调栈、并查集、树状数组、线段树等。&lt;/p>
&lt;p>学习这些只是开始，能否灵活运用才是关键。&lt;/p>
&lt;blockquote>
&lt;p>注：周赛第四题约占 $11%$。&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-subsequence-score/" target="_blank" rel="noopener"
>2542. 最大子序列的分数&lt;/a>&lt;/td>
&lt;td>2056&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 排序+最小堆 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/make-array-empty/" target="_blank" rel="noopener"
>2659. 将数组清空&lt;/a>&lt;/td>
&lt;td>2282&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 树状数组/转换 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/handling-sum-queries-after-update/" target="_blank" rel="noopener"
>2569. 更新数组后处理求和查询&lt;/a>&lt;/td>
&lt;td>2398&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> lazy 线段树 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-sum-queries/" target="_blank" rel="noopener"
>2736. 最大和查询&lt;/a>&lt;/td>
&lt;td>2533&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 离线+单调栈 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/time-to-cross-a-bridge/" target="_blank" rel="noopener"
>2532. 过桥的时间&lt;/a>&lt;/td>
&lt;td>2589&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 堆+复杂模拟 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-reverse-operations/" target="_blank" rel="noopener"
>2612. 最少翻转操作数&lt;/a>&lt;/td>
&lt;td>2824&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> BFS+平衡树/并查集 &lt;/font>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="五数学">五、数学&lt;/h2>
&lt;p>主要考察数论相关内容。&lt;/p>
&lt;blockquote>
&lt;p>注：周赛第二题约占 $14%$，第四题约占 $14%$。&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/distinct-prime-factors-of-product-of-array/" target="_blank" rel="noopener"
>2521. 数组乘积中的不同质因数数目&lt;/a>&lt;/td>
&lt;td>1413&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 质因数分解 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/closest-prime-numbers-in-range/" target="_blank" rel="noopener"
>2523. 范围内最接近的两个质数&lt;/a>&lt;/td>
&lt;td>1650&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 质数筛法 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/prime-subtraction-operation/" target="_blank" rel="noopener"
>2601. 质数减法运算&lt;/a>&lt;/td>
&lt;td>1779&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 质数筛法+二分查找 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/smallest-missing-non-negative-integer-after-operations/" target="_blank" rel="noopener"
>2598. 执行操作后的最大 MEX&lt;/a>&lt;/td>
&lt;td>1846&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 同余 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-number-of-operations-to-make-all-array-elements-equal-to-1/" target="_blank" rel="noopener"
>2654. 使数组所有元素变成 1 的最少操作次数&lt;/a>&lt;/td>
&lt;td>1929&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> GCD &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/make-k-subarray-sums-equal/" target="_blank" rel="noopener"
>2607. 使子数组元素和相等&lt;/a>&lt;/td>
&lt;td>2071&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 裴蜀定理+中位数贪心 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/split-the-array-to-make-coprime-products/" target="_blank" rel="noopener"
>2584. 分割数组使乘积互质&lt;/a>&lt;/td>
&lt;td>2159&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 质因数分解+跳跃游戏 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/check-if-point-is-reachable/" target="_blank" rel="noopener"
>2543. 判断一个点是否可以到达&lt;/a>&lt;/td>
&lt;td>2221&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> GCD &lt;/font>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="六思维题">六、思维题&lt;/h2>
&lt;p>包含贪心、位运算、脑筋急转弯、构造等，挑选一些比较有趣的题目。&lt;/p>
&lt;blockquote>
&lt;p>注：常见于周赛第二题（约占 $25%$）、第三题（约占 $35%$）和第四题（约占 $22%$）。&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/find-xor-beauty-of-array/" target="_blank" rel="noopener"
>2527. 查询数组 Xor 美丽值&lt;/a>&lt;/td>
&lt;td>1550&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 位运算化简 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/apply-bitwise-operations-to-make-strings-equal/" target="_blank" rel="noopener"
>2546. 执行逐位运算使字符串相等&lt;/a>&lt;/td>
&lt;td>1605&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 脑筋急转弯 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-operations-to-reduce-an-integer-to-0/" target="_blank" rel="noopener"
>2571. 将整数减少到零需要的最少操作数&lt;/a>&lt;/td>
&lt;td>1649&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 贪心/位运算 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-collisions-of-monkeys-on-a-polygon/" target="_blank" rel="noopener"
>2550. 猴子碰撞的方法数&lt;/a>&lt;/td>
&lt;td>1663&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 正难则反 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/mice-and-cheese/" target="_blank" rel="noopener"
>2611. 老鼠和奶酪&lt;/a>&lt;/td>
&lt;td>1663&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 贪心 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-the-number-of-beautiful-subarrays/" target="_blank" rel="noopener"
>2588. 统计美丽子数组数目&lt;/a>&lt;/td>
&lt;td>1697&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 转换+前缀异或和 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-impossible-or/" target="_blank" rel="noopener"
>2568. 最小无法得到的或值&lt;/a>&lt;/td>
&lt;td>1754&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 脑筋急转弯 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-cost-to-make-all-characters-equal/" target="_blank" rel="noopener"
>2712. 使所有字符相等的最小成本&lt;/a>&lt;/td>
&lt;td>1791&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 贪心 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-or/" target="_blank" rel="noopener"
>2680. 最大或值&lt;/a>&lt;/td>
&lt;td>1912&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 贪心+前后缀分解 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/movement-of-robots/" target="_blank" rel="noopener"
>2731. 移动机器人&lt;/a>&lt;/td>
&lt;td>1923&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 脑筋急转弯 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/substring-xor-queries/" target="_blank" rel="noopener"
>2564. 子字符串异或查询&lt;/a>&lt;/td>
&lt;td>1959&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 转换 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/rearranging-fruits/" target="_blank" rel="noopener"
>2561. 重排水果&lt;/a>&lt;/td>
&lt;td>2222&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 贪心 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/make-array-empty/" target="_blank" rel="noopener"
>2659. 将数组清空&lt;/a>&lt;/td>
&lt;td>2282&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 树状数组/转换 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/disconnect-path-in-a-binary-matrix-by-at-most-one-flip/" target="_blank" rel="noopener"
>2556. 二进制矩阵中翻转最多一次使路径不连通&lt;/a>&lt;/td>
&lt;td>2369&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 转换 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-time-to-complete-all-tasks/" target="_blank" rel="noopener"
>2589. 完成所有任务的最少时间&lt;/a>&lt;/td>
&lt;td>2380&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 贪心 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/find-the-string-with-lcp/" target="_blank" rel="noopener"
>2573. 找出对应 LCP 矩阵的字符串&lt;/a>&lt;/td>
&lt;td>2682&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 构造+DP验证 &lt;/font>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>相比去年，数据结构题变少了，但仍然有 &lt;a class="link" href="https://leetcode.cn/problems/time-to-cross-a-bridge/" target="_blank" rel="noopener"
>2532. 过桥的时间&lt;/a> 这道让人“印象深刻”的模拟题。&lt;/p>
&lt;p>思维题的比重增加不少（尤其是第三题中的），个人喜欢的题目是 &lt;a class="link" href="https://leetcode.cn/problems/minimum-impossible-or/" target="_blank" rel="noopener"
>2568. 最小无法得到的或值&lt;/a> 和 &lt;a class="link" href="https://leetcode.cn/problems/disconnect-path-in-a-binary-matrix-by-at-most-one-flip/" target="_blank" rel="noopener"
>2556. 二进制矩阵中翻转最多一次使路径不连通&lt;/a>。&lt;/p>
&lt;p>四五月出了不少图论题，尤其是最短路，可以针对练习下。&lt;/p>
&lt;h2 id="附">附&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.bilibili.com/video/BV1bP411c7oJ/" target="_blank" rel="noopener"
>基础算法精讲&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md" target="_blank" rel="noopener"
>每日一题题解精选&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="致谢">致谢&lt;/h2>
&lt;ul>
&lt;li>感谢 &lt;a class="link" href="https://niluan304.github.io/u/zerotrac2/" >@zerotrac2&lt;/a> 的 &lt;a class="link" href="https://zerotrac.github.io/leetcode_problem_rating/" target="_blank" rel="noopener"
>周赛难度分统计&lt;/a>。&lt;/li>
&lt;li>感谢 &lt;a class="link" href="https://niluan304.github.io/u/huxulm/" >@huxulm&lt;/a> 的 &lt;a class="link" href="https://huxulm.github.io/lc-rating/" target="_blank" rel="noopener"
>周赛难度分可视化&lt;/a>。&lt;/li>
&lt;li>感谢 &lt;a class="link" href="https://niluan304.github.io/u/runonline/" >@runonline&lt;/a> 的 &lt;a class="link" href="https://greasyfork.org/zh-CN/scripts/450890-leetcoderating-%E6%98%BE%E7%A4%BA%E5%8A%9B%E6%89%A3%E5%91%A8%E8%B5%9B%E9%9A%BE%E5%BA%A6%E5%88%86" target="_blank" rel="noopener"
>周赛难度分油猴脚本&lt;/a>。&lt;/li>
&lt;/ul></description></item><item><title/><link>https://niluan304.github.io/solutions/0x3f/discuss/2023-%E4%B8%8B%E5%8D%8A%E5%B9%B4%E5%91%A8%E8%B5%9B%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://niluan304.github.io/solutions/0x3f/discuss/2023-%E4%B8%8B%E5%8D%8A%E5%B9%B4%E5%91%A8%E8%B5%9B%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/</guid><description>&lt;p>上一期：&lt;a class="link" href="https://leetcode.cn/circle/discuss/v2RXSN/" target="_blank" rel="noopener"
>2023 上半年周赛题目总结&lt;/a>&lt;/p>
&lt;p>大家好，又到了半年一度的周赛总结时间！&lt;/p>
&lt;p>我从下半年的 $40$ 场周赛，共计 $160$ 道题目中，整理出了「能学到算法套路」的题目，大家可以针对练习。&lt;/p>
&lt;h2 id="一技巧类题目">一、技巧类题目&lt;/h2>
&lt;p>包含滑动窗口、二分答案等比较套路的算法。&lt;/p>
&lt;p>&lt;strong>这些技巧相对容易掌握，也是周赛常客，推荐优先训练。&lt;/strong>&lt;/p>
&lt;p>常见于周赛第二题（约占 $20%$）、第三题（约占 $33%$）和第四题（约占 $20%$）。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>知识点&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-complete-subarrays-in-an-array/" target="_blank" rel="noopener"
>2799. 统计完全子数组的数目&lt;/a>&lt;/td>
&lt;td>1398&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 滑动窗口 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/make-string-a-subsequence-using-cyclic-increments/" target="_blank" rel="noopener"
>2825. 循环增长使字符串子序列等于另一个字符串&lt;/a>&lt;/td>
&lt;td>1415&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 双指针 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/longest-even-odd-subarray-with-threshold/" target="_blank" rel="noopener"
>2760. 最长奇偶子数组&lt;/a>&lt;/td>
&lt;td>1420&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> &lt;font style="background:white" color="white"> 分组循环 &lt;/font> &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-sum-of-mountain-triplets-ii/" target="_blank" rel="noopener"
>2909. 元素和最小的山形三元组 II&lt;/a>&lt;/td>
&lt;td>1479&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> &lt;font style="background:white" color="white"> 前后缀分解 &lt;/font> &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/length-of-longest-subarray-with-at-most-k-frequency/" target="_blank" rel="noopener"
>2958. 最多 K 个重复元素的最长子数组&lt;/a>&lt;/td>
&lt;td>1535&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 滑动窗口 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-sum-of-almost-unique-subarray/" target="_blank" rel="noopener"
>2841. 几乎唯一子数组的最大和&lt;/a>&lt;/td>
&lt;td>1546&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 滑动窗口 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-value-of-an-ordered-triplet-ii/" target="_blank" rel="noopener"
>2874. 有序三元组中的最大值 II&lt;/a>&lt;/td>
&lt;td>1583&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 前后缀分解 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-beauty-of-an-array-after-applying-operation/" target="_blank" rel="noopener"
>2779. 数组的最大美丽值&lt;/a>&lt;/td>
&lt;td>1638&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 滑动窗口 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximize-area-of-square-hole-in-grid/" target="_blank" rel="noopener"
>2943. 最大化网格图中正方形空洞的面积&lt;/a>&lt;/td>
&lt;td>1677&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 分组循环 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-subarrays-where-max-element-appears-at-least-k-times/" target="_blank" rel="noopener"
>2962. 统计最大元素出现至少 K 次的子数组&lt;/a>&lt;/td>
&lt;td>1701&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 滑动窗口 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/find-indices-with-index-and-value-difference-ii/" target="_blank" rel="noopener"
>2905. 找出满足差值条件的下标 II&lt;/a>&lt;/td>
&lt;td>1764&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 双变量问题 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-size-subarray-in-infinite-array/" target="_blank" rel="noopener"
>2875. 无限数组的最短子数组&lt;/a>&lt;/td>
&lt;td>1914&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 滑动窗口 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/continuous-subarrays/" target="_blank" rel="noopener"
>2762. 不间断子数组&lt;/a>&lt;/td>
&lt;td>1940&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 滑动窗口 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/find-the-longest-equal-subarray/" target="_blank" rel="noopener"
>2831. 找出最长等值子数组&lt;/a>&lt;/td>
&lt;td>1976&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 滑动窗口 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-number-of-alloys/" target="_blank" rel="noopener"
>2861. 最大合金数&lt;/a>&lt;/td>
&lt;td>1981&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 二分答案 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/apply-operations-to-make-all-array-elements-equal-to-zero/" target="_blank" rel="noopener"
>2772. 使数组中的所有元素都等于零&lt;/a>&lt;/td>
&lt;td>2029&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 差分数组 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/make-lexicographically-smallest-array-by-swapping-elements/" target="_blank" rel="noopener"
>2948. 交换得到字典序最小的数组&lt;/a>&lt;/td>
&lt;td>2047&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 分组循环 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-of-interesting-subarrays/" target="_blank" rel="noopener"
>2845. 统计趣味子数组的数目&lt;/a>&lt;/td>
&lt;td>2073&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 哈希表 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/construct-product-matrix/" target="_blank" rel="noopener"
>2906. 构造乘积矩阵&lt;/a>&lt;/td>
&lt;td>2075&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 前后缀分解 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/length-of-the-longest-valid-substring/" target="_blank" rel="noopener"
>2781. 最长合法子字符串的长度&lt;/a>&lt;/td>
&lt;td>2204&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 滑动窗口 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-beautiful-substrings-ii/" target="_blank" rel="noopener"
>2949. 统计美丽子字符串 II&lt;/a>&lt;/td>
&lt;td>2445&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 前缀和、哈希表 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-complete-substrings/" target="_blank" rel="noopener"
>2953. 统计完全子字符串&lt;/a>&lt;/td>
&lt;td>2449&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 分组循环、滑动窗口 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-paths-that-can-form-a-palindrome-in-a-tree/" target="_blank" rel="noopener"
>2791. 树中可以形成回文的路径数&lt;/a>&lt;/td>
&lt;td>2677&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 哈希表、位运算 &lt;/font>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="相关文章">相关文章&lt;/h4>
&lt;ul>
&lt;li>&lt;a class="link" href="https://leetcode.cn/circle/discuss/0viNMK/" target="_blank" rel="noopener"
>【题单】滑动窗口（定长/不定长/多指针）&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://leetcode.cn/circle/discuss/SqopEo/" target="_blank" rel="noopener"
>【题单】二分算法（二分答案/最小化最大值/最大化最小值/第K小）&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://leetcode.cn/problems/longest-even-odd-subarray-with-threshold/solution/jiao-ni-yi-ci-xing-ba-dai-ma-xie-dui-on-zuspx/" target="_blank" rel="noopener"
>分组循环：教你一次性把代码写对&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://leetcode.cn/circle/discuss/FfMCgb/" target="_blank" rel="noopener"
>差分数组&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.bilibili.com/read/cv22332590/" target="_blank" rel="noopener"
>如何科学上分：利用难度分科学训练&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="二动态规划">二、动态规划&lt;/h2>
&lt;p>周赛常客。&lt;/p>
&lt;ul>
&lt;li>上半年有 $14$ 道，几乎只在第四题出现（占比 $24%$），第三题仅占 $8%$。&lt;/li>
&lt;li>下半年有 $26$ 道，第四题占比 $33%$，第三题占比增至 $30%$。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>注：线性 DP 是指，从数组前缀（后缀）转移到另一个前缀（后缀）的 DP。像最长递增子序列、最长公共子序列都属于这一类。&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>知识点&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-number-of-jumps-to-reach-the-last-index/" target="_blank" rel="noopener"
>2770. 达到末尾下标所需的最大跳跃次数&lt;/a>&lt;/td>
&lt;td>1533&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 线性 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/length-of-the-longest-subsequence-that-sums-to-target/" target="_blank" rel="noopener"
>2915. 和为目标值的最长子序列的长度&lt;/a>&lt;/td>
&lt;td>1659&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 0-1 背包 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/sorting-three-groups/" target="_blank" rel="noopener"
>2826. 将三个组排序&lt;/a>&lt;/td>
&lt;td>1721&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 状态机 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/visit-array-positions-to-maximize-score/" target="_blank" rel="noopener"
>2786. 访问数组中的位置使分数最大&lt;/a>&lt;/td>
&lt;td>1733&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 线性 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-number-of-coins-for-fruits/" target="_blank" rel="noopener"
>2944. 购买水果需要的最少金币数&lt;/a>&lt;/td>
&lt;td>1709&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 线性 DP/单调队列优化 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/longest-non-decreasing-subarray-from-two-arrays/" target="_blank" rel="noopener"
>2771. 构造最长非递减子数组&lt;/a>&lt;/td>
&lt;td>1792&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 线性 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/ways-to-express-an-integer-as-sum-of-powers/" target="_blank" rel="noopener"
>2787. 将一个数字表示成幂的和的方案数&lt;/a>&lt;/td>
&lt;td>1818&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 0-1 背包 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximize-the-profit-as-the-salesman/" target="_blank" rel="noopener"
>2830. 销售利润最大化&lt;/a>&lt;/td>
&lt;td>1851&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 线性 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/partition-string-into-minimum-beautiful-substrings/" target="_blank" rel="noopener"
>2767. 将字符串分割为最少的美丽子字符串&lt;/a>&lt;/td>
&lt;td>1865&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 划分型 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/longest-unequal-adjacent-groups-subsequence-ii/" target="_blank" rel="noopener"
>2901. 最长相邻不相等子序列 II&lt;/a>&lt;/td>
&lt;td>1899&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 子序列 DP 的思考套路 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-score-after-applying-operations-on-a-tree/" target="_blank" rel="noopener"
>2925. 在树上执行操作以后得到的最大分数&lt;/a>&lt;/td>
&lt;td>1940&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 树形 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-increment-operations-to-make-array-beautiful/" target="_blank" rel="noopener"
>2919. 使数组变美的最小增量运算数&lt;/a>&lt;/td>
&lt;td>2031&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 线性 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/apply-operations-to-make-two-strings-equal/" target="_blank" rel="noopener"
>2896. 执行操作使两个字符串相等&lt;/a>&lt;/td>
&lt;td>2172&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 线性 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/number-of-strings-which-can-be-rearranged-to-contain-substring/" target="_blank" rel="noopener"
>2930. 重新排列后包含指定子字符串的字符串数目&lt;/a>&lt;/td>
&lt;td>2227&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 背包 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-edge-reversals-so-every-node-is-reachable/" target="_blank" rel="noopener"
>2858. 可以到达每一个节点的最少边反转次数&lt;/a>&lt;/td>
&lt;td>2295&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 换根 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/number-of-beautiful-integers-in-the-range/" target="_blank" rel="noopener"
>2827. 范围中美丽整数的数目&lt;/a>&lt;/td>
&lt;td>2324&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 数位 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-points-after-collecting-coins-from-all-nodes/" target="_blank" rel="noopener"
>2920. 收集所有金币可获得的最大积分&lt;/a>&lt;/td>
&lt;td>2351&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 树形 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-stepping-numbers-in-range/" target="_blank" rel="noopener"
>2801. 统计范围内的步进数字数目&lt;/a>&lt;/td>
&lt;td>2367&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 数位 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-balanced-subsequence-sum/" target="_blank" rel="noopener"
>2926. 平衡子序列的最大和&lt;/a>&lt;/td>
&lt;td>2448&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 树状数组优化 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-changes-to-make-k-semi-palindromes/" target="_blank" rel="noopener"
>2911. 得到 K 个半回文串的最少修改次数&lt;/a>&lt;/td>
&lt;td>2608&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 划分型 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-of-sub-multisets-with-bounded-sum/" target="_blank" rel="noopener"
>2902. 和带限制的子多重集合的数目&lt;/a>&lt;/td>
&lt;td>2759&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 多重背包方案数、前缀和优化 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/string-transformation/" target="_blank" rel="noopener"
>2851. 字符串转换&lt;/a>&lt;/td>
&lt;td>2858&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> KMP、矩阵快速幂优化 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/find-maximum-non-decreasing-array-length/" target="_blank" rel="noopener"
>2945. 找到最大非递减数组的长度&lt;/a>&lt;/td>
&lt;td>2943&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 单调队列优化 DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-time-to-make-array-sum-at-most-x/" target="_blank" rel="noopener"
>2809. 使数组和小于等于 x 的最少时间&lt;/a>&lt;/td>
&lt;td>2979&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 贪心+DP &lt;/font>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="相关文章-1">相关文章&lt;/h4>
&lt;p>在之前的每日一题中，我写了大量「教你一步步思考 DP」的题解，请看 &lt;a class="link" href="https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md" target="_blank" rel="noopener"
>往期题解精选&lt;/a> 中的动态规划。&lt;/p>
&lt;h2 id="三图论">三、图论&lt;/h2>
&lt;p>周赛第四题约占 $10%$。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>知识点&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-cost-to-convert-string-i/" target="_blank" rel="noopener"
>2976. 转换字符串的最小成本 I&lt;/a>&lt;/td>
&lt;td>待定&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> Floyd &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/number-of-possible-sets-of-closing-branches/" target="_blank" rel="noopener"
>2959. 关闭分部的可行集合数目&lt;/a>&lt;/td>
&lt;td>2077&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 二进制枚举、Floyd &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/find-the-safest-path-in-a-grid/" target="_blank" rel="noopener"
>2812. 找出最安全路径&lt;/a>&lt;/td>
&lt;td>2154&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 多源 BFS &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-visited-nodes-in-a-directed-graph/" target="_blank" rel="noopener"
>2876. 有向图访问计数&lt;/a>&lt;/td>
&lt;td>2210&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 基环树 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-edge-weight-equilibrium-queries-in-a-tree/" target="_blank" rel="noopener"
>2846. 边权重均等查询&lt;/a>&lt;/td>
&lt;td>2508&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 最近公共祖先 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximize-value-of-function-in-a-ball-passing-game/" target="_blank" rel="noopener"
>2836. 在传球游戏中最大化函数值&lt;/a>&lt;/td>
&lt;td>2769&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 倍增/基环树 &lt;/font>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="相关文章-2">相关文章&lt;/h4>
&lt;ul>
&lt;li>&lt;a class="link" href="https://leetcode.cn/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/solution/dai-ni-fa-ming-floyd-suan-fa-cong-ji-yi-m8s51/" target="_blank" rel="noopener"
>带你发明 Floyd 算法：从记忆化搜索到递推&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://leetcode.cn/problems/kth-ancestor-of-a-tree-node/solution/mo-ban-jiang-jie-shu-shang-bei-zeng-suan-v3rw/" target="_blank" rel="noopener"
>树上倍增、最近公共祖先 LCA&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="四数据结构">四、数据结构&lt;/h2>
&lt;p>周赛第四题约占 $10%$。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>知识点&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/faulty-keyboard/" target="_blank" rel="noopener"
>2810. 故障键盘&lt;/a>&lt;/td>
&lt;td>1193&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> $\mathcal{O}(n)$ 做法 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/beautiful-towers-ii/" target="_blank" rel="noopener"
>2866. 美丽塔 II&lt;/a>&lt;/td>
&lt;td>2072&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 单调栈、前后缀分解 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/find-building-where-alice-and-bob-can-meet/" target="_blank" rel="noopener"
>2940. 找到 Alice 和 Bob 可以相遇的建筑&lt;/a>&lt;/td>
&lt;td>2327&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 最小堆/线段树二分 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-strong-pair-xor-ii/" target="_blank" rel="noopener"
>2935. 找出强数对的最大异或值 II&lt;/a>&lt;/td>
&lt;td>2349&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 0-1 字典树/哈希表 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/apply-operations-to-maximize-score/" target="_blank" rel="noopener"
>2818. 操作使得分最大&lt;/a>&lt;/td>
&lt;td>2397&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 单调栈、贡献法 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/subarrays-distinct-element-sum-of-squares-ii/" target="_blank" rel="noopener"
>2916. 子数组不同元素数目的平方和 II&lt;/a>&lt;/td>
&lt;td>2816&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 线段树 &lt;/font>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="相关文章-3">相关文章&lt;/h4>
&lt;p>&lt;a class="link" href="https://leetcode.cn/problems/range-sum-query-mutable/solution/dai-ni-fa-ming-shu-zhuang-shu-zu-fu-shu-lyfll/" target="_blank" rel="noopener"
>带你发明树状数组，用数学证明算法正确性&lt;/a>&lt;/p>
&lt;h2 id="五数学">五、数学&lt;/h2>
&lt;p>主要考察数论、组合数学相关内容。&lt;/p>
&lt;p>周赛第二题约占 $15%$，第四题约占 $18%$。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>知识点&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/prime-pairs-with-target-sum/" target="_blank" rel="noopener"
>2761. 和等于目标值的质数对&lt;/a>&lt;/td>
&lt;td>1505&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 埃氏筛、线性筛 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/distribute-candies-among-children-ii/" target="_blank" rel="noopener"
>2929. 给小朋友们分糖果 II&lt;/a>&lt;/td>
&lt;td>1701&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 容斥原理 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-k-subsequences-of-a-string-with-maximum-beauty/" target="_blank" rel="noopener"
>2842. 统计一个字符串的 k 子序列美丽值最大的数目&lt;/a>&lt;/td>
&lt;td>2092&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 组合数学 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/number-of-strings-which-can-be-rearranged-to-contain-substring/" target="_blank" rel="noopener"
>2930. 重新排列后包含指定子字符串的字符串数目&lt;/a>&lt;/td>
&lt;td>2227&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 容斥原理 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-element-sum-of-a-complete-subset-of-indices/" target="_blank" rel="noopener"
>2862. 完全子集的最大元素和&lt;/a>&lt;/td>
&lt;td>2292&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 因子 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-valid-paths-in-a-tree/" target="_blank" rel="noopener"
>2867. 统计树中的合法路径数目&lt;/a>&lt;/td>
&lt;td>2428&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 树上计数 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-beautiful-substrings-ii/" target="_blank" rel="noopener"
>2949. 统计美丽子字符串 II&lt;/a>&lt;/td>
&lt;td>2445&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 因子 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/count-the-number-of-infection-sequences/" target="_blank" rel="noopener"
>2954. 统计感冒序列的数目&lt;/a>&lt;/td>
&lt;td>2645&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 组合数学 &lt;/font>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="六思维题">六、思维题&lt;/h2>
&lt;p>包含贪心、脑筋急转弯等。&lt;/p>
&lt;p>常见于周赛第二题（约占 $35%$）和第三题（约占 $23%$）。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>知识点&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/separate-black-and-white-balls/" target="_blank" rel="noopener"
>2938. 区分黑球与白球&lt;/a>&lt;/td>
&lt;td>1423&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 贪心 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-number-of-changes-to-make-binary-string-beautiful/" target="_blank" rel="noopener"
>2914. 使二进制字符串变美丽的最少修改次数&lt;/a>&lt;/td>
&lt;td>1480&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 脑筋急转弯 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/largest-element-in-an-array-after-merge-operations/" target="_blank" rel="noopener"
>2789. 合并后数组中的最大元素&lt;/a>&lt;/td>
&lt;td>1485&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 贪心 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/check-if-strings-can-be-made-equal-with-operations-ii/" target="_blank" rel="noopener"
>2840. 判断通过操作能否让字符串相等 II&lt;/a>&lt;/td>
&lt;td>1486&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 结论 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-equal-sum-of-two-arrays-after-replacing-zeros/" target="_blank" rel="noopener"
>2918. 数组的最小相等和&lt;/a>&lt;/td>
&lt;td>1526&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 贪心、分类讨论 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/check-if-it-is-possible-to-split-array/" target="_blank" rel="noopener"
>2811. 判断是否能拆分数组&lt;/a>&lt;/td>
&lt;td>1543&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 脑筋急转弯 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-array-length-after-pair-removals/" target="_blank" rel="noopener"
>2856. 删除数对后的最小数组长度&lt;/a>&lt;/td>
&lt;td>1750&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> $\mathcal{O}(\log n)$ 做法 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/split-array-into-maximum-number-of-subarrays/" target="_blank" rel="noopener"
>2871. 将数组分割成最多数目的子数组&lt;/a>&lt;/td>
&lt;td>1750&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 贪心、位运算 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-number-of-coins-to-be-added/" target="_blank" rel="noopener"
>2952. 需要添加的硬币的最小数量&lt;/a>&lt;/td>
&lt;td>1784&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 贪心 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-operations-to-maximize-last-elements-in-arrays/" target="_blank" rel="noopener"
>2934. 最大化数组末位元素的最少操作次数&lt;/a>&lt;/td>
&lt;td>1803&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 分类讨论 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-spending-after-buying-items/" target="_blank" rel="noopener"
>2931. 购买物品的最大开销&lt;/a>&lt;/td>
&lt;td>1822&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 贪心、排序不等式 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-seconds-to-equalize-a-circular-array/" target="_blank" rel="noopener"
>2808. 使循环数组所有元素相等的最少秒数&lt;/a>&lt;/td>
&lt;td>1875&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 贪心 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-xor-product/" target="_blank" rel="noopener"
>2939. 最大异或乘积&lt;/a>&lt;/td>
&lt;td>2128&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 贪心、位运算 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-number-of-groups-to-create-a-valid-assignment/" target="_blank" rel="noopener"
>2910. 合法分组的最少组数&lt;/a>&lt;/td>
&lt;td>2132&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 贪心 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/minimum-operations-to-form-subsequence-with-target-sum/" target="_blank" rel="noopener"
>2835. 使子序列的和等于目标的最少操作次数&lt;/a>&lt;/td>
&lt;td>2207&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 贪心、位运算 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/apply-operations-on-array-to-maximize-sum-of-squares/" target="_blank" rel="noopener"
>2897. 对数组执行操作使平方和最大&lt;/a>&lt;/td>
&lt;td>2301&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 贪心、位运算 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-elegance-of-a-k-length-subsequence/" target="_blank" rel="noopener"
>2813. 子序列最大优雅度&lt;/a>&lt;/td>
&lt;td>2582&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 反悔贪心 &lt;/font>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://leetcode.cn/problems/maximum-number-of-groups-with-increasing-length/" target="_blank" rel="noopener"
>2790. 长度递增组的最大数目&lt;/a>&lt;/td>
&lt;td>2620&lt;/td>
&lt;td>&lt;font style="background:white" color="white"> 贪心、构造 &lt;/font>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="相关文章-4">相关文章&lt;/h4>
&lt;ul>
&lt;li>&lt;a class="link" href="https://leetcode.cn/circle/discuss/CaOJ45/" target="_blank" rel="noopener"
>从集合论到位运算，常见位运算技巧分类总结！&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="总结">总结&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>上半年中位数&lt;/th>
&lt;th>下半年中位数&lt;/th>
&lt;th>变化量&lt;/th>
&lt;th>全年中位数&lt;/th>
&lt;th>全年平均值&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>第一题&lt;/td>
&lt;td>$1259$&lt;/td>
&lt;td>$1248$&lt;/td>
&lt;td>$-11$&lt;/td>
&lt;td>$1256$&lt;/td>
&lt;td>$1265$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>第二题&lt;/td>
&lt;td>$1428$&lt;/td>
&lt;td>$1485$&lt;/td>
&lt;td>$57$&lt;/td>
&lt;td>$1468$&lt;/td>
&lt;td>$1480$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>第三题&lt;/td>
&lt;td>$1791$&lt;/td>
&lt;td>$1899$&lt;/td>
&lt;td>$108$&lt;/td>
&lt;td>$1889$&lt;/td>
&lt;td>$1887$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>第四题&lt;/td>
&lt;td>$2281$&lt;/td>
&lt;td>$2337$&lt;/td>
&lt;td>$56$&lt;/td>
&lt;td>$2327$&lt;/td>
&lt;td>$2318$&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>欲穷千里目，更上一层楼。最后祝大家新年快乐，在新的一年能实现自己的目标，不断变强！&lt;/p></description></item><item><title>Links</title><link>https://niluan304.github.io/links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://niluan304.github.io/links/</guid><description>&lt;h3 id="你好这里是雾封随笔的地方">你好，这里是雾封随笔的地方&lt;/h3></description></item><item><title>Search</title><link>https://niluan304.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://niluan304.github.io/search/</guid><description/></item></channel></rss>